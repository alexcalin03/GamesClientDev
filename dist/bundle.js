(()=>{var t,e,s={133:(t,e,s)=>{"use strict";s.d(e,{L:()=>r});const i={default:-1};function r(t="default"){return void 0===i[t]&&(i[t]=-1),++i[t]}},218:(t,e,s)=>{"use strict";s.d(e,{n:()=>h});var i=s(4486),r=s(133),n=s(4670);const a=Object.create(null),o=class t extends i.A{constructor(e={}){super(),this._resourceType="textureSampler",this._touched=0,this._maxAnisotropy=1,this.destroyed=!1,e={...t.defaultOptions,...e},this.addressMode=e.addressMode,this.addressModeU=e.addressModeU??this.addressModeU,this.addressModeV=e.addressModeV??this.addressModeV,this.addressModeW=e.addressModeW??this.addressModeW,this.scaleMode=e.scaleMode,this.magFilter=e.magFilter??this.magFilter,this.minFilter=e.minFilter??this.minFilter,this.mipmapFilter=e.mipmapFilter??this.mipmapFilter,this.lodMinClamp=e.lodMinClamp,this.lodMaxClamp=e.lodMaxClamp,this.compare=e.compare,this.maxAnisotropy=e.maxAnisotropy??1}set addressMode(t){this.addressModeU=t,this.addressModeV=t,this.addressModeW=t}get addressMode(){return this.addressModeU}set wrapMode(t){(0,n.t6)(n.lj,"TextureStyle.wrapMode is now TextureStyle.addressMode"),this.addressMode=t}get wrapMode(){return this.addressMode}set scaleMode(t){this.magFilter=t,this.minFilter=t,this.mipmapFilter=t}get scaleMode(){return this.magFilter}set maxAnisotropy(t){this._maxAnisotropy=Math.min(t,16),this._maxAnisotropy>1&&(this.scaleMode="linear")}get maxAnisotropy(){return this._maxAnisotropy}get _resourceId(){return this._sharedResourceId||this._generateResourceId()}update(){this.emit("change",this),this._sharedResourceId=null}_generateResourceId(){const t=`${this.addressModeU}-${this.addressModeV}-${this.addressModeW}-${this.magFilter}-${this.minFilter}-${this.mipmapFilter}-${this.lodMinClamp}-${this.lodMaxClamp}-${this.compare}-${this._maxAnisotropy}`;return this._sharedResourceId=function(t){const e=a[t];return void 0===e&&(a[t]=(0,r.L)("resource")),e}(t),this._resourceId}destroy(){this.destroyed=!0,this.emit("destroy",this),this.emit("change",this),this.removeAllListeners()}};o.defaultOptions={addressMode:"clamp-to-edge",scaleMode:"linear"};let h=o},228:t=>{"use strict";var e=Object.prototype.hasOwnProperty,s="~";function i(){}function r(t,e,s){this.fn=t,this.context=e,this.once=s||!1}function n(t,e,i,n,a){if("function"!=typeof i)throw new TypeError("The listener must be a function");var o=new r(i,n||t,a),h=s?s+e:e;return t._events[h]?t._events[h].fn?t._events[h]=[t._events[h],o]:t._events[h].push(o):(t._events[h]=o,t._eventsCount++),t}function a(t,e){0===--t._eventsCount?t._events=new i:delete t._events[e]}function o(){this._events=new i,this._eventsCount=0}Object.create&&(i.prototype=Object.create(null),(new i).__proto__||(s=!1)),o.prototype.eventNames=function(){var t,i,r=[];if(0===this._eventsCount)return r;for(i in t=this._events)e.call(t,i)&&r.push(s?i.slice(1):i);return Object.getOwnPropertySymbols?r.concat(Object.getOwnPropertySymbols(t)):r},o.prototype.listeners=function(t){var e=s?s+t:t,i=this._events[e];if(!i)return[];if(i.fn)return[i.fn];for(var r=0,n=i.length,a=new Array(n);r<n;r++)a[r]=i[r].fn;return a},o.prototype.listenerCount=function(t){var e=s?s+t:t,i=this._events[e];return i?i.fn?1:i.length:0},o.prototype.emit=function(t,e,i,r,n,a){var o=s?s+t:t;if(!this._events[o])return!1;var h,l,u=this._events[o],c=arguments.length;if(u.fn){switch(u.once&&this.removeListener(t,u.fn,void 0,!0),c){case 1:return u.fn.call(u.context),!0;case 2:return u.fn.call(u.context,e),!0;case 3:return u.fn.call(u.context,e,i),!0;case 4:return u.fn.call(u.context,e,i,r),!0;case 5:return u.fn.call(u.context,e,i,r,n),!0;case 6:return u.fn.call(u.context,e,i,r,n,a),!0}for(l=1,h=new Array(c-1);l<c;l++)h[l-1]=arguments[l];u.fn.apply(u.context,h)}else{var d,p=u.length;for(l=0;l<p;l++)switch(u[l].once&&this.removeListener(t,u[l].fn,void 0,!0),c){case 1:u[l].fn.call(u[l].context);break;case 2:u[l].fn.call(u[l].context,e);break;case 3:u[l].fn.call(u[l].context,e,i);break;case 4:u[l].fn.call(u[l].context,e,i,r);break;default:if(!h)for(d=1,h=new Array(c-1);d<c;d++)h[d-1]=arguments[d];u[l].fn.apply(u[l].context,h)}}return!0},o.prototype.on=function(t,e,s){return n(this,t,e,s,!1)},o.prototype.once=function(t,e,s){return n(this,t,e,s,!0)},o.prototype.removeListener=function(t,e,i,r){var n=s?s+t:t;if(!this._events[n])return this;if(!e)return a(this,n),this;var o=this._events[n];if(o.fn)o.fn!==e||r&&!o.once||i&&o.context!==i||a(this,n);else{for(var h=0,l=[],u=o.length;h<u;h++)(o[h].fn!==e||r&&!o[h].once||i&&o[h].context!==i)&&l.push(o[h]);l.length?this._events[n]=1===l.length?l[0]:l:a(this,n)}return this},o.prototype.removeAllListeners=function(t){var e;return t?(e=s?s+t:t,this._events[e]&&a(this,e)):(this._events=new i,this._eventsCount=0),this},o.prototype.off=o.prototype.removeListener,o.prototype.addListener=o.prototype.on,o.prefixed=s,o.EventEmitter=o,t.exports=o},268:(t,e,s)=>{"use strict";s.d(e,{R:()=>n});let i=0;const r=500;function n(...t){i!==r&&(i++,i===r?console.warn("PixiJS Warning: too many warnings, no more warnings will be reported to the console by PixiJS."):console.warn("PixiJS Warning: ",...t))}},341:(t,e,s)=>{"use strict";s.d(e,{w:()=>a});var i=s(3513),r=s(4492);const n={};function a(t,e,s){let a=2166136261;for(let s=0;s<e;s++)a^=t[s].uid,a=Math.imul(a,16777619),a>>>=0;return n[a]||function(t,e,s,a){const o={};let h=0;for(let s=0;s<a;s++){const i=s<e?t[s]:r.g.EMPTY.source;o[h++]=i.source,o[h++]=i.style}const l=new i.T(o);return n[s]=l,l}(t,e,a,s)}},583:(t,e,s)=>{"use strict";s.d(e,{v:()=>l});var i=s(4486),r=s(9939),n=s(2698),a=s(133),o=s(218);const h=class t extends i.A{constructor(e={}){super(),this.options=e,this.uid=(0,a.L)("textureSource"),this._resourceType="textureSource",this._resourceId=(0,a.L)("resource"),this.uploadMethodId="unknown",this._resolution=1,this.pixelWidth=1,this.pixelHeight=1,this.width=1,this.height=1,this.sampleCount=1,this.mipLevelCount=1,this.autoGenerateMipmaps=!1,this.format="rgba8unorm",this.dimension="2d",this.antialias=!1,this._touched=0,this._batchTick=-1,this._textureBindLocation=-1,e={...t.defaultOptions,...e},this.label=e.label??"",this.resource=e.resource,this.autoGarbageCollect=e.autoGarbageCollect,this._resolution=e.resolution,e.width?this.pixelWidth=e.width*this._resolution:this.pixelWidth=this.resource?this.resourceWidth??1:1,e.height?this.pixelHeight=e.height*this._resolution:this.pixelHeight=this.resource?this.resourceHeight??1:1,this.width=this.pixelWidth/this._resolution,this.height=this.pixelHeight/this._resolution,this.format=e.format,this.dimension=e.dimensions,this.mipLevelCount=e.mipLevelCount,this.autoGenerateMipmaps=e.autoGenerateMipmaps,this.sampleCount=e.sampleCount,this.antialias=e.antialias,this.alphaMode=e.alphaMode,this.style=new o.n((0,n.S)(e)),this.destroyed=!1,this._refreshPOT()}get source(){return this}get style(){return this._style}set style(t){this.style!==t&&(this._style?.off("change",this._onStyleChange,this),this._style=t,this._style?.on("change",this._onStyleChange,this),this._onStyleChange())}set maxAnisotropy(t){this._style.maxAnisotropy=t}get maxAnisotropy(){return this._style.maxAnisotropy}get addressMode(){return this._style.addressMode}set addressMode(t){this._style.addressMode=t}get repeatMode(){return this._style.addressMode}set repeatMode(t){this._style.addressMode=t}get magFilter(){return this._style.magFilter}set magFilter(t){this._style.magFilter=t}get minFilter(){return this._style.minFilter}set minFilter(t){this._style.minFilter=t}get mipmapFilter(){return this._style.mipmapFilter}set mipmapFilter(t){this._style.mipmapFilter=t}get lodMinClamp(){return this._style.lodMinClamp}set lodMinClamp(t){this._style.lodMinClamp=t}get lodMaxClamp(){return this._style.lodMaxClamp}set lodMaxClamp(t){this._style.lodMaxClamp=t}_onStyleChange(){this.emit("styleChange",this)}update(){if(this.resource){const t=this._resolution;if(this.resize(this.resourceWidth/t,this.resourceHeight/t))return}this.emit("update",this)}destroy(){this.destroyed=!0,this.emit("destroy",this),this.emit("change",this),this._style&&(this._style.destroy(),this._style=null),this.uploadMethodId=null,this.resource=null,this.removeAllListeners()}unload(){this._resourceId=(0,a.L)("resource"),this.emit("change",this),this.emit("unload",this)}get resourceWidth(){const{resource:t}=this;return t.naturalWidth||t.videoWidth||t.displayWidth||t.width}get resourceHeight(){const{resource:t}=this;return t.naturalHeight||t.videoHeight||t.displayHeight||t.height}get resolution(){return this._resolution}set resolution(t){this._resolution!==t&&(this._resolution=t,this.width=this.pixelWidth/t,this.height=this.pixelHeight/t)}resize(t,e,s){s||(s=this._resolution),t||(t=this.width),e||(e=this.height);const i=Math.round(t*s),r=Math.round(e*s);return this.width=i/s,this.height=r/s,this._resolution=s,(this.pixelWidth!==i||this.pixelHeight!==r)&&(this._refreshPOT(),this.pixelWidth=i,this.pixelHeight=r,this.emit("resize",this),this._resourceId=(0,a.L)("resource"),this.emit("change",this),!0)}updateMipmaps(){this.autoGenerateMipmaps&&this.mipLevelCount>1&&this.emit("updateMipmaps",this)}set wrapMode(t){this._style.wrapMode=t}get wrapMode(){return this._style.wrapMode}set scaleMode(t){this._style.scaleMode=t}get scaleMode(){return this._style.scaleMode}_refreshPOT(){this.isPowerOfTwo=(0,r.f3)(this.pixelWidth)&&(0,r.f3)(this.pixelHeight)}static test(t){throw new Error("Unimplemented")}};h.defaultOptions={resolution:1,format:"bgra8unorm",alphaMode:"premultiply-alpha-on-upload",dimensions:"2d",mipLevelCount:1,autoGenerateMipmaps:!1,sampleCount:1,antialias:!1,autoGarbageCollect:!1};let l=h},753:(t,e,s)=>{"use strict";s.d(e,{j:()=>n});var i=s(4676);const r=16777215;function n(t,e){return t===r?e:e===r?t:(0,i.u)(t,e)}},800:(t,e,s)=>{"use strict";s.d(e,{k:()=>g});var i=s(2577),r=s(8507);const n=[];r.XO.handleByNamedList(r.Ag.Environment,n);var a=s(7457),o=s(4577),h=s(133),l=s(4670),u=s(6083),c=s(1257),d=s(7729),p=s(4486);const f=["init","destroy","contextChange","resolutionChange","resetState","renderEnd","renderStart","render","update","postrender","prerender"],m=class t extends p.A{constructor(t){super(),this.uid=(0,h.L)("renderer"),this.runners=Object.create(null),this.renderPipes=Object.create(null),this._initOptions={},this._systemsHash=Object.create(null),this.type=t.type,this.name=t.name,this.config=t;const e=[...f,...this.config.runners??[]];this._addRunners(...e),this._unsafeEvalCheck()}async init(e={}){const s=!0===e.skipExtensionImports||!1===e.manageImports;await async function(t){if(!t)for(let t=0;t<n.length;t++){const e=n[t];if(e.value.test())return void await e.value.load()}}(s),this._addSystems(this.config.systems),this._addPipes(this.config.renderPipes,this.config.renderPipeAdaptors);for(const t in this._systemsHash)e={...this._systemsHash[t].constructor.defaultOptions,...e};e={...t.defaultOptions,...e},this._roundPixels=e.roundPixels?1:0;for(let t=0;t<this.runners.init.items.length;t++)await this.runners.init.items[t].init(e);this._initOptions=e}render(t,e){let s=t;if(s instanceof a.mc&&(s={container:s},e&&((0,l.t6)(l.lj,"passing a second argument is deprecated, please use render options instead"),s.target=e.renderTexture)),s.target||(s.target=this.view.renderTarget),s.target===this.view.renderTarget&&(this._lastObjectRendered=s.container,s.clearColor??(s.clearColor=this.background.colorRgba),s.clear??(s.clear=this.background.clearBeforeRender)),s.clearColor){const t=Array.isArray(s.clearColor)&&4===s.clearColor.length;s.clearColor=t?s.clearColor:i.Q.shared.setValue(s.clearColor).toArray()}s.transform||(s.container.updateLocalTransform(),s.transform=s.container.localTransform),s.container.visible&&(s.container.enableRenderGroup(),this.runners.prerender.emit(s),this.runners.renderStart.emit(s),this.runners.render.emit(s),this.runners.renderEnd.emit(s),this.runners.postrender.emit(s))}resize(t,e,s){const i=this.view.resolution;this.view.resize(t,e,s),this.emit("resize",this.view.screen.width,this.view.screen.height,this.view.resolution),void 0!==s&&s!==i&&this.runners.resolutionChange.emit(s)}clear(t={}){t.target||(t.target=this.renderTarget.renderTarget),t.clearColor||(t.clearColor=this.background.colorRgba),t.clear??(t.clear=c.u.ALL);const{clear:e,clearColor:s,target:r}=t;i.Q.shared.setValue(s??this.background.colorRgba),this.renderTarget.clear(r,e,i.Q.shared.toArray())}get resolution(){return this.view.resolution}set resolution(t){this.view.resolution=t,this.runners.resolutionChange.emit(t)}get width(){return this.view.texture.frame.width}get height(){return this.view.texture.frame.height}get canvas(){return this.view.canvas}get lastObjectRendered(){return this._lastObjectRendered}get renderingToScreen(){return this.renderTarget.renderingToScreen}get screen(){return this.view.screen}_addRunners(...t){t.forEach(t=>{this.runners[t]=new d.C(t)})}_addSystems(t){let e;for(e in t){const s=t[e];this._addSystem(s.value,s.name)}}_addSystem(t,e){const s=new t(this);if(this[e])throw new Error(`Whoops! The name "${e}" is already in use`);this[e]=s,this._systemsHash[e]=s;for(const t in this.runners)this.runners[t].add(s);return this}_addPipes(t,e){const s=e.reduce((t,e)=>(t[e.name]=e.value,t),{});t.forEach(t=>{const e=t.value,i=t.name,r=s[i];this.renderPipes[i]=new e(this,r?new r:null),this.runners.destroy.add(this.renderPipes[i])})}destroy(t=!1){this.runners.destroy.items.reverse(),this.runners.destroy.emit(t),Object.values(this.runners).forEach(t=>{t.destroy()}),(!0===t||"object"==typeof t&&t.releaseGlobalResources)&&u.L.release(),this._systemsHash=null,this.renderPipes=null}generateTexture(t){return this.textureGenerator.generateTexture(t)}get roundPixels(){return!!this._roundPixels}_unsafeEvalCheck(){if(!(0,o.f)())throw new Error("Current environment does not allow unsafe-eval, please use pixi.js/unsafe-eval module to enable support.")}resetState(){this.runners.resetState.emit()}};m.defaultOptions={resolution:1,failIfMajorPerformanceCaveat:!1,roundPixels:!1};let g=m},848:(t,e,s)=>{"use strict";s.d(e,{L:()=>r});var i=s(133);class r{constructor(){this.uid=(0,i.L)("instructionSet"),this.instructions=[],this.instructionSize=0,this.renderables=[],this.gcTick=0}reset(){this.instructionSize=0}destroy(){this.instructions.length=0,this.renderables.length=0,this.renderPipes=null,this.gcTick=0}add(t){this.instructions[this.instructionSize++]=t}log(){this.instructions.length=this.instructionSize,console.table(this.instructions,["type","action"])}}},949:(t,e,s)=>{"use strict";s.d(e,{h:()=>a});var i=s(4486),r=s(133),n=s(1132);class a extends i.A{constructor(t){let{data:e,size:s}=t;const{usage:i,label:n,shrinkToFit:a}=t;super(),this.uid=(0,r.L)("buffer"),this._resourceType="buffer",this._resourceId=(0,r.L)("resource"),this._touched=0,this._updateID=1,this._dataInt32=null,this.shrinkToFit=!0,this.destroyed=!1,e instanceof Array&&(e=new Float32Array(e)),this._data=e,s??(s=e?.byteLength);const o=!!e;this.descriptor={size:s,usage:i,mappedAtCreation:o,label:n},this.shrinkToFit=a??!0}get data(){return this._data}set data(t){this.setDataWithSize(t,t.length,!0)}get dataInt32(){return this._dataInt32||(this._dataInt32=new Int32Array(this.data.buffer)),this._dataInt32}get static(){return!!(this.descriptor.usage&n.S.STATIC)}set static(t){t?this.descriptor.usage|=n.S.STATIC:this.descriptor.usage&=~n.S.STATIC}setDataWithSize(t,e,s){if(this._updateID++,this._updateSize=e*t.BYTES_PER_ELEMENT,this._data===t)return void(s&&this.emit("update",this));const i=this._data;this._data=t,this._dataInt32=null,i&&i.length===t.length||!this.shrinkToFit&&i&&t.byteLength<i.byteLength?s&&this.emit("update",this):(this.descriptor.size=t.byteLength,this._resourceId=(0,r.L)("resource"),this.emit("change",this))}update(t){this._updateSize=t??this._updateSize,this._updateID++,this.emit("update",this)}destroy(){this.destroyed=!0,this.emit("destroy",this),this.emit("change",this),this._data=null,this.descriptor=null,this.removeAllListeners()}}},990:(t,e,s)=>{"use strict";s.d(e,{T:()=>d,w:()=>c});var i=s(2577),r=s(4492),n=s(7276),a=s(2806);function o(t){return t instanceof a.m}function h(t){return t instanceof n._}function l(t,e,s){return t.fill=e,t.color=16777215,t.texture=e.texture,t.matrix=e.transform,{...s,...t}}function u(t,e,s){return e.buildGradient(),t.fill=e,t.color=16777215,t.texture=e.texture,t.matrix=e.transform,t.textureSpace=e.textureSpace,{...s,...t}}function c(t,e){if(null==t)return null;const s={},n=t;return function(t){return i.Q.isColorLike(t)}(t)?function(t,e,s){const n=i.Q.shared.setValue(e??0);return t.color=n.toNumber(),t.alpha=1===n.alpha?s.alpha:n.alpha,t.texture=r.g.WHITE,{...s,...t}}(s,t,e):function(t){return t instanceof r.g}(t)?function(t,e,s){return t.texture=e,{...s,...t}}(s,t,e):o(t)?l(s,t,e):h(t)?u(s,t,e):n.fill&&o(n.fill)?l(n,n.fill,e):n.fill&&h(n.fill)?u(n,n.fill,e):function(t,e){const s={...e,...t},r=i.Q.shared.setValue(s.color);return s.alpha*=r.alpha,s.color=r.toNumber(),s}(n,e)}function d(t,e){const{width:s,alignment:i,miterLimit:r,cap:n,join:a,pixelLine:o,...h}=e,l=c(t,h);return l?{width:s,alignment:i,miterLimit:r,cap:n,join:a,pixelLine:o,...l}:null}},1132:(t,e,s)=>{"use strict";s.d(e,{S:()=>i});var i=(t=>(t[t.MAP_READ=1]="MAP_READ",t[t.MAP_WRITE=2]="MAP_WRITE",t[t.COPY_SRC=4]="COPY_SRC",t[t.COPY_DST=8]="COPY_DST",t[t.INDEX=16]="INDEX",t[t.VERTEX=32]="VERTEX",t[t.UNIFORM=64]="UNIFORM",t[t.STORAGE=128]="STORAGE",t[t.INDIRECT=256]="INDIRECT",t[t.QUERY_RESOLVE=512]="QUERY_RESOLVE",t[t.STATIC=1024]="STATIC",t))(i||{})},1196:(t,e,s)=>{"use strict";s.d(e,{N:()=>n});var i=s(9313);const r=new i.u;class n{constructor(t,e){this.mapCoord=new i.u,this.uClampFrame=new Float32Array(4),this.uClampOffset=new Float32Array(2),this._textureID=-1,this._updateID=0,this.clampOffset=0,this.clampMargin=void 0===e?t.width<10?0:.5:e,this.isSimple=!1,this.texture=t}get texture(){return this._texture}set texture(t){this.texture!==t&&(this._texture?.removeListener("update",this.update,this),this._texture=t,this._texture.addListener("update",this.update,this),this.update())}multiplyUvs(t,e){void 0===e&&(e=t);const s=this.mapCoord;for(let i=0;i<t.length;i+=2){const r=t[i],n=t[i+1];e[i]=r*s.a+n*s.c+s.tx,e[i+1]=r*s.b+n*s.d+s.ty}return e}update(){const t=this._texture;this._updateID++;const e=t.uvs;this.mapCoord.set(e.x1-e.x0,e.y1-e.y0,e.x3-e.x0,e.y3-e.y0,e.x0,e.y0);const s=t.orig,i=t.trim;i&&(r.set(s.width/i.width,0,0,s.height/i.height,-i.x/i.width,-i.y/i.height),this.mapCoord.append(r));const n=t.source,a=this.uClampFrame,o=this.clampMargin/n._resolution,h=this.clampOffset/n._resolution;return a[0]=(t.frame.x+o+h)/n.width,a[1]=(t.frame.y+o+h)/n.height,a[2]=(t.frame.x+t.frame.width-o+h)/n.width,a[3]=(t.frame.y+t.frame.height-o+h)/n.height,this.uClampOffset[0]=this.clampOffset/n.pixelWidth,this.uClampOffset[1]=this.clampOffset/n.pixelHeight,this.isSimple=t.frame.width===n.width&&t.frame.height===n.height&&0===t.rotate,!0}}},1257:(t,e,s)=>{"use strict";s.d(e,{u:()=>i});var i=(t=>(t[t.NONE=0]="NONE",t[t.COLOR=16384]="COLOR",t[t.STENCIL=1024]="STENCIL",t[t.DEPTH=256]="DEPTH",t[t.COLOR_DEPTH=16640]="COLOR_DEPTH",t[t.COLOR_STENCIL=17408]="COLOR_STENCIL",t[t.DEPTH_STENCIL=1280]="DEPTH_STENCIL",t[t.ALL=17664]="ALL",t))(i||{})},1460:(t,e,s)=>{"use strict";s.d(e,{u:()=>i});class i{constructor(t){"number"==typeof t?this.rawBinaryData=new ArrayBuffer(t):t instanceof Uint8Array?this.rawBinaryData=t.buffer:this.rawBinaryData=t,this.uint32View=new Uint32Array(this.rawBinaryData),this.float32View=new Float32Array(this.rawBinaryData),this.size=this.rawBinaryData.byteLength}get int8View(){return this._int8View||(this._int8View=new Int8Array(this.rawBinaryData)),this._int8View}get uint8View(){return this._uint8View||(this._uint8View=new Uint8Array(this.rawBinaryData)),this._uint8View}get int16View(){return this._int16View||(this._int16View=new Int16Array(this.rawBinaryData)),this._int16View}get int32View(){return this._int32View||(this._int32View=new Int32Array(this.rawBinaryData)),this._int32View}get float64View(){return this._float64Array||(this._float64Array=new Float64Array(this.rawBinaryData)),this._float64Array}get bigUint64View(){return this._bigUint64Array||(this._bigUint64Array=new BigUint64Array(this.rawBinaryData)),this._bigUint64Array}view(t){return this[`${t}View`]}destroy(){this.rawBinaryData=null,this._int8View=null,this._uint8View=null,this._int16View=null,this.uint16View=null,this._int32View=null,this.uint32View=null,this.float32View=null}static sizeOf(t){switch(t){case"int8":case"uint8":return 1;case"int16":case"uint16":return 2;case"int32":case"uint32":case"float32":return 4;default:throw new Error(`${t} isn't a valid view type`)}}}},1652:(t,e,s)=>{"use strict";s.d(e,{TO:()=>i,Td:()=>n,bO:()=>r});const i=2*Math.PI,r=180/Math.PI,n=Math.PI/180},1761:(t,e,s)=>{"use strict";s.d(e,{e:()=>r});let i={createCanvas:(t,e)=>{const s=document.createElement("canvas");return s.width=t,s.height=e,s},createImage:()=>new Image,getCanvasRenderingContext2D:()=>CanvasRenderingContext2D,getWebGLRenderingContext:()=>WebGLRenderingContext,getNavigator:()=>navigator,getBaseUrl:()=>document.baseURI??window.location.href,getFontFaceSet:()=>document.fonts,fetch:(t,e)=>fetch(t,e),parseXML:t=>(new DOMParser).parseFromString(t,"text/xml")};const r={get:()=>i,set(t){i=t}}},1957:(t,e,s)=>{"use strict";s.d(e,{K:()=>r,Q:()=>i});const i={normal:"normal-npm",add:"add-npm",screen:"screen-npm"};var r=(t=>(t[t.DISABLED=0]="DISABLED",t[t.RENDERING_MASK_ADD=1]="RENDERING_MASK_ADD",t[t.MASK_ACTIVE=2]="MASK_ACTIVE",t[t.INVERSE_MASK_ACTIVE=3]="INVERSE_MASK_ACTIVE",t[t.RENDERING_MASK_REMOVE=4]="RENDERING_MASK_REMOVE",t[t.NONE=5]="NONE",t))(r||{})},1979:(t,e,s)=>{"use strict";s.d(e,{l:()=>n});var i=s(268),r=s(2406);const n=new class{constructor(){this._parsers=[],this._cache=new Map,this._cacheMap=new Map}reset(){this._cacheMap.clear(),this._cache.clear()}has(t){return this._cache.has(t)}get(t){const e=this._cache.get(t);return e||(0,i.R)(`[Assets] Asset id ${t} was not found in the Cache`),e}set(t,e){const s=(0,r.z)(t);let n;for(let t=0;t<this.parsers.length;t++){const i=this.parsers[t];if(i.test(e)){n=i.getCacheableAssets(s,e);break}}const a=new Map(Object.entries(n||{}));n||s.forEach(t=>{a.set(t,e)});const o=[...a.keys()],h={cacheKeys:o,keys:s};s.forEach(t=>{this._cacheMap.set(t,h)}),o.forEach(t=>{const s=n?n[t]:e;this._cache.has(t)&&this._cache.get(t)!==s&&(0,i.R)("[Cache] already has key:",t),this._cache.set(t,a.get(t))})}remove(t){if(!this._cacheMap.has(t))return void(0,i.R)(`[Assets] Asset id ${t} was not found in the Cache`);const e=this._cacheMap.get(t);e.cacheKeys.forEach(t=>{this._cache.delete(t)}),e.keys.forEach(t=>{this._cacheMap.delete(t)})}get parsers(){return this._parsers}}},2048:(t,e,s)=>{"use strict";function i(t,e,s){const{width:i,height:r}=s.orig,n=s.trim;if(n){const s=n.width,a=n.height;t.minX=n.x-e._x*i,t.maxX=t.minX+s,t.minY=n.y-e._y*r,t.maxY=t.minY+a}else t.minX=-e._x*i,t.maxX=t.minX+i,t.minY=-e._y*r,t.maxY=t.minY+r}s.d(e,{y:()=>i})},2208:(t,e,s)=>{"use strict";s.d(e,{o:()=>o,u:()=>a});var i=s(9313),r=s(8655),n=s(9636);const a=r.Z.getPool(i.u),o=r.Z.getPool(n.c)},2406:(t,e,s)=>{"use strict";s.d(e,{z:()=>i});const i=(t,e,s=!1)=>(Array.isArray(t)||(t=[t]),e?t.map(t=>"string"==typeof t||s?e(t):t):t)},2437:(t,e,s)=>{"use strict";s.d(e,{W:()=>l});var i=s(9939),r=s(6083),n=s(583),a=s(4492),o=s(218);let h=0;const l=new class{constructor(t){this._poolKeyHash=Object.create(null),this._texturePool={},this.textureOptions=t||{},this.enableFullScreen=!1,this.textureStyle=new o.n(this.textureOptions)}createTexture(t,e,s){const i=new n.v({...this.textureOptions,width:t,height:e,resolution:1,antialias:s,autoGarbageCollect:!1});return new a.g({source:i,label:"texturePool_"+h++})}getOptimalTexture(t,e,s=1,r){let n=Math.ceil(t*s-1e-6),a=Math.ceil(e*s-1e-6);n=(0,i.U5)(n),a=(0,i.U5)(a);const o=(n<<17)+(a<<1)+(r?1:0);this._texturePool[o]||(this._texturePool[o]=[]);let h=this._texturePool[o].pop();return h||(h=this.createTexture(n,a,r)),h.source._resolution=s,h.source.width=n/s,h.source.height=a/s,h.source.pixelWidth=n,h.source.pixelHeight=a,h.frame.x=0,h.frame.y=0,h.frame.width=t,h.frame.height=e,h.updateUvs(),this._poolKeyHash[h.uid]=o,h}getSameSizeTexture(t,e=!1){const s=t.source;return this.getOptimalTexture(t.width,t.height,s._resolution,e)}returnTexture(t,e=!1){const s=this._poolKeyHash[t.uid];e&&(t.source.style=this.textureStyle),this._texturePool[s].push(t)}clear(t){if(t=!1!==t)for(const t in this._texturePool){const e=this._texturePool[t];if(e)for(let t=0;t<e.length;t++)e[t].destroy(!0)}this._texturePool={}}};r.L.register(l)},2571:(t,e,s)=>{"use strict";s.d(e,{xv:()=>i}),s(4486);const i="8.14.0"},2577:(t,e,s)=>{"use strict";s.d(e,{Q:()=>R});var i={grad:.9,turn:360,rad:360/(2*Math.PI)},r=function(t){return"string"==typeof t?t.length>0:"number"==typeof t},n=function(t,e,s){return void 0===e&&(e=0),void 0===s&&(s=Math.pow(10,e)),Math.round(s*t)/s+0},a=function(t,e,s){return void 0===e&&(e=0),void 0===s&&(s=1),t>s?s:t>e?t:e},o=function(t){return(t=isFinite(t)?t%360:0)>0?t:t+360},h=function(t){return{r:a(t.r,0,255),g:a(t.g,0,255),b:a(t.b,0,255),a:a(t.a)}},l=function(t){return{r:n(t.r),g:n(t.g),b:n(t.b),a:n(t.a,3)}},u=/^#([0-9a-f]{3,8})$/i,c=function(t){var e=t.toString(16);return e.length<2?"0"+e:e},d=function(t){var e=t.r,s=t.g,i=t.b,r=t.a,n=Math.max(e,s,i),a=n-Math.min(e,s,i),o=a?n===e?(s-i)/a:n===s?2+(i-e)/a:4+(e-s)/a:0;return{h:60*(o<0?o+6:o),s:n?a/n*100:0,v:n/255*100,a:r}},p=function(t){var e=t.h,s=t.s,i=t.v,r=t.a;e=e/360*6,s/=100,i/=100;var n=Math.floor(e),a=i*(1-s),o=i*(1-(e-n)*s),h=i*(1-(1-e+n)*s),l=n%6;return{r:255*[i,o,a,a,h,i][l],g:255*[h,i,i,o,a,a][l],b:255*[a,a,h,i,i,o][l],a:r}},f=function(t){return{h:o(t.h),s:a(t.s,0,100),l:a(t.l,0,100),a:a(t.a)}},m=function(t){return{h:n(t.h),s:n(t.s),l:n(t.l),a:n(t.a,3)}},g=function(t){return p((s=(e=t).s,{h:e.h,s:(s*=((i=e.l)<50?i:100-i)/100)>0?2*s/(i+s)*100:0,v:i+s,a:e.a}));var e,s,i},x=function(t){return{h:(e=d(t)).h,s:(r=(200-(s=e.s))*(i=e.v)/100)>0&&r<200?s*i/100/(r<=100?r:200-r)*100:0,l:r/2,a:e.a};var e,s,i,r},y=/^hsla?\(\s*([+-]?\d*\.?\d+)(deg|rad|grad|turn)?\s*,\s*([+-]?\d*\.?\d+)%\s*,\s*([+-]?\d*\.?\d+)%\s*(?:,\s*([+-]?\d*\.?\d+)(%)?\s*)?\)$/i,_=/^hsla?\(\s*([+-]?\d*\.?\d+)(deg|rad|grad|turn)?\s+([+-]?\d*\.?\d+)%\s+([+-]?\d*\.?\d+)%\s*(?:\/\s*([+-]?\d*\.?\d+)(%)?\s*)?\)$/i,b=/^rgba?\(\s*([+-]?\d*\.?\d+)(%)?\s*,\s*([+-]?\d*\.?\d+)(%)?\s*,\s*([+-]?\d*\.?\d+)(%)?\s*(?:,\s*([+-]?\d*\.?\d+)(%)?\s*)?\)$/i,v=/^rgba?\(\s*([+-]?\d*\.?\d+)(%)?\s+([+-]?\d*\.?\d+)(%)?\s+([+-]?\d*\.?\d+)(%)?\s*(?:\/\s*([+-]?\d*\.?\d+)(%)?\s*)?\)$/i,w={string:[[function(t){var e=u.exec(t);return e?(t=e[1]).length<=4?{r:parseInt(t[0]+t[0],16),g:parseInt(t[1]+t[1],16),b:parseInt(t[2]+t[2],16),a:4===t.length?n(parseInt(t[3]+t[3],16)/255,2):1}:6===t.length||8===t.length?{r:parseInt(t.substr(0,2),16),g:parseInt(t.substr(2,2),16),b:parseInt(t.substr(4,2),16),a:8===t.length?n(parseInt(t.substr(6,2),16)/255,2):1}:null:null},"hex"],[function(t){var e=b.exec(t)||v.exec(t);return e?e[2]!==e[4]||e[4]!==e[6]?null:h({r:Number(e[1])/(e[2]?100/255:1),g:Number(e[3])/(e[4]?100/255:1),b:Number(e[5])/(e[6]?100/255:1),a:void 0===e[7]?1:Number(e[7])/(e[8]?100:1)}):null},"rgb"],[function(t){var e=y.exec(t)||_.exec(t);if(!e)return null;var s,r,n=f({h:(s=e[1],r=e[2],void 0===r&&(r="deg"),Number(s)*(i[r]||1)),s:Number(e[3]),l:Number(e[4]),a:void 0===e[5]?1:Number(e[5])/(e[6]?100:1)});return g(n)},"hsl"]],object:[[function(t){var e=t.r,s=t.g,i=t.b,n=t.a,a=void 0===n?1:n;return r(e)&&r(s)&&r(i)?h({r:Number(e),g:Number(s),b:Number(i),a:Number(a)}):null},"rgb"],[function(t){var e=t.h,s=t.s,i=t.l,n=t.a,a=void 0===n?1:n;if(!r(e)||!r(s)||!r(i))return null;var o=f({h:Number(e),s:Number(s),l:Number(i),a:Number(a)});return g(o)},"hsl"],[function(t){var e=t.h,s=t.s,i=t.v,n=t.a,h=void 0===n?1:n;if(!r(e)||!r(s)||!r(i))return null;var l=function(t){return{h:o(t.h),s:a(t.s,0,100),v:a(t.v,0,100),a:a(t.a)}}({h:Number(e),s:Number(s),v:Number(i),a:Number(h)});return p(l)},"hsv"]]},C=function(t,e){for(var s=0;s<e.length;s++){var i=e[s][0](t);if(i)return[i,e[s][1]]}return[null,void 0]},A=function(t,e){var s=x(t);return{h:s.h,s:a(s.s+100*e,0,100),l:s.l,a:s.a}},S=function(t){return(299*t.r+587*t.g+114*t.b)/1e3/255},M=function(t,e){var s=x(t);return{h:s.h,s:s.s,l:a(s.l+100*e,0,100),a:s.a}},T=function(){function t(t){this.parsed=function(t){return"string"==typeof t?C(t.trim(),w.string):"object"==typeof t&&null!==t?C(t,w.object):[null,void 0]}(t)[0],this.rgba=this.parsed||{r:0,g:0,b:0,a:1}}return t.prototype.isValid=function(){return null!==this.parsed},t.prototype.brightness=function(){return n(S(this.rgba),2)},t.prototype.isDark=function(){return S(this.rgba)<.5},t.prototype.isLight=function(){return S(this.rgba)>=.5},t.prototype.toHex=function(){return e=(t=l(this.rgba)).r,s=t.g,i=t.b,a=(r=t.a)<1?c(n(255*r)):"","#"+c(e)+c(s)+c(i)+a;var t,e,s,i,r,a},t.prototype.toRgb=function(){return l(this.rgba)},t.prototype.toRgbString=function(){return e=(t=l(this.rgba)).r,s=t.g,i=t.b,(r=t.a)<1?"rgba("+e+", "+s+", "+i+", "+r+")":"rgb("+e+", "+s+", "+i+")";var t,e,s,i,r},t.prototype.toHsl=function(){return m(x(this.rgba))},t.prototype.toHslString=function(){return e=(t=m(x(this.rgba))).h,s=t.s,i=t.l,(r=t.a)<1?"hsla("+e+", "+s+"%, "+i+"%, "+r+")":"hsl("+e+", "+s+"%, "+i+"%)";var t,e,s,i,r},t.prototype.toHsv=function(){return t=d(this.rgba),{h:n(t.h),s:n(t.s),v:n(t.v),a:n(t.a,3)};var t},t.prototype.invert=function(){return P({r:255-(t=this.rgba).r,g:255-t.g,b:255-t.b,a:t.a});var t},t.prototype.saturate=function(t){return void 0===t&&(t=.1),P(A(this.rgba,t))},t.prototype.desaturate=function(t){return void 0===t&&(t=.1),P(A(this.rgba,-t))},t.prototype.grayscale=function(){return P(A(this.rgba,-1))},t.prototype.lighten=function(t){return void 0===t&&(t=.1),P(M(this.rgba,t))},t.prototype.darken=function(t){return void 0===t&&(t=.1),P(M(this.rgba,-t))},t.prototype.rotate=function(t){return void 0===t&&(t=15),this.hue(this.hue()+t)},t.prototype.alpha=function(t){return"number"==typeof t?P({r:(e=this.rgba).r,g:e.g,b:e.b,a:t}):n(this.rgba.a,3);var e},t.prototype.hue=function(t){var e=x(this.rgba);return"number"==typeof t?P({h:t,s:e.s,l:e.l,a:e.a}):n(e.h)},t.prototype.isEqual=function(t){return this.toHex()===P(t).toHex()},t}(),P=function(t){return t instanceof T?t:new T(t)},k=[];!function(t){t.forEach(function(t){k.indexOf(t)<0&&(t(T,w),k.push(t))})}([function(t,e){var s={white:"#ffffff",bisque:"#ffe4c4",blue:"#0000ff",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",antiquewhite:"#faebd7",aqua:"#00ffff",azure:"#f0ffff",whitesmoke:"#f5f5f5",papayawhip:"#ffefd5",plum:"#dda0dd",blanchedalmond:"#ffebcd",black:"#000000",gold:"#ffd700",goldenrod:"#daa520",gainsboro:"#dcdcdc",cornsilk:"#fff8dc",cornflowerblue:"#6495ed",burlywood:"#deb887",aquamarine:"#7fffd4",beige:"#f5f5dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkkhaki:"#bdb76b",darkgray:"#a9a9a9",darkgreen:"#006400",darkgrey:"#a9a9a9",peachpuff:"#ffdab9",darkmagenta:"#8b008b",darkred:"#8b0000",darkorchid:"#9932cc",darkorange:"#ff8c00",darkslateblue:"#483d8b",gray:"#808080",darkslategray:"#2f4f4f",darkslategrey:"#2f4f4f",deeppink:"#ff1493",deepskyblue:"#00bfff",wheat:"#f5deb3",firebrick:"#b22222",floralwhite:"#fffaf0",ghostwhite:"#f8f8ff",darkviolet:"#9400d3",magenta:"#ff00ff",green:"#008000",dodgerblue:"#1e90ff",grey:"#808080",honeydew:"#f0fff0",hotpink:"#ff69b4",blueviolet:"#8a2be2",forestgreen:"#228b22",lawngreen:"#7cfc00",indianred:"#cd5c5c",indigo:"#4b0082",fuchsia:"#ff00ff",brown:"#a52a2a",maroon:"#800000",mediumblue:"#0000cd",lightcoral:"#f08080",darkturquoise:"#00ced1",lightcyan:"#e0ffff",ivory:"#fffff0",lightyellow:"#ffffe0",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",linen:"#faf0e6",mediumaquamarine:"#66cdaa",lemonchiffon:"#fffacd",lime:"#00ff00",khaki:"#f0e68c",mediumseagreen:"#3cb371",limegreen:"#32cd32",mediumspringgreen:"#00fa9a",lightskyblue:"#87cefa",lightblue:"#add8e6",midnightblue:"#191970",lightpink:"#ffb6c1",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",mintcream:"#f5fffa",lightslategray:"#778899",lightslategrey:"#778899",navajowhite:"#ffdead",navy:"#000080",mediumvioletred:"#c71585",powderblue:"#b0e0e6",palegoldenrod:"#eee8aa",oldlace:"#fdf5e6",paleturquoise:"#afeeee",mediumturquoise:"#48d1cc",mediumorchid:"#ba55d3",rebeccapurple:"#663399",lightsteelblue:"#b0c4de",mediumslateblue:"#7b68ee",thistle:"#d8bfd8",tan:"#d2b48c",orchid:"#da70d6",mediumpurple:"#9370db",purple:"#800080",pink:"#ffc0cb",skyblue:"#87ceeb",springgreen:"#00ff7f",palegreen:"#98fb98",red:"#ff0000",yellow:"#ffff00",slateblue:"#6a5acd",lavenderblush:"#fff0f5",peru:"#cd853f",palevioletred:"#db7093",violet:"#ee82ee",teal:"#008080",slategray:"#708090",slategrey:"#708090",aliceblue:"#f0f8ff",darkseagreen:"#8fbc8f",darkolivegreen:"#556b2f",greenyellow:"#adff2f",seagreen:"#2e8b57",seashell:"#fff5ee",tomato:"#ff6347",silver:"#c0c0c0",sienna:"#a0522d",lavender:"#e6e6fa",lightgreen:"#90ee90",orange:"#ffa500",orangered:"#ff4500",steelblue:"#4682b4",royalblue:"#4169e1",turquoise:"#40e0d0",yellowgreen:"#9acd32",salmon:"#fa8072",saddlebrown:"#8b4513",sandybrown:"#f4a460",rosybrown:"#bc8f8f",darksalmon:"#e9967a",lightgoldenrodyellow:"#fafad2",snow:"#fffafa",lightgrey:"#d3d3d3",lightgray:"#d3d3d3",dimgray:"#696969",dimgrey:"#696969",olivedrab:"#6b8e23",olive:"#808000"},i={};for(var r in s)i[s[r]]=r;var n={};t.prototype.toName=function(e){if(!(this.rgba.a||this.rgba.r||this.rgba.g||this.rgba.b))return"transparent";var r,a,o=i[this.toHex()];if(o)return o;if(null==e?void 0:e.closest){var h=this.toRgb(),l=1/0,u="black";if(!n.length)for(var c in s)n[c]=new t(s[c]).toRgb();for(var d in s){var p=(r=h,a=n[d],Math.pow(r.r-a.r,2)+Math.pow(r.g-a.g,2)+Math.pow(r.b-a.b,2));p<l&&(l=p,u=d)}return u}},e.string.push([function(e){var i=e.toLowerCase(),r="transparent"===i?"#0000":s[i];return r?new t(r).toRgb():null},"name"])}]);const E=class t{constructor(t=16777215){this._value=null,this._components=new Float32Array(4),this._components.fill(1),this._int=16777215,this.value=t}get red(){return this._components[0]}get green(){return this._components[1]}get blue(){return this._components[2]}get alpha(){return this._components[3]}setValue(t){return this.value=t,this}set value(e){if(e instanceof t)this._value=this._cloneSource(e._value),this._int=e._int,this._components.set(e._components);else{if(null===e)throw new Error("Cannot set Color#value to null");null!==this._value&&this._isSourceEqual(this._value,e)||(this._value=this._cloneSource(e),this._normalize(this._value))}}get value(){return this._value}_cloneSource(t){return"string"==typeof t||"number"==typeof t||t instanceof Number||null===t?t:Array.isArray(t)||ArrayBuffer.isView(t)?t.slice(0):"object"==typeof t&&null!==t?{...t}:t}_isSourceEqual(t,e){const s=typeof t;if(s!==typeof e)return!1;if("number"===s||"string"===s||t instanceof Number)return t===e;if(Array.isArray(t)&&Array.isArray(e)||ArrayBuffer.isView(t)&&ArrayBuffer.isView(e))return t.length===e.length&&t.every((t,s)=>t===e[s]);if(null!==t&&null!==e){const s=Object.keys(t),i=Object.keys(e);return s.length===i.length&&s.every(s=>t[s]===e[s])}return t===e}toRgba(){const[t,e,s,i]=this._components;return{r:t,g:e,b:s,a:i}}toRgb(){const[t,e,s]=this._components;return{r:t,g:e,b:s}}toRgbaString(){const[t,e,s]=this.toUint8RgbArray();return`rgba(${t},${e},${s},${this.alpha})`}toUint8RgbArray(t){const[e,s,i]=this._components;return this._arrayRgb||(this._arrayRgb=[]),t||(t=this._arrayRgb),t[0]=Math.round(255*e),t[1]=Math.round(255*s),t[2]=Math.round(255*i),t}toArray(t){this._arrayRgba||(this._arrayRgba=[]),t||(t=this._arrayRgba);const[e,s,i,r]=this._components;return t[0]=e,t[1]=s,t[2]=i,t[3]=r,t}toRgbArray(t){this._arrayRgb||(this._arrayRgb=[]),t||(t=this._arrayRgb);const[e,s,i]=this._components;return t[0]=e,t[1]=s,t[2]=i,t}toNumber(){return this._int}toBgrNumber(){const[t,e,s]=this.toUint8RgbArray();return(s<<16)+(e<<8)+t}toLittleEndianNumber(){const t=this._int;return(t>>16)+(65280&t)+((255&t)<<16)}multiply(e){const[s,i,r,n]=t._temp.setValue(e)._components;return this._components[0]*=s,this._components[1]*=i,this._components[2]*=r,this._components[3]*=n,this._refreshInt(),this._value=null,this}premultiply(t,e=!0){return e&&(this._components[0]*=t,this._components[1]*=t,this._components[2]*=t),this._components[3]=t,this._refreshInt(),this._value=null,this}toPremultiplied(t,e=!0){if(1===t)return(255<<24)+this._int;if(0===t)return e?0:this._int;let s=this._int>>16&255,i=this._int>>8&255,r=255&this._int;return e&&(s=s*t+.5|0,i=i*t+.5|0,r=r*t+.5|0),(255*t<<24)+(s<<16)+(i<<8)+r}toHex(){const t=this._int.toString(16);return`#${"000000".substring(0,6-t.length)+t}`}toHexa(){const t=Math.round(255*this._components[3]).toString(16);return this.toHex()+"00".substring(0,2-t.length)+t}setAlpha(t){return this._components[3]=this._clamp(t),this}_normalize(e){let s,i,r,n;if(("number"==typeof e||e instanceof Number)&&e>=0&&e<=16777215)s=(e>>16&255)/255,i=(e>>8&255)/255,r=(255&e)/255,n=1;else if((Array.isArray(e)||e instanceof Float32Array)&&e.length>=3&&e.length<=4)e=this._clamp(e),[s,i,r,n=1]=e;else if((e instanceof Uint8Array||e instanceof Uint8ClampedArray)&&e.length>=3&&e.length<=4)e=this._clamp(e,0,255),[s,i,r,n=255]=e,s/=255,i/=255,r/=255,n/=255;else if("string"==typeof e||"object"==typeof e){if("string"==typeof e){const s=t.HEX_PATTERN.exec(e);s&&(e=`#${s[2]}`)}const a=P(e);a.isValid()&&(({r:s,g:i,b:r,a:n}=a.rgba),s/=255,i/=255,r/=255)}if(void 0===s)throw new Error(`Unable to convert color ${e}`);this._components[0]=s,this._components[1]=i,this._components[2]=r,this._components[3]=n,this._refreshInt()}_refreshInt(){this._clamp(this._components);const[t,e,s]=this._components;this._int=(255*t<<16)+(255*e<<8)+(255*s|0)}_clamp(t,e=0,s=1){return"number"==typeof t?Math.min(Math.max(t,e),s):(t.forEach((i,r)=>{t[r]=Math.min(Math.max(i,e),s)}),t)}static isColorLike(e){return"number"==typeof e||"string"==typeof e||e instanceof Number||e instanceof t||Array.isArray(e)||e instanceof Uint8Array||e instanceof Uint8ClampedArray||e instanceof Float32Array||void 0!==e.r&&void 0!==e.g&&void 0!==e.b||void 0!==e.r&&void 0!==e.g&&void 0!==e.b&&void 0!==e.a||void 0!==e.h&&void 0!==e.s&&void 0!==e.l||void 0!==e.h&&void 0!==e.s&&void 0!==e.l&&void 0!==e.a||void 0!==e.h&&void 0!==e.s&&void 0!==e.v||void 0!==e.h&&void 0!==e.s&&void 0!==e.v&&void 0!==e.a}};E.shared=new E,E._temp=new E,E.HEX_PATTERN=/^(#|0x)?(([a-f0-9]{3}){1,2}([a-f0-9]{2})?)$/i;let R=E},2698:(t,e,s)=>{"use strict";function i(t){const e={};for(const s in t)void 0!==t[s]&&(e[s]=t[s]);return e}s.d(e,{S:()=>i})},2806:(t,e,s)=>{"use strict";s.d(e,{m:()=>a});var i=s(9313),r=s(133);const n={repeat:{addressModeU:"repeat",addressModeV:"repeat"},"repeat-x":{addressModeU:"repeat",addressModeV:"clamp-to-edge"},"repeat-y":{addressModeU:"clamp-to-edge",addressModeV:"repeat"},"no-repeat":{addressModeU:"clamp-to-edge",addressModeV:"clamp-to-edge"}};class a{constructor(t,e){this.uid=(0,r.L)("fillPattern"),this._tick=0,this.transform=new i.u,this.texture=t,this.transform.scale(1/t.frame.width,1/t.frame.height),e&&(t.source.style.addressModeU=n[e].addressModeU,t.source.style.addressModeV=n[e].addressModeV)}setTransform(t){const e=this.texture;this.transform.copyFrom(t),this.transform.invert(),this.transform.scale(1/e.frame.width,1/e.frame.height),this._tick++}get texture(){return this._texture}set texture(t){this._texture!==t&&(this._texture=t,this._tick++)}get styleKey(){return`fill-pattern-${this.uid}-${this._tick}`}destroy(){this.texture.destroy(!0),this.texture=null}}},2812:(t,e,s)=>{"use strict";s.d(e,{o:()=>i});class i{constructor(t,e,s){this._x=e||0,this._y=s||0,this._observer=t}clone(t){return new i(t??this._observer,this._x,this._y)}set(t=0,e=t){return this._x===t&&this._y===e||(this._x=t,this._y=e,this._observer._onUpdate(this)),this}copyFrom(t){return this._x===t.x&&this._y===t.y||(this._x=t.x,this._y=t.y,this._observer._onUpdate(this)),this}copyTo(t){return t.set(this._x,this._y),t}equals(t){return t.x===this._x&&t.y===this._y}toString(){return`[pixi.js/math:ObservablePoint x=${this._x} y=${this._y} scope=${this._observer}]`}get x(){return this._x}set x(t){this._x!==t&&(this._x=t,this._observer._onUpdate(this))}get y(){return this._y}set y(t){this._y!==t&&(this._y=t,this._observer._onUpdate(this))}}},3012:(t,e,s)=>{"use strict";s.d(e,{B:()=>l});var i=s(7952),r=s(8306);const n={f32:"float32","vec2<f32>":"float32x2","vec3<f32>":"float32x3","vec4<f32>":"float32x4",vec2f:"float32x2",vec3f:"float32x3",vec4f:"float32x4",i32:"sint32","vec2<i32>":"sint32x2","vec3<i32>":"sint32x3","vec4<i32>":"sint32x4",u32:"uint32","vec2<u32>":"uint32x2","vec3<u32>":"uint32x3","vec4<u32>":"uint32x4",bool:"uint32","vec2<bool>":"uint32x2","vec3<bool>":"uint32x3","vec4<bool>":"uint32x4"};function a(t){const e=/@group\((\d+)\)/,s=/@binding\((\d+)\)/,i=/var(<[^>]+>)? (\w+)/,r=/:\s*(\w+)/,n=/(\w+)\s*:\s*([\w\<\>]+)/g,a=/struct\s+(\w+)/,o=t.match(/(^|[^/])@(group|binding)\(\d+\)[^;]+;/g)?.map(t=>({group:parseInt(t.match(e)[1],10),binding:parseInt(t.match(s)[1],10),name:t.match(i)[2],isUniform:"<uniform>"===t.match(i)[1],type:t.match(r)[1]}));if(!o)return{groups:[],structs:[]};const h=t.match(/struct\s+(\w+)\s*{([^}]+)}/g)?.map(t=>{const e=t.match(a)[1],s=t.match(n).reduce((t,e)=>{const[s,i]=e.split(":");return t[s.trim()]=i.trim(),t},{});return s?{name:e,members:s}:null}).filter(({name:t})=>o.some(e=>e.type===t))??[];return{groups:o,structs:h}}var o=(t=>(t[t.VERTEX=1]="VERTEX",t[t.FRAGMENT=2]="FRAGMENT",t[t.COMPUTE=4]="COMPUTE",t))(o||{});const h=Object.create(null);class l{constructor(t){this._layoutKey=0,this._attributeLocationsKey=0;const{fragment:e,vertex:s,layout:i,gpuLayout:r,name:n}=t;if(this.name=n,this.fragment=e,this.vertex=s,e.source===s.source){const t=a(e.source);this.structsAndGroups=t}else{const t=a(s.source),i=a(e.source);this.structsAndGroups=function(t,e){const s=new Set,i=new Set;return{structs:[...t.structs,...e.structs].filter(t=>!s.has(t.name)&&(s.add(t.name),!0)),groups:[...t.groups,...e.groups].filter(t=>{const e=`${t.name}-${t.binding}`;return!i.has(e)&&(i.add(e),!0)})}}(t,i)}this.layout=i??function({groups:t}){const e=[];for(let s=0;s<t.length;s++){const i=t[s];e[i.group]||(e[i.group]={}),e[i.group][i.name]=i.binding}return e}(this.structsAndGroups),this.gpuLayout=r??function({groups:t}){const e=[];for(let s=0;s<t.length;s++){const i=t[s];e[i.group]||(e[i.group]=[]),i.isUniform?e[i.group].push({binding:i.binding,visibility:o.VERTEX|o.FRAGMENT,buffer:{type:"uniform"}}):"sampler"===i.type?e[i.group].push({binding:i.binding,visibility:o.FRAGMENT,sampler:{type:"filtering"}}):"texture_2d"===i.type&&e[i.group].push({binding:i.binding,visibility:o.FRAGMENT,texture:{sampleType:"float",viewDimension:"2d",multisampled:!1}})}return e}(this.structsAndGroups),this.autoAssignGlobalUniforms=!(void 0===this.layout[0]?.globalUniforms),this.autoAssignLocalUniforms=!(void 0===this.layout[1]?.localUniforms),this._generateProgramKey()}_generateProgramKey(){const{vertex:t,fragment:e}=this,s=t.source+e.source+t.entryPoint+e.entryPoint;this._layoutKey=(0,i.X)(s,"program")}get attributeData(){return this._attributeData??(this._attributeData=function({source:t,entryPoint:e}){const s={},i=t.indexOf(`fn ${e}`);if(-1!==i){const e=t.indexOf("->",i);if(-1!==e){const a=t.substring(i,e),o=/@location\((\d+)\)\s+([a-zA-Z0-9_]+)\s*:\s*([a-zA-Z0-9_<>]+)(?:,|\s|$)/g;let h;for(;null!==(h=o.exec(a));){const t=n[h[3]]??"float32";s[h[2]]={location:parseInt(h[1],10),format:t,stride:(0,r.m)(t).stride,offset:0,instance:!1,start:0}}}}return s}(this.vertex)),this._attributeData}destroy(){this.gpuLayout=null,this.layout=null,this.structsAndGroups=null,this.fragment=null,this.vertex=null,h[this._cacheKey]=null}static from(t){const e=`${t.vertex.source}:${t.fragment.source}:${t.fragment.entryPoint}:${t.vertex.entryPoint}`;return h[e]||(h[e]=new l(t),h[e]._cacheKey=e),h[e]}}},3284:(t,e,s)=>{"use strict";s.d(e,{m:()=>a});var i=s(9313),r=s(848),n=s(2437);class a{constructor(){this.renderPipeId="renderGroup",this.root=null,this.canBundle=!1,this.renderGroupParent=null,this.renderGroupChildren=[],this.worldTransform=new i.u,this.worldColorAlpha=4294967295,this.worldColor=16777215,this.worldAlpha=1,this.childrenToUpdate=Object.create(null),this.updateTick=0,this.gcTick=0,this.childrenRenderablesToUpdate={list:[],index:0},this.structureDidChange=!0,this.instructionSet=new r.L,this._onRenderContainers=[],this.textureNeedsUpdate=!0,this.isCachedAsTexture=!1,this._matrixDirty=7}init(t){this.root=t,t._onRender&&this.addOnRender(t),t.didChange=!0;const e=t.children;for(let t=0;t<e.length;t++){const s=e[t];s._updateFlags=15,this.addChild(s)}}enableCacheAsTexture(t={}){this.textureOptions=t,this.isCachedAsTexture=!0,this.textureNeedsUpdate=!0}disableCacheAsTexture(){this.isCachedAsTexture=!1,this.texture&&(n.W.returnTexture(this.texture,!0),this.texture=null)}updateCacheTexture(){this.textureNeedsUpdate=!0;const t=this._parentCacheAsTextureRenderGroup;t&&!t.textureNeedsUpdate&&t.updateCacheTexture()}reset(){this.renderGroupChildren.length=0;for(const t in this.childrenToUpdate){const e=this.childrenToUpdate[t];e.list.fill(null),e.index=0}this.childrenRenderablesToUpdate.index=0,this.childrenRenderablesToUpdate.list.fill(null),this.root=null,this.updateTick=0,this.structureDidChange=!0,this._onRenderContainers.length=0,this.renderGroupParent=null,this.disableCacheAsTexture()}get localTransform(){return this.root.localTransform}addRenderGroupChild(t){t.renderGroupParent&&t.renderGroupParent._removeRenderGroupChild(t),t.renderGroupParent=this,this.renderGroupChildren.push(t)}_removeRenderGroupChild(t){const e=this.renderGroupChildren.indexOf(t);e>-1&&this.renderGroupChildren.splice(e,1),t.renderGroupParent=null}addChild(t){if(this.structureDidChange=!0,t.parentRenderGroup=this,t.updateTick=-1,t.parent===this.root?t.relativeRenderGroupDepth=1:t.relativeRenderGroupDepth=t.parent.relativeRenderGroupDepth+1,t.didChange=!0,this.onChildUpdate(t),t.renderGroup)return void this.addRenderGroupChild(t.renderGroup);t._onRender&&this.addOnRender(t);const e=t.children;for(let t=0;t<e.length;t++)this.addChild(e[t])}removeChild(t){if(this.structureDidChange=!0,t._onRender&&(t.renderGroup||this.removeOnRender(t)),t.parentRenderGroup=null,t.renderGroup)return void this._removeRenderGroupChild(t.renderGroup);const e=t.children;for(let t=0;t<e.length;t++)this.removeChild(e[t])}removeChildren(t){for(let e=0;e<t.length;e++)this.removeChild(t[e])}onChildUpdate(t){let e=this.childrenToUpdate[t.relativeRenderGroupDepth];e||(e=this.childrenToUpdate[t.relativeRenderGroupDepth]={index:0,list:[]}),e.list[e.index++]=t}updateRenderable(t){t.globalDisplayStatus<7||(this.instructionSet.renderPipes[t.renderPipeId].updateRenderable(t),t.didViewUpdate=!1)}onChildViewUpdate(t){this.childrenRenderablesToUpdate.list[this.childrenRenderablesToUpdate.index++]=t}get isRenderable(){return 7===this.root.localDisplayStatus&&this.worldAlpha>0}addOnRender(t){this._onRenderContainers.push(t)}removeOnRender(t){this._onRenderContainers.splice(this._onRenderContainers.indexOf(t),1)}runOnRender(t){for(let e=0;e<this._onRenderContainers.length;e++)this._onRenderContainers[e]._onRender(t)}destroy(){this.disableCacheAsTexture(),this.renderGroupParent=null,this.root=null,this.childrenRenderablesToUpdate=null,this.childrenToUpdate=null,this.renderGroupChildren=null,this._onRenderContainers=null,this.instructionSet=null}getChildren(t=[]){const e=this.root.children;for(let s=0;s<e.length;s++)this._getChildren(e[s],t);return t}_getChildren(t,e=[]){if(e.push(t),t.renderGroup)return e;const s=t.children;for(let t=0;t<s.length;t++)this._getChildren(s[t],e);return e}invalidateMatrices(){this._matrixDirty=7}get inverseWorldTransform(){return 1&this._matrixDirty?(this._matrixDirty&=-2,this._inverseWorldTransform||(this._inverseWorldTransform=new i.u),this._inverseWorldTransform.copyFrom(this.worldTransform).invert()):this._inverseWorldTransform}get textureOffsetInverseTransform(){return 2&this._matrixDirty?(this._matrixDirty&=-3,this._textureOffsetInverseTransform||(this._textureOffsetInverseTransform=new i.u),this._textureOffsetInverseTransform.copyFrom(this.inverseWorldTransform).translate(-this._textureBounds.x,-this._textureBounds.y)):this._textureOffsetInverseTransform}get inverseParentTextureTransform(){if(!(4&this._matrixDirty))return this._inverseParentTextureTransform;this._matrixDirty&=-5;const t=this._parentCacheAsTextureRenderGroup;return t?(this._inverseParentTextureTransform||(this._inverseParentTextureTransform=new i.u),this._inverseParentTextureTransform.copyFrom(this.worldTransform).prepend(t.inverseWorldTransform).translate(-t._textureBounds.x,-t._textureBounds.y)):this.worldTransform}get cacheToLocalTransform(){return this.isCachedAsTexture?this.textureOffsetInverseTransform:this._parentCacheAsTextureRenderGroup?this._parentCacheAsTextureRenderGroup.textureOffsetInverseTransform:null}}},3513:(t,e,s)=>{"use strict";s.d(e,{T:()=>i});class i{constructor(t){this.resources=Object.create(null),this._dirty=!0;let e=0;for(const s in t){const i=t[s];this.setResource(i,e++)}this._updateKey()}_updateKey(){if(!this._dirty)return;this._dirty=!1;const t=[];let e=0;for(const s in this.resources)t[e++]=this.resources[s]._resourceId;this._key=t.join("|")}setResource(t,e){const s=this.resources[e];t!==s&&(s&&t.off?.("change",this.onResourceChange,this),t.on?.("change",this.onResourceChange,this),this.resources[e]=t,this._dirty=!0)}getResource(t){return this.resources[t]}_touch(t){const e=this.resources;for(const s in e)e[s]._touched=t}destroy(){const t=this.resources;for(const e in t){const s=t[e];s?.off?.("change",this.onResourceChange,this)}this.resources=null}onResourceChange(t){if(this._dirty=!0,t.destroyed){const e=this.resources;for(const s in e)e[s]===t&&(e[s]=null)}else this._updateKey()}}},3721:(t,e,s)=>{"use strict";s.d(e,{J:()=>L});var i=s(8507),r=s(133),n=s(1460),a=s(4670),o=s(6083),h=s(6736),l=s(8639),u=s(3804),c=s(6512);let d=null;class p{constructor(){this.ids=Object.create(null),this.textures=[],this.count=0}clear(){for(let t=0;t<this.count;t++){const e=this.textures[t];this.textures[t]=null,this.ids[e.uid]=null}this.count=0}}class f{constructor(){this.renderPipeId="batch",this.action="startBatch",this.start=0,this.size=0,this.textures=new p,this.blendMode="normal",this.topology="triangle-strip",this.canBundle=!0}destroy(){this.textures=null,this.gpuBindGroup=null,this.bindGroup=null,this.batcher=null}}const m=[];let g=0;function x(){return g>0?m[--g]:new f}function y(t){m[g++]=t}o.L.register({clear:()=>{if(m.length>0)for(const t of m)t&&t.destroy();m.length=0,g=0}});let _=0;const b=class t{constructor(e){this.uid=(0,r.L)("batcher"),this.dirty=!0,this.batchIndex=0,this.batches=[],this._elements=[],(e={...t.defaultOptions,...e}).maxTextures||((0,a.t6)("v8.8.0","maxTextures is a required option for Batcher now, please pass it in the options"),e.maxTextures=function(){if(d)return d;const t=(0,u.W)();return d=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS),d=(0,c.u)(d,t),t.getExtension("WEBGL_lose_context")?.loseContext(),d}());const{maxTextures:s,attributesInitialSize:i,indicesInitialSize:o}=e;this.attributeBuffer=new n.u(4*i),this.indexBuffer=new Uint16Array(o),this.maxTextures=s}begin(){this.elementSize=0,this.elementStart=0,this.indexSize=0,this.attributeSize=0;for(let t=0;t<this.batchIndex;t++)y(this.batches[t]);this.batchIndex=0,this._batchIndexStart=0,this._batchIndexSize=0,this.dirty=!0}add(t){this._elements[this.elementSize++]=t,t._indexStart=this.indexSize,t._attributeStart=this.attributeSize,t._batcher=this,this.indexSize+=t.indexSize,this.attributeSize+=t.attributeSize*this.vertexSize}checkAndUpdateTexture(t,e){const s=t._batch.textures.ids[e._source.uid];return!(!s&&0!==s||(t._textureId=s,t.texture=e,0))}updateElement(t){this.dirty=!0;const e=this.attributeBuffer;t.packAsQuad?this.packQuadAttributes(t,e.float32View,e.uint32View,t._attributeStart,t._textureId):this.packAttributes(t,e.float32View,e.uint32View,t._attributeStart,t._textureId)}break(t){const e=this._elements;if(!e[this.elementStart])return;let s=x(),i=s.textures;i.clear();const r=e[this.elementStart];let n=(0,l.i)(r.blendMode,r.texture._source),a=r.topology;4*this.attributeSize>this.attributeBuffer.size&&this._resizeAttributeBuffer(4*this.attributeSize),this.indexSize>this.indexBuffer.length&&this._resizeIndexBuffer(this.indexSize);const o=this.attributeBuffer.float32View,h=this.attributeBuffer.uint32View,u=this.indexBuffer;let c=this._batchIndexSize,d=this._batchIndexStart,p="startBatch";const f=this.maxTextures;for(let r=this.elementStart;r<this.elementSize;++r){const m=e[r];e[r]=null;const g=m.texture._source,y=(0,l.i)(m.blendMode,g),b=n!==y||a!==m.topology;g._batchTick!==_||b?(g._batchTick=_,(i.count>=f||b)&&(this._finishBatch(s,d,c-d,i,n,a,t,p),p="renderBatch",d=c,n=y,a=m.topology,s=x(),i=s.textures,i.clear(),++_),m._textureId=g._textureBindLocation=i.count,i.ids[g.uid]=i.count,i.textures[i.count++]=g,m._batch=s,c+=m.indexSize,m.packAsQuad?(this.packQuadAttributes(m,o,h,m._attributeStart,m._textureId),this.packQuadIndex(u,m._indexStart,m._attributeStart/this.vertexSize)):(this.packAttributes(m,o,h,m._attributeStart,m._textureId),this.packIndex(m,u,m._indexStart,m._attributeStart/this.vertexSize))):(m._textureId=g._textureBindLocation,c+=m.indexSize,m.packAsQuad?(this.packQuadAttributes(m,o,h,m._attributeStart,m._textureId),this.packQuadIndex(u,m._indexStart,m._attributeStart/this.vertexSize)):(this.packAttributes(m,o,h,m._attributeStart,m._textureId),this.packIndex(m,u,m._indexStart,m._attributeStart/this.vertexSize)),m._batch=s)}i.count>0&&(this._finishBatch(s,d,c-d,i,n,a,t,p),d=c,++_),this.elementStart=this.elementSize,this._batchIndexStart=d,this._batchIndexSize=c}_finishBatch(t,e,s,i,r,n,a,o){t.gpuBindGroup=null,t.bindGroup=null,t.action=o,t.batcher=this,t.textures=i,t.blendMode=r,t.topology=n,t.start=e,t.size=s,++_,this.batches[this.batchIndex++]=t,a.add(t)}finish(t){this.break(t)}ensureAttributeBuffer(t){4*t<=this.attributeBuffer.size||this._resizeAttributeBuffer(4*t)}ensureIndexBuffer(t){t<=this.indexBuffer.length||this._resizeIndexBuffer(t)}_resizeAttributeBuffer(t){const e=Math.max(t,2*this.attributeBuffer.size),s=new n.u(e);(0,h.W)(this.attributeBuffer.rawBinaryData,s.rawBinaryData),this.attributeBuffer=s}_resizeIndexBuffer(t){const e=this.indexBuffer;let s=Math.max(t,1.5*e.length);s+=s%2;const i=s>65535?new Uint32Array(s):new Uint16Array(s);if(i.BYTES_PER_ELEMENT!==e.BYTES_PER_ELEMENT)for(let t=0;t<e.length;t++)i[t]=e[t];else(0,h.W)(e.buffer,i.buffer);this.indexBuffer=i}packQuadIndex(t,e,s){t[e]=s+0,t[e+1]=s+1,t[e+2]=s+2,t[e+3]=s+0,t[e+4]=s+2,t[e+5]=s+3}packIndex(t,e,s,i){const r=t.indices,n=t.indexSize,a=t.indexOffset,o=t.attributeOffset;for(let t=0;t<n;t++)e[s++]=i+r[t+a]-o}destroy(){if(null!==this.batches){for(let t=0;t<this.batches.length;t++)y(this.batches[t]);this.batches=null;for(let t=0;t<this._elements.length;t++)this._elements[t]&&(this._elements[t]._batch=null);this._elements=null,this.indexBuffer=null,this.attributeBuffer.destroy(),this.attributeBuffer=null}}};b.defaultOptions={maxTextures:null,attributesInitialSize:4,indicesInitialSize:6};let v=b;var w=s(949),C=s(1132),A=s(6011);const S=new Float32Array(1),M=new Uint32Array(1);class T extends A.V{constructor(){const t=new w.h({data:S,label:"attribute-batch-buffer",usage:C.S.VERTEX|C.S.COPY_DST,shrinkToFit:!1});super({attributes:{aPosition:{buffer:t,format:"float32x2",stride:24,offset:0},aUV:{buffer:t,format:"float32x2",stride:24,offset:8},aColor:{buffer:t,format:"unorm8x4",stride:24,offset:16},aTextureIdAndRound:{buffer:t,format:"uint16x2",stride:24,offset:20}},indexBuffer:new w.h({data:M,label:"index-batch-buffer",usage:C.S.INDEX|C.S.COPY_DST,shrinkToFit:!1})})}}var P=s(5611),k=s(4459),E=s(4e3),R=s(6665),I=s(6040),B=s(8475);class G extends B.M{constructor(t){super({glProgram:(0,P.I)({name:"batch",bits:[k.a,(0,E.P)(t),R.m]}),gpuProgram:(0,P.v)({name:"batch",bits:[k.F,(0,E._)(t),R.b]}),resources:{batchSamplers:(0,I.n)(t)}})}}let F=null;const O=class t extends v{constructor(e){super(e),this.geometry=new T,this.name=t.extension.name,this.vertexSize=6,F??(F=new G(e.maxTextures)),this.shader=F}packAttributes(t,e,s,i,r){const n=r<<16|65535&t.roundPixels,a=t.transform,o=a.a,h=a.b,l=a.c,u=a.d,c=a.tx,d=a.ty,{positions:p,uvs:f}=t,m=t.color,g=t.attributeOffset,x=g+t.attributeSize;for(let t=g;t<x;t++){const r=2*t,a=p[r],g=p[r+1];e[i++]=o*a+l*g+c,e[i++]=u*g+h*a+d,e[i++]=f[r],e[i++]=f[r+1],s[i++]=m,s[i++]=n}}packQuadAttributes(t,e,s,i,r){const n=t.texture,a=t.transform,o=a.a,h=a.b,l=a.c,u=a.d,c=a.tx,d=a.ty,p=t.bounds,f=p.maxX,m=p.minX,g=p.maxY,x=p.minY,y=n.uvs,_=t.color,b=r<<16|65535&t.roundPixels;e[i+0]=o*m+l*x+c,e[i+1]=u*x+h*m+d,e[i+2]=y.x0,e[i+3]=y.y0,s[i+4]=_,s[i+5]=b,e[i+6]=o*f+l*x+c,e[i+7]=u*x+h*f+d,e[i+8]=y.x1,e[i+9]=y.y1,s[i+10]=_,s[i+11]=b,e[i+12]=o*f+l*g+c,e[i+13]=u*g+h*f+d,e[i+14]=y.x2,e[i+15]=y.y2,s[i+16]=_,s[i+17]=b,e[i+18]=o*m+l*g+c,e[i+19]=u*g+h*m+d,e[i+20]=y.x3,e[i+21]=y.y3,s[i+22]=_,s[i+23]=b}};O.extension={type:[i.Ag.Batcher],name:"default"};let L=O},3804:(t,e,s)=>{"use strict";s.d(e,{W:()=>n});var i=s(1761);let r;function n(){if(!r||r?.isContextLost()){const t=i.e.get().createCanvas();r=t.getContext("webgl",{})}return r}},4e3:(t,e,s)=>{"use strict";s.d(e,{P:()=>l,_:()=>a});const i={};function r(t){const e=[];if(1===t)e.push("@group(1) @binding(0) var textureSource1: texture_2d<f32>;"),e.push("@group(1) @binding(1) var textureSampler1: sampler;");else{let s=0;for(let i=0;i<t;i++)e.push(`@group(1) @binding(${s++}) var textureSource${i+1}: texture_2d<f32>;`),e.push(`@group(1) @binding(${s++}) var textureSampler${i+1}: sampler;`)}return e.join("\n")}function n(t){const e=[];if(1===t)e.push("outColor = textureSampleGrad(textureSource1, textureSampler1, vUV, uvDx, uvDy);");else{e.push("switch vTextureId {");for(let s=0;s<t;s++)s===t-1?e.push("  default:{"):e.push(`  case ${s}:{`),e.push(`      outColor = textureSampleGrad(textureSource${s+1}, textureSampler${s+1}, vUV, uvDx, uvDy);`),e.push("      break;}");e.push("}")}return e.join("\n")}function a(t){return i[t]||(i[t]={name:"texture-batch-bit",vertex:{header:"\n                @in aTextureIdAndRound: vec2<u32>;\n                @out @interpolate(flat) vTextureId : u32;\n            ",main:"\n                vTextureId = aTextureIdAndRound.y;\n            ",end:"\n                if(aTextureIdAndRound.x == 1)\n                {\n                    vPosition = vec4<f32>(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n                }\n            "},fragment:{header:`\n                @in @interpolate(flat) vTextureId: u32;\n\n                ${r(t)}\n            `,main:`\n                var uvDx = dpdx(vUV);\n                var uvDy = dpdy(vUV);\n\n                ${n(t)}\n            `}}),i[t]}const o={};function h(t){const e=[];for(let s=0;s<t;s++)s>0&&e.push("else"),s<t-1&&e.push(`if(vTextureId < ${s}.5)`),e.push("{"),e.push(`\toutColor = texture(uTextures[${s}], vUV);`),e.push("}");return e.join("\n")}function l(t){return o[t]||(o[t]={name:"texture-batch-bit",vertex:{header:"\n                in vec2 aTextureIdAndRound;\n                out float vTextureId;\n\n            ",main:"\n                vTextureId = aTextureIdAndRound.y;\n            ",end:"\n                if(aTextureIdAndRound.x == 1.)\n                {\n                    gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n                }\n            "},fragment:{header:`\n                in float vTextureId;\n\n                uniform sampler2D uTextures[${t}];\n\n            `,main:`\n\n                ${h(t)}\n            `}}),o[t]}},4195:(t,e,s)=>{"use strict";s.d(e,{P:()=>n});var i=s(8507),r=s(583);class n extends r.v{constructor(t){const e=t.resource||new Float32Array(t.width*t.height*4);let s=t.format;s||(s=e instanceof Float32Array?"rgba32float":e instanceof Int32Array||e instanceof Uint32Array?"rgba32uint":e instanceof Int16Array||e instanceof Uint16Array?"rgba16uint":(Int8Array,"bgra8unorm")),super({...t,resource:e,format:s}),this.uploadMethodId="buffer"}static test(t){return t instanceof Int8Array||t instanceof Uint8Array||t instanceof Uint8ClampedArray||t instanceof Int16Array||t instanceof Uint16Array||t instanceof Int32Array||t instanceof Uint32Array||t instanceof Float32Array}}n.extension=i.Ag.TextureSource},4458:(t,e,s)=>{"use strict";s.d(e,{d:()=>i});var i=(t=>(t[t.INTERACTION=50]="INTERACTION",t[t.HIGH=25]="HIGH",t[t.NORMAL=0]="NORMAL",t[t.LOW=-25]="LOW",t[t.UTILITY=-50]="UTILITY",t))(i||{})},4459:(t,e,s)=>{"use strict";s.d(e,{F:()=>i,a:()=>r});const i={name:"color-bit",vertex:{header:"\n            @in aColor: vec4<f32>;\n        ",main:"\n            vColor *= vec4<f32>(aColor.rgb * aColor.a, aColor.a);\n        "}},r={name:"color-bit",vertex:{header:"\n            in vec4 aColor;\n        ",main:"\n            vColor *= vec4(aColor.rgb * aColor.a, aColor.a);\n        "}}},4486:(t,e,s)=>{"use strict";s.d(e,{A:()=>i});const i=s(228)},4492:(t,e,s)=>{"use strict";s.d(e,{g:()=>b});var i=s(4486),r=s(9313);const n=[1,1,0,-1,-1,-1,0,1,1,1,0,-1,-1,-1,0,1],a=[0,1,1,1,0,-1,-1,-1,0,1,1,1,0,-1,-1,-1],o=[0,-1,-1,-1,0,1,1,1,0,1,1,1,0,-1,-1,-1],h=[1,1,0,-1,-1,-1,0,1,-1,-1,0,1,1,1,0,-1],l=[],u=[],c=Math.sign;!function(){for(let t=0;t<16;t++){const e=[];l.push(e);for(let s=0;s<16;s++){const i=c(n[t]*n[s]+o[t]*a[s]),r=c(a[t]*n[s]+h[t]*a[s]),l=c(n[t]*o[s]+o[t]*h[s]),u=c(a[t]*o[s]+h[t]*h[s]);for(let t=0;t<16;t++)if(n[t]===i&&a[t]===r&&o[t]===l&&h[t]===u){e.push(t);break}}}for(let t=0;t<16;t++){const e=new r.u;e.set(n[t],a[t],o[t],h[t],0,0),u.push(e)}}();const d={E:0,SE:1,S:2,SW:3,W:4,NW:5,N:6,NE:7,MIRROR_VERTICAL:8,MAIN_DIAGONAL:10,MIRROR_HORIZONTAL:12,REVERSE_DIAGONAL:14,uX:t=>n[t],uY:t=>a[t],vX:t=>o[t],vY:t=>h[t],inv:t=>8&t?15&t:7&-t,add:(t,e)=>l[t][e],sub:(t,e)=>l[t][d.inv(e)],rotate180:t=>4^t,isVertical:t=>2==(3&t),byDirection:(t,e)=>2*Math.abs(t)<=Math.abs(e)?e>=0?d.S:d.N:2*Math.abs(e)<=Math.abs(t)?t>0?d.E:d.W:e>0?t>0?d.SE:d.SW:t>0?d.NE:d.NW,matrixAppendRotationInv:(t,e,s=0,i=0)=>{const r=u[d.inv(e)];r.tx=s,r.ty=i,t.append(r)},transformRectCoords:(t,e,s,i)=>{const{x:r,y:n,width:a,height:o}=t,{x:h,y:l,width:u,height:c}=e;return s===d.E?(i.set(r+h,n+l,a,o),i):s===d.S?i.set(u-n-o+h,r+l,o,a):s===d.W?i.set(u-r-a+h,c-n-o+l,a,o):s===d.N?i.set(n+h,c-r-a+l,o,a):i.set(r+h,n+l,a,o)}};var p=s(9252),f=s(133),m=s(4670);const g=()=>{};var x=s(4195),y=s(583),_=s(1196);class b extends i.A{constructor({source:t,label:e,frame:s,orig:i,trim:r,defaultAnchor:n,defaultBorders:a,rotate:o,dynamic:h}={}){if(super(),this.uid=(0,f.L)("texture"),this.uvs={x0:0,y0:0,x1:0,y1:0,x2:0,y2:0,x3:0,y3:0},this.frame=new p.M,this.noFrame=!1,this.dynamic=!1,this.isTexture=!0,this.label=e,this.source=t?.source??new y.v,this.noFrame=!s,s)this.frame.copyFrom(s);else{const{width:t,height:e}=this._source;this.frame.width=t,this.frame.height=e}this.orig=i||this.frame,this.trim=r,this.rotate=o??0,this.defaultAnchor=n,this.defaultBorders=a,this.destroyed=!1,this.dynamic=h||!1,this.updateUvs()}set source(t){this._source&&this._source.off("resize",this.update,this),this._source=t,t.on("resize",this.update,this),this.emit("update",this)}get source(){return this._source}get textureMatrix(){return this._textureMatrix||(this._textureMatrix=new _.N(this)),this._textureMatrix}get width(){return this.orig.width}get height(){return this.orig.height}updateUvs(){const{uvs:t,frame:e}=this,{width:s,height:i}=this._source,r=e.x/s,n=e.y/i,a=e.width/s,o=e.height/i;let h=this.rotate;if(h){const e=a/2,s=o/2,i=r+e,l=n+s;h=d.add(h,d.NW),t.x0=i+e*d.uX(h),t.y0=l+s*d.uY(h),h=d.add(h,2),t.x1=i+e*d.uX(h),t.y1=l+s*d.uY(h),h=d.add(h,2),t.x2=i+e*d.uX(h),t.y2=l+s*d.uY(h),h=d.add(h,2),t.x3=i+e*d.uX(h),t.y3=l+s*d.uY(h)}else t.x0=r,t.y0=n,t.x1=r+a,t.y1=n,t.x2=r+a,t.y2=n+o,t.x3=r,t.y3=n+o}destroy(t=!1){this._source&&t&&(this._source.destroy(),this._source=null),this._textureMatrix=null,this.destroyed=!0,this.emit("destroy",this),this.removeAllListeners()}update(){this.noFrame&&(this.frame.width=this._source.width,this.frame.height=this._source.height),this.updateUvs(),this.emit("update",this)}get baseTexture(){return(0,m.t6)(m.lj,"Texture.baseTexture is now Texture.source"),this._source}}b.EMPTY=new b({label:"EMPTY",source:new y.v({label:"EMPTY"})}),b.EMPTY.destroy=g,b.WHITE=new b({source:new x.P({resource:new Uint8Array([255,255,255,255]),width:1,height:1,alphaMode:"premultiply-alpha-on-upload",label:"WHITE"}),label:"WHITE"}),b.WHITE.destroy=g},4577:(t,e,s)=>{"use strict";let i;function r(){if("boolean"==typeof i)return i;try{const t=new Function("param1","param2","param3","return param1[param2] === param3;");i=!0===t({a:"b"},"a","b")}catch(t){i=!1}return i}s.d(e,{f:()=>r})},4670:(t,e,s)=>{"use strict";s.d(e,{Ek:()=>n,lj:()=>r,t6:()=>o});const i=new Set,r="8.0.0",n="8.3.4",a={quiet:!1,noColor:!1},o=(t,e,s=3)=>{if(a.quiet||i.has(e))return;let r=(new Error).stack;const n=`${e}\nDeprecated since v${t}`,o="function"==typeof console.groupCollapsed&&!a.noColor;void 0===r?console.warn("PixiJS Deprecation Warning: ",n):(r=r.split("\n").splice(s).join("\n"),o?(console.groupCollapsed("%cPixiJS Deprecation Warning: %c%s","color:#614108;background:#fffbe6","font-weight:normal;color:#614108;background:#fffbe6",n),console.warn(r),console.groupEnd()):(console.warn("PixiJS Deprecation Warning: ",n),console.warn(r))),i.add(e)};Object.defineProperties(o,{quiet:{get:()=>a.quiet,set:t=>{a.quiet=t},enumerable:!0,configurable:!1},noColor:{get:()=>a.noColor,set:t=>{a.noColor=t},enumerable:!0,configurable:!1}})},4676:(t,e,s)=>{"use strict";function i(t,e){return 16777215!==t&&e?16777215!==e&&t?((t>>16&255)*(e>>16&255)/255<<16)+((t>>8&255)*(e>>8&255)/255<<8)+((255&t)*(255&e)/255|0):t:e}s.d(e,{u:()=>i})},4884:(t,e,s)=>{"use strict";s.d(e,{q:()=>a});var i=s(1761),r=s(8507),n=s(583);class a extends n.v{constructor(t){t.resource||(t.resource=i.e.get().createCanvas()),t.width||(t.width=t.resource.width,t.autoDensity||(t.width/=t.resolution)),t.height||(t.height=t.resource.height,t.autoDensity||(t.height/=t.resolution)),super(t),this.uploadMethodId="image",this.autoDensity=t.autoDensity,this.resizeCanvas(),this.transparent=!!t.transparent}resizeCanvas(){this.autoDensity&&"style"in this.resource&&(this.resource.style.width=`${this.width}px`,this.resource.style.height=`${this.height}px`),this.resource.width===this.pixelWidth&&this.resource.height===this.pixelHeight||(this.resource.width=this.pixelWidth,this.resource.height=this.pixelHeight)}resize(t=this.width,e=this.height,s=this._resolution){const i=super.resize(t,e,s);return i&&this.resizeCanvas(),i}static test(t){return globalThis.HTMLCanvasElement&&t instanceof HTMLCanvasElement||globalThis.OffscreenCanvas&&t instanceof OffscreenCanvas}get context2D(){return this._context2D||(this._context2D=this.resource.getContext("2d"))}}a.extension=r.Ag.TextureSource},4985:(t,e,s)=>{"use strict";s.d(e,{l:()=>n});var i=s(9636),r=s(7457);class n extends r.mc{constructor(t){super(t),this.canBundle=!0,this.allowChildren=!1,this._roundPixels=0,this._lastUsed=-1,this._gpuData=Object.create(null),this._bounds=new i.c(0,1,0,0),this._boundsDirty=!0}get bounds(){return this._boundsDirty?(this.updateBounds(),this._boundsDirty=!1,this._bounds):this._bounds}get roundPixels(){return!!this._roundPixels}set roundPixels(t){this._roundPixels=t?1:0}containsPoint(t){const e=this.bounds,{x:s,y:i}=t;return s>=e.minX&&s<=e.maxX&&i>=e.minY&&i<=e.maxY}onViewUpdate(){if(this._didViewChangeTick++,this._boundsDirty=!0,this.didViewUpdate)return;this.didViewUpdate=!0;const t=this.renderGroup||this.parentRenderGroup;t&&t.onChildViewUpdate(this)}destroy(t){super.destroy(t),this._bounds=null;for(const t in this._gpuData)this._gpuData[t].destroy?.();this._gpuData=null}collectRenderablesSimple(t,e,s){const{renderPipes:i}=e;i.blendMode.pushBlendMode(this,this.groupBlendMode,t),i[this.renderPipeId].addRenderable(this,t),this.didViewUpdate=!1;const r=this.children,n=r.length;for(let i=0;i<n;i++)r[i].collectRenderables(t,e,s);i.blendMode.popBlendMode(t)}}},5099:(t,e,s)=>{"use strict";s.d(e,{W:()=>i});var i=(t=>(t[t.WEBGL=1]="WEBGL",t[t.WEBGPU=2]="WEBGPU",t[t.BOTH=3]="BOTH",t))(i||{})},5101:(t,e,s)=>{"use strict";s.d(e,{b:()=>i});class i{constructor(t=0,e=0){this.x=0,this.y=0,this.x=t,this.y=e}clone(){return new i(this.x,this.y)}copyFrom(t){return this.set(t.x,t.y),this}copyTo(t){return t.set(this.x,this.y),t}equals(t){return t.x===this.x&&t.y===this.y}set(t=0,e=t){return this.x=t,this.y=e,this}toString(){return`[pixi.js/math:Point x=${this.x} y=${this.y}]`}static get shared(){return r.x=0,r.y=0,r}}const r=new i},5611:(t,e,s)=>{"use strict";s.d(e,{I:()=>M,v:()=>S});var i=s(9113),r=s(3012),n=s(268);function a(t,e,s){if(t)for(const i in t){const r=e[i.toLocaleLowerCase()];if(r){let e=t[i];"header"===i&&(e=e.replace(/@in\s+[^;]+;\s*/g,"").replace(/@out\s+[^;]+;\s*/g,"")),s&&r.push(`//----${s}----//`),r.push(e)}else(0,n.R)(`${i} placement hook does not exist in shader`)}}const o=/\{\{(.*?)\}\}/g;function h(t){const e={};return(t.match(o)?.map(t=>t.replace(/[{()}]/g,""))??[]).forEach(t=>{e[t]=[]}),e}function l(t,e){let s;const i=/@in\s+([^;]+);/g;for(;null!==(s=i.exec(t));)e.push(s[1])}function u(t,e,s=!1){const i=[];l(e,i),t.forEach(t=>{t.header&&l(t.header,i)});const r=i;s&&r.sort();const n=r.map((t,e)=>`       @location(${e}) ${t},`).join("\n");let a=e.replace(/@in\s+[^;]+;\s*/g,"");return a=a.replace("{{in}}",`\n${n}\n`),a}function c(t,e){let s;const i=/@out\s+([^;]+);/g;for(;null!==(s=i.exec(t));)e.push(s[1])}function d(t,e){let s=t;for(const t in e){const i=e[t];s=i.join("\n").length?s.replace(`{{${t}}}`,`//-----${t} START-----//\n${i.join("\n")}\n//----${t} FINISH----//`):s.replace(`{{${t}}}`,"")}return s}const p=Object.create(null),f=new Map;let m=0;function g({template:t,bits:e}){const s=x(t,e);return p[s]||(p[s]=y(t.vertex,t.fragment,e)),p[s]}function x(t,e){return e.map(t=>(f.has(t)||f.set(t,m++),f.get(t))).sort((t,e)=>t-e).join("-")+t.vertex+t.fragment}function y(t,e,s){const i=h(t),r=h(e);return s.forEach(t=>{a(t.vertex,i,t.name),a(t.fragment,r,t.name)}),{vertex:d(t,i),fragment:d(e,r)}}const _="\n    @in aPosition: vec2<f32>;\n    @in aUV: vec2<f32>;\n\n    @out @builtin(position) vPosition: vec4<f32>;\n    @out vUV : vec2<f32>;\n    @out vColor : vec4<f32>;\n\n    {{header}}\n\n    struct VSOutput {\n        {{struct}}\n    };\n\n    @vertex\n    fn main( {{in}} ) -> VSOutput {\n\n        var worldTransformMatrix = globalUniforms.uWorldTransformMatrix;\n        var modelMatrix = mat3x3<f32>(\n            1.0, 0.0, 0.0,\n            0.0, 1.0, 0.0,\n            0.0, 0.0, 1.0\n          );\n        var position = aPosition;\n        var uv = aUV;\n\n        {{start}}\n\n        vColor = vec4<f32>(1., 1., 1., 1.);\n\n        {{main}}\n\n        vUV = uv;\n\n        var modelViewProjectionMatrix = globalUniforms.uProjectionMatrix * worldTransformMatrix * modelMatrix;\n\n        vPosition =  vec4<f32>((modelViewProjectionMatrix *  vec3<f32>(position, 1.0)).xy, 0.0, 1.0);\n\n        vColor *= globalUniforms.uWorldColorAlpha;\n\n        {{end}}\n\n        {{return}}\n    };\n",b="\n    @in vUV : vec2<f32>;\n    @in vColor : vec4<f32>;\n\n    {{header}}\n\n    @fragment\n    fn main(\n        {{in}}\n      ) -> @location(0) vec4<f32> {\n\n        {{start}}\n\n        var outColor:vec4<f32>;\n\n        {{main}}\n\n        var finalColor:vec4<f32> = outColor * vColor;\n\n        {{end}}\n\n        return finalColor;\n      };\n",v="\n    in vec2 aPosition;\n    in vec2 aUV;\n\n    out vec4 vColor;\n    out vec2 vUV;\n\n    {{header}}\n\n    void main(void){\n\n        mat3 worldTransformMatrix = uWorldTransformMatrix;\n        mat3 modelMatrix = mat3(\n            1.0, 0.0, 0.0,\n            0.0, 1.0, 0.0,\n            0.0, 0.0, 1.0\n          );\n        vec2 position = aPosition;\n        vec2 uv = aUV;\n\n        {{start}}\n\n        vColor = vec4(1.);\n\n        {{main}}\n\n        vUV = uv;\n\n        mat3 modelViewProjectionMatrix = uProjectionMatrix * worldTransformMatrix * modelMatrix;\n\n        gl_Position = vec4((modelViewProjectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\n\n        vColor *= uWorldColorAlpha;\n\n        {{end}}\n    }\n",w="\n\n    in vec4 vColor;\n    in vec2 vUV;\n\n    out vec4 finalColor;\n\n    {{header}}\n\n    void main(void) {\n\n        {{start}}\n\n        vec4 outColor;\n\n        {{main}}\n\n        finalColor = outColor * vColor;\n\n        {{end}}\n    }\n",C={name:"global-uniforms-bit",vertex:{header:"\n        struct GlobalUniforms {\n            uProjectionMatrix:mat3x3<f32>,\n            uWorldTransformMatrix:mat3x3<f32>,\n            uWorldColorAlpha: vec4<f32>,\n            uResolution: vec2<f32>,\n        }\n\n        @group(0) @binding(0) var<uniform> globalUniforms : GlobalUniforms;\n        "}},A={name:"global-uniforms-bit",vertex:{header:"\n          uniform mat3 uProjectionMatrix;\n          uniform mat3 uWorldTransformMatrix;\n          uniform vec4 uWorldColorAlpha;\n          uniform vec2 uResolution;\n        "}};function S({bits:t,name:e}){const s=function({template:t,bits:e}){const s=x(t,e);if(p[s])return p[s];const{vertex:i,fragment:r}=function(t,e){const s=e.map(t=>t.vertex).filter(t=>!!t),i=e.map(t=>t.fragment).filter(t=>!!t);let r=u(s,t.vertex,!0);return r=function(t,e){const s=[];c(e,s),t.forEach(t=>{t.header&&c(t.header,s)});let i=0;const r=s.sort().map(t=>t.indexOf("builtin")>-1?t:`@location(${i++}) ${t}`).join(",\n"),n=s.sort().map(t=>{return`       var ${e=t,e.replace(/@.*?\s+/g,"")};`;var e}).join("\n"),a=`return VSOutput(\n            ${s.sort().map(t=>` ${function(t){const e=/\b(\w+)\s*:/g.exec(t);return e?e[1]:""}(t)}`).join(",\n")});`;let o=e.replace(/@out\s+[^;]+;\s*/g,"");return o=o.replace("{{struct}}",`\n${r}\n`),o=o.replace("{{start}}",`\n${n}\n`),o=o.replace("{{return}}",`\n${a}\n`),o}(s,r),{vertex:r,fragment:u(i,t.fragment,!0)}}(t,e);return p[s]=y(i,r,e),p[s]}({template:{fragment:b,vertex:_},bits:[C,...t]});return r.B.from({name:e,vertex:{source:s.vertex,entryPoint:"main"},fragment:{source:s.fragment,entryPoint:"main"}})}function M({bits:t,name:e}){return new i.M({name:e,...g({template:{vertex:v,fragment:w},bits:[A,...t]})})}},5753:(t,e,s)=>{"use strict";var i=s(8507),r=s(6844),n=s(9636),a=s(9443);const o=new n.c;function h(t,e,s){const i=o;t.measurable=!0,(0,a.f)(t,s,i),e.addBoundsMask(i),t.measurable=!1}var l=s(7269),u=s(2208),c=s(268);function d(t,e,s){const i=u.o.get();t.measurable=!0;const r=u.u.get().identity(),n=p(t,s,r);(0,l.n)(t,i,n),t.measurable=!1,e.addBoundsMask(i),u.u.return(r),u.o.return(i)}function p(t,e,s){return t?(t!==e&&(p(t.parent,e,s),t.updateLocalTransform(),s.append(t.localTransform)),s):((0,c.R)("Mask bounds, renderable is not inside the root container"),s)}class f{constructor(t){this.priority=0,this.inverse=!1,this.pipe="alphaMask",t?.mask&&this.init(t.mask)}init(t){this.mask=t,this.renderMaskToTexture=!(t instanceof r.k),this.mask.renderable=this.renderMaskToTexture,this.mask.includeInBuild=!this.renderMaskToTexture,this.mask.measurable=!1}reset(){this.mask.measurable=!0,this.mask=null}addBounds(t,e){this.inverse||h(this.mask,t,e)}addLocalBounds(t,e){d(this.mask,t,e)}containsPoint(t,e){return e(this.mask,t)}destroy(){this.reset()}static test(t){return t instanceof r.k}}f.extension=i.Ag.MaskEffect;class m{constructor(t){this.priority=0,this.pipe="colorMask",t?.mask&&this.init(t.mask)}init(t){this.mask=t}destroy(){}static test(t){return"number"==typeof t}}m.extension=i.Ag.MaskEffect;var g=s(7457);class x{constructor(t){this.priority=0,this.pipe="stencilMask",t?.mask&&this.init(t.mask)}init(t){this.mask=t,this.mask.includeInBuild=!1,this.mask.measurable=!1}reset(){this.mask.measurable=!0,this.mask.includeInBuild=!0,this.mask=null}addBounds(t,e){h(this.mask,t,e)}addLocalBounds(t,e){d(this.mask,t,e)}containsPoint(t,e){return e(this.mask,t)}destroy(){this.reset()}static test(t){return t instanceof g.mc}}x.extension=i.Ag.MaskEffect;var y=s(4195),_=s(4884),b=s(8293),v=s(7309),w=s(1761);let C;var A=s(583);const S=class t extends A.v{constructor(e){super(e),this.isReady=!1,this.uploadMethodId="video",e={...t.defaultOptions,...e},this._autoUpdate=!0,this._isConnectedToTicker=!1,this._updateFPS=e.updateFPS||0,this._msToNextUpdate=0,this.autoPlay=!1!==e.autoPlay,this.alphaMode=e.alphaMode??"premultiply-alpha-on-upload",this._videoFrameRequestCallback=this._videoFrameRequestCallback.bind(this),this._videoFrameRequestCallbackHandle=null,this._load=null,this._resolve=null,this._reject=null,this._onCanPlay=this._onCanPlay.bind(this),this._onCanPlayThrough=this._onCanPlayThrough.bind(this),this._onError=this._onError.bind(this),this._onPlayStart=this._onPlayStart.bind(this),this._onPlayStop=this._onPlayStop.bind(this),this._onSeeked=this._onSeeked.bind(this),!1!==e.autoLoad&&this.load()}updateFrame(){if(!this.destroyed){if(this._updateFPS){const t=v.R.shared.elapsedMS*this.resource.playbackRate;this._msToNextUpdate=Math.floor(this._msToNextUpdate-t)}(!this._updateFPS||this._msToNextUpdate<=0)&&(this._msToNextUpdate=this._updateFPS?Math.floor(1e3/this._updateFPS):0),this.isValid&&this.update()}}_videoFrameRequestCallback(){this.updateFrame(),this.destroyed?this._videoFrameRequestCallbackHandle=null:this._videoFrameRequestCallbackHandle=this.resource.requestVideoFrameCallback(this._videoFrameRequestCallback)}get isValid(){return!!this.resource.videoWidth&&!!this.resource.videoHeight}async load(){if(this._load)return this._load;const t=this.resource,e=this.options;return(t.readyState===t.HAVE_ENOUGH_DATA||t.readyState===t.HAVE_FUTURE_DATA)&&t.width&&t.height&&(t.complete=!0),t.addEventListener("play",this._onPlayStart),t.addEventListener("pause",this._onPlayStop),t.addEventListener("seeked",this._onSeeked),this._isSourceReady()?this._mediaReady():(e.preload||t.addEventListener("canplay",this._onCanPlay),t.addEventListener("canplaythrough",this._onCanPlayThrough),t.addEventListener("error",this._onError,!0)),this.alphaMode=await async function(){return C??(C=(async()=>{const t=w.e.get().createCanvas(1,1).getContext("webgl");if(!t)return"premultiply-alpha-on-upload";const e=await new Promise(t=>{const e=document.createElement("video");e.onloadeddata=()=>t(e),e.onerror=()=>t(null),e.autoplay=!1,e.crossOrigin="anonymous",e.preload="auto",e.src="data:video/webm;base64,GkXfo59ChoEBQveBAULygQRC84EIQoKEd2VibUKHgQJChYECGFOAZwEAAAAAAAHTEU2bdLpNu4tTq4QVSalmU6yBoU27i1OrhBZUrmtTrIHGTbuMU6uEElTDZ1OsggEXTbuMU6uEHFO7a1OsggG97AEAAAAAAABZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVSalmoCrXsYMPQkBNgIRMYXZmV0GETGF2ZkSJiEBEAAAAAAAAFlSua8yuAQAAAAAAAEPXgQFzxYgAAAAAAAAAAZyBACK1nIN1bmSIgQCGhVZfVlA5g4EBI+ODhAJiWgDglLCBArqBApqBAlPAgQFVsIRVuYEBElTDZ9Vzc9JjwItjxYgAAAAAAAAAAWfInEWjh0VOQ09ERVJEh49MYXZjIGxpYnZweC12cDlnyKJFo4hEVVJBVElPTkSHlDAwOjAwOjAwLjA0MDAwMDAwMAAAH0O2dcfngQCgwqGggQAAAIJJg0IAABAAFgA4JBwYSgAAICAAEb///4r+AAB1oZ2mm+6BAaWWgkmDQgAAEAAWADgkHBhKAAAgIABIQBxTu2uRu4+zgQC3iveBAfGCAXHwgQM=",e.load()});if(!e)return"premultiply-alpha-on-upload";const s=t.createTexture();t.bindTexture(t.TEXTURE_2D,s);const i=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,i),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,s,0),t.pixelStorei(t.UNPACK_PREMULTIPLY_ALPHA_WEBGL,!1),t.pixelStorei(t.UNPACK_COLORSPACE_CONVERSION_WEBGL,t.NONE),t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,e);const r=new Uint8Array(4);return t.readPixels(0,0,1,1,t.RGBA,t.UNSIGNED_BYTE,r),t.deleteFramebuffer(i),t.deleteTexture(s),t.getExtension("WEBGL_lose_context")?.loseContext(),r[0]<=r[3]?"premultiplied-alpha":"premultiply-alpha-on-upload"})()),C}(),this._load=new Promise((s,i)=>{this.isValid?s(this):(this._resolve=s,this._reject=i,void 0!==e.preloadTimeoutMs&&(this._preloadTimeout=setTimeout(()=>{this._onError(new ErrorEvent(`Preload exceeded timeout of ${e.preloadTimeoutMs}ms`))})),t.load())}),this._load}_onError(t){this.resource.removeEventListener("error",this._onError,!0),this.emit("error",t),this._reject&&(this._reject(t),this._reject=null,this._resolve=null)}_isSourcePlaying(){const t=this.resource;return!t.paused&&!t.ended}_isSourceReady(){return this.resource.readyState>2}_onPlayStart(){this.isValid||this._mediaReady(),this._configureAutoUpdate()}_onPlayStop(){this._configureAutoUpdate()}_onSeeked(){this._autoUpdate&&!this._isSourcePlaying()&&(this._msToNextUpdate=0,this.updateFrame(),this._msToNextUpdate=0)}_onCanPlay(){this.resource.removeEventListener("canplay",this._onCanPlay),this._mediaReady()}_onCanPlayThrough(){this.resource.removeEventListener("canplaythrough",this._onCanPlay),this._preloadTimeout&&(clearTimeout(this._preloadTimeout),this._preloadTimeout=void 0),this._mediaReady()}_mediaReady(){const t=this.resource;this.isValid&&(this.isReady=!0,this.resize(t.videoWidth,t.videoHeight)),this._msToNextUpdate=0,this.updateFrame(),this._msToNextUpdate=0,this._resolve&&(this._resolve(this),this._resolve=null,this._reject=null),this._isSourcePlaying()?this._onPlayStart():this.autoPlay&&this.resource.play()}destroy(){this._configureAutoUpdate();const t=this.resource;t&&(t.removeEventListener("play",this._onPlayStart),t.removeEventListener("pause",this._onPlayStop),t.removeEventListener("seeked",this._onSeeked),t.removeEventListener("canplay",this._onCanPlay),t.removeEventListener("canplaythrough",this._onCanPlayThrough),t.removeEventListener("error",this._onError,!0),t.pause(),t.src="",t.load()),super.destroy()}get autoUpdate(){return this._autoUpdate}set autoUpdate(t){t!==this._autoUpdate&&(this._autoUpdate=t,this._configureAutoUpdate())}get updateFPS(){return this._updateFPS}set updateFPS(t){t!==this._updateFPS&&(this._updateFPS=t,this._configureAutoUpdate())}_configureAutoUpdate(){this._autoUpdate&&this._isSourcePlaying()?!this._updateFPS&&this.resource.requestVideoFrameCallback?(this._isConnectedToTicker&&(v.R.shared.remove(this.updateFrame,this),this._isConnectedToTicker=!1,this._msToNextUpdate=0),null===this._videoFrameRequestCallbackHandle&&(this._videoFrameRequestCallbackHandle=this.resource.requestVideoFrameCallback(this._videoFrameRequestCallback))):(null!==this._videoFrameRequestCallbackHandle&&(this.resource.cancelVideoFrameCallback(this._videoFrameRequestCallbackHandle),this._videoFrameRequestCallbackHandle=null),this._isConnectedToTicker||(v.R.shared.add(this.updateFrame,this),this._isConnectedToTicker=!0,this._msToNextUpdate=0)):(null!==this._videoFrameRequestCallbackHandle&&(this.resource.cancelVideoFrameCallback(this._videoFrameRequestCallbackHandle),this._videoFrameRequestCallbackHandle=null),this._isConnectedToTicker&&(v.R.shared.remove(this.updateFrame,this),this._isConnectedToTicker=!1,this._msToNextUpdate=0))}static test(t){return globalThis.HTMLVideoElement&&t instanceof HTMLVideoElement}};S.extension=i.Ag.TextureSource,S.defaultOptions={...A.v.defaultOptions,autoLoad:!0,autoPlay:!0,updateFPS:0,crossorigin:!0,loop:!1,muted:!0,playsinline:!0,preload:!1},S.MIME_TYPES={ogv:"video/ogg",mov:"video/quicktime",m4v:"video/mp4"};let M=S;s(6557),i.XO.add(f,m,x,M,b.b,_.q,y.P)},5811:(t,e,s)=>{"use strict";s.d(e,{k:()=>l});var i=s(133),r=s(7952);const n=["f32","i32","vec2<f32>","vec3<f32>","vec4<f32>","mat2x2<f32>","mat3x3<f32>","mat4x4<f32>","mat3x2<f32>","mat4x2<f32>","mat2x3<f32>","mat4x3<f32>","mat2x4<f32>","mat3x4<f32>","vec2<i32>","vec3<i32>","vec4<i32>"],a=n.reduce((t,e)=>(t[e]=!0,t),{});function o(t,e){switch(t){case"f32":return 0;case"vec2<f32>":return new Float32Array(2*e);case"vec3<f32>":return new Float32Array(3*e);case"vec4<f32>":return new Float32Array(4*e);case"mat2x2<f32>":return new Float32Array([1,0,0,1]);case"mat3x3<f32>":return new Float32Array([1,0,0,0,1,0,0,0,1]);case"mat4x4<f32>":return new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1])}return null}const h=class t{constructor(e,s){this._touched=0,this.uid=(0,i.L)("uniform"),this._resourceType="uniformGroup",this._resourceId=(0,i.L)("resource"),this.isUniformGroup=!0,this._dirtyId=0,this.destroyed=!1,s={...t.defaultOptions,...s},this.uniformStructures=e;const h={};for(const t in e){const s=e[t];if(s.name=t,s.size=s.size??1,!a[s.type]){const t=s.type.match(/^array<(\w+(?:<\w+>)?),\s*(\d+)>$/);if(t){const[,e,i]=t;throw new Error(`Uniform type ${s.type} is not supported. Use type: '${e}', size: ${i} instead.`)}throw new Error(`Uniform type ${s.type} is not supported. Supported uniform types are: ${n.join(", ")}`)}s.value??(s.value=o(s.type,s.size)),h[t]=s.value}this.uniforms=h,this._dirtyId=1,this.ubo=s.ubo,this.isStatic=s.isStatic,this._signature=(0,r.X)(Object.keys(h).map(t=>`${t}-${e[t].type}`).join("-"),"uniform-group")}update(){this._dirtyId++}};h.defaultOptions={ubo:!1,isStatic:!1};let l=h},6011:(t,e,s)=>{"use strict";s.d(e,{V:()=>l});var i=s(4486),r=s(9636),n=s(133),a=s(949),o=s(1132);function h(t,e){if(!(t instanceof a.h)){let s=e?o.S.INDEX:o.S.VERTEX;t instanceof Array&&(e?(t=new Uint32Array(t),s=o.S.INDEX|o.S.COPY_DST):(t=new Float32Array(t),s=o.S.VERTEX|o.S.COPY_DST)),t=new a.h({data:t,label:e?"index-mesh-buffer":"vertex-mesh-buffer",usage:s})}return t}class l extends i.A{constructor(t={}){super(),this.uid=(0,n.L)("geometry"),this._layoutKey=0,this.instanceCount=1,this._bounds=new r.c,this._boundsDirty=!0;const{attributes:e,indexBuffer:s,topology:i}=t;if(this.buffers=[],this.attributes={},e)for(const t in e)this.addAttribute(t,e[t]);this.instanceCount=t.instanceCount??1,s&&this.addIndex(s),this.topology=i||"triangle-list"}onBufferUpdate(){this._boundsDirty=!0,this.emit("update",this)}getAttribute(t){return this.attributes[t]}getIndex(){return this.indexBuffer}getBuffer(t){return this.getAttribute(t).buffer}getSize(){for(const t in this.attributes){const e=this.attributes[t];return e.buffer.data.length/(e.stride/4||e.size)}return 0}addAttribute(t,e){const s=function(t){return(t instanceof a.h||Array.isArray(t)||t.BYTES_PER_ELEMENT)&&(t={buffer:t}),t.buffer=h(t.buffer,!1),t}(e);-1===this.buffers.indexOf(s.buffer)&&(this.buffers.push(s.buffer),s.buffer.on("update",this.onBufferUpdate,this),s.buffer.on("change",this.onBufferUpdate,this)),this.attributes[t]=s}addIndex(t){this.indexBuffer=h(t,!0),this.buffers.push(this.indexBuffer)}get bounds(){return this._boundsDirty?(this._boundsDirty=!1,function(t,e,s){const i=t.getAttribute("aPosition");if(!i)return s.minX=0,s.minY=0,s.maxX=0,s.maxY=0,s;const r=i.buffer.data;let n=1/0,a=1/0,o=-1/0,h=-1/0;const l=r.BYTES_PER_ELEMENT,u=(i.offset||0)/l,c=(i.stride||8)/l;for(let t=u;t<r.length;t+=c){const e=r[t],s=r[t+1];e>o&&(o=e),s>h&&(h=s),e<n&&(n=e),s<a&&(a=s)}return s.minX=n,s.minY=a,s.maxX=o,s.maxY=h,s}(this,0,this._bounds)):this._bounds}destroy(t=!1){this.emit("destroy",this),this.removeAllListeners(),t&&this.buffers.forEach(t=>t.destroy()),this.attributes=null,this.buffers=null,this.indexBuffer=null,this._bounds=null}}},6040:(t,e,s)=>{"use strict";s.d(e,{n:()=>n});var i=s(5811);const r={};function n(t){let e=r[t];if(e)return e;const s=new Int32Array(t);for(let e=0;e<t;e++)s[e]=e;return e=r[t]=new i.k({uTextures:{value:s,type:"i32",size:t}},{isStatic:!0}),e}},6083:(t,e,s)=>{"use strict";s.d(e,{L:()=>i});const i={_registeredResources:new Set,register(t){this._registeredResources.add(t)},unregister(t){this._registeredResources.delete(t)},release(){this._registeredResources.forEach(t=>t.clear())},get registeredCount(){return this._registeredResources.size},isRegistered(t){return this._registeredResources.has(t)},reset(){this._registeredResources.clear()}}},6302:(t,e,s)=>{"use strict";s.d(e,{GH:()=>ut});var i=s(8507),r=s(341),n=s(3721),a=s(848),o=s(4670),h=s(8655),l=s(9313),u=s(9252);function c(t,e,s,i,r){const n=e.a,a=e.b,o=e.c,h=e.d,l=e.tx,u=e.ty;s||(s=0),i||(i=2),r||(r=t.length/i-s);let c=s*i;for(let e=0;e<r;e++){const e=t[c],s=t[c+1];t[c]=n*e+o*s+l,t[c+1]=a*e+h*s+u,c+=i}}var d=s(4492),p=s(6954);const f={extension:{type:i.Ag.ShapeBuilder,name:"circle"},build(t,e){let s,i,r,n,a,o;if("circle"===t.type){const e=t;if(a=o=e.radius,a<=0)return!1;s=e.x,i=e.y,r=n=0}else if("ellipse"===t.type){const e=t;if(a=e.halfWidth,o=e.halfHeight,a<=0||o<=0)return!1;s=e.x,i=e.y,r=n=0}else{const e=t,h=e.width/2,l=e.height/2;s=e.x+h,i=e.y+l,a=o=Math.max(0,Math.min(e.radius,Math.min(h,l))),r=h-a,n=l-o}if(r<0||n<0)return!1;const h=Math.ceil(2.3*Math.sqrt(a+o)),l=8*h+(r?4:0)+(n?4:0);if(0===l)return!1;if(0===h)return e[0]=e[6]=s+r,e[1]=e[3]=i+n,e[2]=e[4]=s-r,e[5]=e[7]=i-n,!0;let u=0,c=4*h+(r?2:0)+2,d=c,p=l,f=r+a,m=n,g=s+f,x=s-f,y=i+m;if(e[u++]=g,e[u++]=y,e[--c]=y,e[--c]=x,n){const t=i-m;e[d++]=x,e[d++]=t,e[--p]=t,e[--p]=g}for(let t=1;t<h;t++){const l=Math.PI/2*(t/h),f=r+Math.cos(l)*a,m=n+Math.sin(l)*o,g=s+f,x=s-f,y=i+m,_=i-m;e[u++]=g,e[u++]=y,e[--c]=y,e[--c]=x,e[d++]=x,e[d++]=_,e[--p]=_,e[--p]=g}f=r,m=n+o,g=s+f,x=s-f,y=i+m;const _=i-m;return e[u++]=g,e[u++]=y,e[--p]=_,e[--p]=g,r&&(e[u++]=x,e[u++]=y,e[--p]=_,e[--p]=x),!0},triangulate(t,e,s,i,r,n){if(0===t.length)return;let a=0,o=0;for(let e=0;e<t.length;e+=2)a+=t[e],o+=t[e+1];a/=t.length/2,o/=t.length/2;let h=i;e[h*s]=a,e[h*s+1]=o;const l=h++;for(let i=0;i<t.length;i+=2)e[h*s]=t[i],e[h*s+1]=t[i+1],i>0&&(r[n++]=h,r[n++]=l,r[n++]=h-1),h++;r[n++]=l+1,r[n++]=l,r[n++]=h-1}},m={...f,extension:{...f.extension,name:"ellipse"}},g={...f,extension:{...f.extension,name:"roundedRectangle"}};var x=s(5101);const y=1e-4;function _(t,e,s,i,r,n,a,o){let h,l;a?(h=i,l=-s):(h=-i,l=s);const u=t-s*r+h,c=e-i*r+l,d=t+s*n+h,p=e+i*n+l;return o.push(u,c),o.push(d,p),2}function b(t,e,s,i,r,n,a,o){const h=s-t,l=i-e;let u=Math.atan2(h,l),c=Math.atan2(r-t,n-e);o&&u<c?u+=2*Math.PI:!o&&u>c&&(c+=2*Math.PI);let d=u;const p=c-u,f=Math.abs(p),m=Math.sqrt(h*h+l*l),g=1+(15*f*Math.sqrt(m)/Math.PI|0),x=p/g;if(d+=x,o){a.push(t,e),a.push(s,i);for(let s=1,i=d;s<g;s++,i+=x)a.push(t,e),a.push(t+Math.sin(i)*m,e+Math.cos(i)*m);a.push(t,e),a.push(r,n)}else{a.push(s,i),a.push(t,e);for(let s=1,i=d;s<g;s++,i+=x)a.push(t+Math.sin(i)*m,e+Math.cos(i)*m),a.push(t,e);a.push(r,n),a.push(t,e)}return 2*g}function v(t,e,s=2){const i=e&&e.length,r=i?e[0]*s:t.length;let n=w(t,0,r,s,!0);const a=[];if(!n||n.next===n.prev)return a;let o,h,l;if(i&&(n=function(t,e,s,i){const r=[];for(let s=0,n=e.length;s<n;s++){const a=w(t,e[s]*i,s<n-1?e[s+1]*i:t.length,i,!1);a===a.next&&(a.steiner=!0),r.push(B(a))}r.sort(k);for(let t=0;t<r.length;t++)s=E(r[t],s);return s}(t,e,n,s)),t.length>80*s){o=t[0],h=t[1];let e=o,i=h;for(let n=s;n<r;n+=s){const s=t[n],r=t[n+1];s<o&&(o=s),r<h&&(h=r),s>e&&(e=s),r>i&&(i=r)}l=Math.max(e-o,i-h),l=0!==l?32767/l:0}return A(n,a,s,o,h,l,0),a}function w(t,e,s,i,r){let n;if(r===function(t,e,s,i){let r=0;for(let n=e,a=s-i;n<s;n+=i)r+=(t[a]-t[n])*(t[n+1]+t[a+1]),a=n;return r}(t,e,s,i)>0)for(let r=e;r<s;r+=i)n=Y(r/i|0,t[r],t[r+1],n);else for(let r=s-i;r>=e;r-=i)n=Y(r/i|0,t[r],t[r+1],n);return n&&D(n,n.next)&&($(n),n=n.next),n}function C(t,e){if(!t)return t;e||(e=t);let s,i=t;do{if(s=!1,i.steiner||!D(i,i.next)&&0!==L(i.prev,i,i.next))i=i.next;else{if($(i),i=e=i.prev,i===i.next)break;s=!0}}while(s||i!==e);return e}function A(t,e,s,i,r,n,a){if(!t)return;!a&&n&&function(t,e,s,i){let r=t;do{0===r.z&&(r.z=I(r.x,r.y,e,s,i)),r.prevZ=r.prev,r.nextZ=r.next,r=r.next}while(r!==t);r.prevZ.nextZ=null,r.prevZ=null,function(t){let e,s=1;do{let i,r=t;t=null;let n=null;for(e=0;r;){e++;let a=r,o=0;for(let t=0;t<s&&(o++,a=a.nextZ,a);t++);let h=s;for(;o>0||h>0&&a;)0!==o&&(0===h||!a||r.z<=a.z)?(i=r,r=r.nextZ,o--):(i=a,a=a.nextZ,h--),n?n.nextZ=i:t=i,i.prevZ=n,n=i;r=a}n.nextZ=null,s*=2}while(e>1)}(r)}(t,i,r,n);let o=t;for(;t.prev!==t.next;){const h=t.prev,l=t.next;if(n?M(t,i,r,n):S(t))e.push(h.i,t.i,l.i),$(t),t=l.next,o=l.next;else if((t=l)===o){a?1===a?A(t=T(C(t),e),e,s,i,r,n,2):2===a&&P(t,e,s,i,r,n):A(C(t),e,s,i,r,n,1);break}}}function S(t){const e=t.prev,s=t,i=t.next;if(L(e,s,i)>=0)return!1;const r=e.x,n=s.x,a=i.x,o=e.y,h=s.y,l=i.y,u=Math.min(r,n,a),c=Math.min(o,h,l),d=Math.max(r,n,a),p=Math.max(o,h,l);let f=i.next;for(;f!==e;){if(f.x>=u&&f.x<=d&&f.y>=c&&f.y<=p&&F(r,o,n,h,a,l,f.x,f.y)&&L(f.prev,f,f.next)>=0)return!1;f=f.next}return!0}function M(t,e,s,i){const r=t.prev,n=t,a=t.next;if(L(r,n,a)>=0)return!1;const o=r.x,h=n.x,l=a.x,u=r.y,c=n.y,d=a.y,p=Math.min(o,h,l),f=Math.min(u,c,d),m=Math.max(o,h,l),g=Math.max(u,c,d),x=I(p,f,e,s,i),y=I(m,g,e,s,i);let _=t.prevZ,b=t.nextZ;for(;_&&_.z>=x&&b&&b.z<=y;){if(_.x>=p&&_.x<=m&&_.y>=f&&_.y<=g&&_!==r&&_!==a&&F(o,u,h,c,l,d,_.x,_.y)&&L(_.prev,_,_.next)>=0)return!1;if(_=_.prevZ,b.x>=p&&b.x<=m&&b.y>=f&&b.y<=g&&b!==r&&b!==a&&F(o,u,h,c,l,d,b.x,b.y)&&L(b.prev,b,b.next)>=0)return!1;b=b.nextZ}for(;_&&_.z>=x;){if(_.x>=p&&_.x<=m&&_.y>=f&&_.y<=g&&_!==r&&_!==a&&F(o,u,h,c,l,d,_.x,_.y)&&L(_.prev,_,_.next)>=0)return!1;_=_.prevZ}for(;b&&b.z<=y;){if(b.x>=p&&b.x<=m&&b.y>=f&&b.y<=g&&b!==r&&b!==a&&F(o,u,h,c,l,d,b.x,b.y)&&L(b.prev,b,b.next)>=0)return!1;b=b.nextZ}return!0}function T(t,e){let s=t;do{const i=s.prev,r=s.next.next;!D(i,r)&&U(i,s,s.next,r)&&X(i,r)&&X(r,i)&&(e.push(i.i,s.i,r.i),$(s),$(s.next),s=t=r),s=s.next}while(s!==t);return C(s)}function P(t,e,s,i,r,n){let a=t;do{let t=a.next.next;for(;t!==a.prev;){if(a.i!==t.i&&O(a,t)){let o=V(a,t);return a=C(a,a.next),o=C(o,o.next),A(a,e,s,i,r,n,0),void A(o,e,s,i,r,n,0)}t=t.next}a=a.next}while(a!==t)}function k(t,e){let s=t.x-e.x;return 0===s&&(s=t.y-e.y,0===s)&&(s=(t.next.y-t.y)/(t.next.x-t.x)-(e.next.y-e.y)/(e.next.x-e.x)),s}function E(t,e){const s=function(t,e){let s=e;const i=t.x,r=t.y;let n,a=-1/0;if(D(t,s))return s;do{if(D(t,s.next))return s.next;if(r<=s.y&&r>=s.next.y&&s.next.y!==s.y){const t=s.x+(r-s.y)*(s.next.x-s.x)/(s.next.y-s.y);if(t<=i&&t>a&&(a=t,n=s.x<s.next.x?s:s.next,t===i))return n}s=s.next}while(s!==e);if(!n)return null;const o=n,h=n.x,l=n.y;let u=1/0;s=n;do{if(i>=s.x&&s.x>=h&&i!==s.x&&G(r<l?i:a,r,h,l,r<l?a:i,r,s.x,s.y)){const e=Math.abs(r-s.y)/(i-s.x);X(s,t)&&(e<u||e===u&&(s.x>n.x||s.x===n.x&&R(n,s)))&&(n=s,u=e)}s=s.next}while(s!==o);return n}(t,e);if(!s)return e;const i=V(s,t);return C(i,i.next),C(s,s.next)}function R(t,e){return L(t.prev,t,e.prev)<0&&L(e.next,t,t.next)<0}function I(t,e,s,i,r){return(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=(t-s)*r|0)|t<<8))|t<<4))|t<<2))|t<<1))|(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=(e-i)*r|0)|e<<8))|e<<4))|e<<2))|e<<1))<<1}function B(t){let e=t,s=t;do{(e.x<s.x||e.x===s.x&&e.y<s.y)&&(s=e),e=e.next}while(e!==t);return s}function G(t,e,s,i,r,n,a,o){return(r-a)*(e-o)>=(t-a)*(n-o)&&(t-a)*(i-o)>=(s-a)*(e-o)&&(s-a)*(n-o)>=(r-a)*(i-o)}function F(t,e,s,i,r,n,a,o){return!(t===a&&e===o)&&G(t,e,s,i,r,n,a,o)}function O(t,e){return t.next.i!==e.i&&t.prev.i!==e.i&&!function(t,e){let s=t;do{if(s.i!==t.i&&s.next.i!==t.i&&s.i!==e.i&&s.next.i!==e.i&&U(s,s.next,t,e))return!0;s=s.next}while(s!==t);return!1}(t,e)&&(X(t,e)&&X(e,t)&&function(t,e){let s=t,i=!1;const r=(t.x+e.x)/2,n=(t.y+e.y)/2;do{s.y>n!=s.next.y>n&&s.next.y!==s.y&&r<(s.next.x-s.x)*(n-s.y)/(s.next.y-s.y)+s.x&&(i=!i),s=s.next}while(s!==t);return i}(t,e)&&(L(t.prev,t,e.prev)||L(t,e.prev,e))||D(t,e)&&L(t.prev,t,t.next)>0&&L(e.prev,e,e.next)>0)}function L(t,e,s){return(e.y-t.y)*(s.x-e.x)-(e.x-t.x)*(s.y-e.y)}function D(t,e){return t.x===e.x&&t.y===e.y}function U(t,e,s,i){const r=N(L(t,e,s)),n=N(L(t,e,i)),a=N(L(s,i,t)),o=N(L(s,i,e));return r!==n&&a!==o||!(0!==r||!z(t,s,e))||!(0!==n||!z(t,i,e))||!(0!==a||!z(s,t,i))||!(0!==o||!z(s,e,i))}function z(t,e,s){return e.x<=Math.max(t.x,s.x)&&e.x>=Math.min(t.x,s.x)&&e.y<=Math.max(t.y,s.y)&&e.y>=Math.min(t.y,s.y)}function N(t){return t>0?1:t<0?-1:0}function X(t,e){return L(t.prev,t,t.next)<0?L(t,e,t.next)>=0&&L(t,t.prev,e)>=0:L(t,e,t.prev)<0||L(t,t.next,e)<0}function V(t,e){const s=H(t.i,t.x,t.y),i=H(e.i,e.x,e.y),r=t.next,n=e.prev;return t.next=e,e.prev=t,s.next=r,r.prev=s,i.next=s,s.prev=i,n.next=i,i.prev=n,i}function Y(t,e,s,i){const r=H(t,e,s);return i?(r.next=i.next,r.prev=i,i.next.prev=r,i.next=r):(r.prev=r,r.next=r),r}function $(t){t.next.prev=t.prev,t.prev.next=t.next,t.prevZ&&(t.prevZ.nextZ=t.nextZ),t.nextZ&&(t.nextZ.prevZ=t.prevZ)}function H(t,e,s){return{i:t,x:e,y:s,prev:null,next:null,z:0,prevZ:null,nextZ:null,steiner:!1}}s(4486);const j=v.default||v;function W(t,e,s,i,r,n,a){const o=j(t,e,2);if(!o)return;for(let t=0;t<o.length;t+=3)n[a++]=o[t]+r,n[a++]=o[t+1]+r,n[a++]=o[t+2]+r;let h=r*i;for(let e=0;e<t.length;e+=2)s[h]=t[e],s[h+1]=t[e+1],h+=i}const q=[],Z={extension:{type:i.Ag.ShapeBuilder,name:"polygon"},build(t,e){for(let s=0;s<t.points.length;s++)e[s]=t.points[s];return!0},triangulate(t,e,s,i,r,n){W(t,q,e,s,i,r,n)}},Q={extension:{type:i.Ag.ShapeBuilder,name:"rectangle"},build(t,e){const s=t,i=s.x,r=s.y,n=s.width,a=s.height;return n>0&&a>0&&(e[0]=i,e[1]=r,e[2]=i+n,e[3]=r,e[4]=i+n,e[5]=r+a,e[6]=i,e[7]=r+a,!0)},triangulate(t,e,s,i,r,n){let a=0;e[(i*=s)+a]=t[0],e[i+a+1]=t[1],a+=s,e[i+a]=t[2],e[i+a+1]=t[3],a+=s,e[i+a]=t[6],e[i+a+1]=t[7],a+=s,e[i+a]=t[4],e[i+a+1]=t[5],a+=s;const o=i/s;r[n++]=o,r[n++]=o+1,r[n++]=o+2,r[n++]=o+1,r[n++]=o+3,r[n++]=o+2}},K={extension:{type:i.Ag.ShapeBuilder,name:"triangle"},build:(t,e)=>(e[0]=t.x,e[1]=t.y,e[2]=t.x2,e[3]=t.y2,e[4]=t.x3,e[5]=t.y3,!0),triangulate(t,e,s,i,r,n){let a=0;e[(i*=s)+a]=t[0],e[i+a+1]=t[1],a+=s,e[i+a]=t[2],e[i+a+1]=t[3],a+=s,e[i+a]=t[4],e[i+a+1]=t[5];const o=i/s;r[n++]=o,r[n++]=o+1,r[n++]=o+2}};var J=s(7276);const tt=new l.u,et=new u.M,st={};i.XO.handleByMap(i.Ag.ShapeBuilder,st),i.XO.add(Q,Z,K,f,m,g);const it=new u.M,rt=new l.u;function nt(t,e,s){const i=[],r=st.rectangle,n=it;n.x=t.dx,n.y=t.dy,n.width=t.dw,n.height=t.dh;const a=t.transform;if(!r.build(n,i))return;const{vertices:o,uvs:l,indices:u}=s,d=u.length,f=o.length/2;a&&c(i,a),r.triangulate(i,o,2,f,u,d);const m=t.image,g=m.uvs;l.push(g.x0,g.y0,g.x1,g.y1,g.x3,g.y3,g.x2,g.y2);const x=h.Z.get(p.G);x.indexOffset=d,x.indexSize=u.length-d,x.attributeOffset=f,x.attributeSize=o.length/2-f,x.baseColor=t.style,x.alpha=t.alpha,x.texture=m,x.geometryData=s,e.push(x)}function at(t,e,s,i,r){const{vertices:n,uvs:a,indices:o}=r;t.shapePrimitives.forEach(({shape:t,transform:l,holes:u})=>{const f=[],m=st[t.type];if(!m.build(t,f))return;const g=o.length,v=n.length/2;let w="triangle-list";if(l&&c(f,l),s){const s=t.closePath??!0,i=e;i.pixelLine?(function(t,e,s,i){const r=y;if(0===t.length)return;const n=t[0],a=t[1],o=t[t.length-2],h=t[t.length-1],l=e||Math.abs(n-o)<r&&Math.abs(a-h)<r,u=s,c=t.length/2,d=u.length/2;for(let e=0;e<c;e++)u.push(t[2*e]),u.push(t[2*e+1]);for(let t=0;t<c-1;t++)i.push(d+t,d+t+1);l&&i.push(d+c-1,d)}(f,s,n,o),w="line-list"):function(t,e,s,i,r,n){const a=y;if(0===t.length)return;const o=e;let h=o.alignment;if(.5!==e.alignment){let e=function(t){const e=t.length;if(e<6)return 1;let s=0;for(let i=0,r=t[e-2],n=t[e-1];i<e;i+=2){const e=t[i],a=t[i+1];s+=(e-r)*(a+n),r=e,n=a}return s<0?-1:1}(t);h=(h-.5)*e+.5}const l=new x.b(t[0],t[1]),u=new x.b(t[t.length-2],t[t.length-1]),c=i,d=Math.abs(l.x-u.x)<a&&Math.abs(l.y-u.y)<a;if(c){t=t.slice(),d&&(t.pop(),t.pop(),u.set(t[t.length-2],t[t.length-1]));const e=.5*(l.x+u.x),s=.5*(u.y+l.y);t.unshift(e,s),t.push(e,s)}const p=r,f=t.length/2;let m=t.length;const g=p.length/2,v=o.width/2,w=v*v,C=o.miterLimit*o.miterLimit;let A=t[0],S=t[1],M=t[2],T=t[3],P=0,k=0,E=-(S-T),R=A-M,I=0,B=0,G=Math.sqrt(E*E+R*R);E/=G,R/=G,E*=v,R*=v;const F=2*(1-h),O=2*h;c||("round"===o.cap?m+=b(A-E*(F-O)*.5,S-R*(F-O)*.5,A-E*F,S-R*F,A+E*O,S+R*O,p,!0)+2:"square"===o.cap&&(m+=_(A,S,E,R,F,O,!0,p))),p.push(A-E*F,S-R*F),p.push(A+E*O,S+R*O);for(let e=1;e<f-1;++e){A=t[2*(e-1)],S=t[2*(e-1)+1],M=t[2*e],T=t[2*e+1],P=t[2*(e+1)],k=t[2*(e+1)+1],E=-(S-T),R=A-M,G=Math.sqrt(E*E+R*R),E/=G,R/=G,E*=v,R*=v,I=-(T-k),B=M-P,G=Math.sqrt(I*I+B*B),I/=G,B/=G,I*=v,B*=v;const s=M-A,i=S-T,r=M-P,n=k-T,a=s*r+i*n,h=i*r-n*s,l=h<0;if(Math.abs(h)<.001*Math.abs(a)){p.push(M-E*F,T-R*F),p.push(M+E*O,T+R*O),a>=0&&("round"===o.join?m+=b(M,T,M-E*F,T-R*F,M-I*F,T-B*F,p,!1)+4:m+=2,p.push(M-I*O,T-B*O),p.push(M+I*F,T+B*F));continue}const u=(-E+A)*(-R+T)-(-E+M)*(-R+S),c=(-I+P)*(-B+T)-(-I+M)*(-B+k),d=(s*c-r*u)/h,f=(n*u-i*c)/h,g=(d-M)*(d-M)+(f-T)*(f-T),x=M+(d-M)*F,y=T+(f-T)*F,_=M-(d-M)*O,L=T-(f-T)*O,D=l?F:O;g<=Math.min(s*s+i*i,r*r+n*n)+D*D*w?"bevel"===o.join||g/w>C?(l?(p.push(x,y),p.push(M+E*O,T+R*O),p.push(x,y),p.push(M+I*O,T+B*O)):(p.push(M-E*F,T-R*F),p.push(_,L),p.push(M-I*F,T-B*F),p.push(_,L)),m+=2):"round"===o.join?l?(p.push(x,y),p.push(M+E*O,T+R*O),m+=b(M,T,M+E*O,T+R*O,M+I*O,T+B*O,p,!0)+4,p.push(x,y),p.push(M+I*O,T+B*O)):(p.push(M-E*F,T-R*F),p.push(_,L),m+=b(M,T,M-E*F,T-R*F,M-I*F,T-B*F,p,!1)+4,p.push(M-I*F,T-B*F),p.push(_,L)):(p.push(x,y),p.push(_,L)):(p.push(M-E*F,T-R*F),p.push(M+E*O,T+R*O),"round"===o.join?m+=l?b(M,T,M+E*O,T+R*O,M+I*O,T+B*O,p,!0)+2:b(M,T,M-E*F,T-R*F,M-I*F,T-B*F,p,!1)+2:"miter"===o.join&&g/w<=C&&(l?(p.push(_,L),p.push(_,L)):(p.push(x,y),p.push(x,y)),m+=2),p.push(M-I*F,T-B*F),p.push(M+I*O,T+B*O),m+=2)}A=t[2*(f-2)],S=t[2*(f-2)+1],M=t[2*(f-1)],T=t[2*(f-1)+1],E=-(S-T),R=A-M,G=Math.sqrt(E*E+R*R),E/=G,R/=G,E*=v,R*=v,p.push(M-E*F,T-R*F),p.push(M+E*O,T+R*O),c||("round"===o.cap?m+=b(M-E*(F-O)*.5,T-R*(F-O)*.5,M-E*F,T-R*F,M+E*O,T+R*O,p,!1)+2:"square"===o.cap&&(m+=_(M,T,E,R,F,O,!1,p)));for(let t=g;t<m+g-2;++t)A=p[2*t],S=p[2*t+1],M=p[2*(t+1)],T=p[2*(t+1)+1],P=p[2*(t+2)],k=p[2*(t+2)+1],Math.abs(A*(T-k)+M*(k-S)+P*(S-T))<1e-8||n.push(t,t+1,t+2)}(f,i,0,s,n,o)}else if(u){const t=[],e=f.slice();(function(t){const e=[];for(let s=0;s<t.length;s++){const i=t[s].shape,r=[];st[i.type].build(i,r)&&e.push(r)}return e})(u).forEach(s=>{t.push(e.length/2),e.push(...s)}),W(e,t,n,2,v,o,g)}else m.triangulate(f,n,2,v,o,g);const C=a.length/2,A=e.texture;if(A!==d.g.WHITE){const s=function(t,e,s,i){const r=e.matrix?t.copyFrom(e.matrix).invert():t.identity();if("local"===e.textureSpace){const t=s.getBounds(et);e.width&&t.pad(e.width);const{x:i,y:n}=t,a=1/t.width,o=1/t.height,h=-i*a,l=-n*o,u=r.a,c=r.b,d=r.c,p=r.d;r.a*=a,r.b*=a,r.c*=o,r.d*=o,r.tx=h*u+l*d+r.tx,r.ty=h*c+l*p+r.ty}else r.translate(e.texture.frame.x,e.texture.frame.y),r.scale(1/e.texture.source.width,1/e.texture.source.height);const n=e.texture.source.style;return e.fill instanceof J._||"clamp-to-edge"!==n.addressMode||(n.addressMode="repeat",n.update()),i&&r.append(tt.copyFrom(i).invert()),r}(rt,e,t,l);!function(t,e,s,i,r,n,a,o=null){let h=0;s*=e,r*=n;const l=o.a,u=o.b,c=o.c,d=o.d,p=o.tx,f=o.ty;for(;h<a;){const a=t[s],o=t[s+1];i[r]=l*a+c*o+p,i[r+1]=u*a+d*o+f,r+=n,s+=e,h++}}(n,2,v,a,C,2,n.length/2-v,s)}else!function(t,e,s,i){let r=0;for(e*=2;r<i;)t[e]=0,t[e+1]=0,e+=2,r++}(a,C,0,n.length/2-v);const S=h.Z.get(p.G);S.indexOffset=g,S.indexSize=o.length-g,S.attributeOffset=v,S.attributeSize=n.length/2-v,S.baseColor=e.color,S.alpha=e.alpha,S.texture=A,S.geometryData=r,S.topology=w,i.push(S)})}class ot{constructor(){this.batches=[],this.geometryData={vertices:[],uvs:[],indices:[]}}}class ht{constructor(){this.instructions=new a.L}init(t){this.batcher=new n.J({maxTextures:t}),this.instructions.reset()}get geometry(){return(0,o.t6)(o.Ek,"GraphicsContextRenderData#geometry is deprecated, please use batcher.geometry instead."),this.batcher.geometry}destroy(){this.batcher.destroy(),this.instructions.destroy(),this.batcher=null,this.instructions=null}}const lt=class t{constructor(t){this._gpuContextHash={},this._graphicsDataContextHash=Object.create(null),this._renderer=t,t.renderableGC.addManagedHash(this,"_gpuContextHash"),t.renderableGC.addManagedHash(this,"_graphicsDataContextHash")}init(e){t.defaultOptions.bezierSmoothness=e?.bezierSmoothness??t.defaultOptions.bezierSmoothness}getContextRenderData(t){return this._graphicsDataContextHash[t.uid]||this._initContextRenderData(t)}updateGpuContext(t){let e=this._gpuContextHash[t.uid]||this._initContext(t);if(t.dirty){e?this._cleanGraphicsContextData(t):e=this._initContext(t),function(t,e){const{geometryData:s,batches:i}=e;i.length=0,s.indices.length=0,s.vertices.length=0,s.uvs.length=0;for(let e=0;e<t.instructions.length;e++){const r=t.instructions[e];if("texture"===r.action)nt(r.data,i,s);else if("fill"===r.action||"stroke"===r.action){const t="stroke"===r.action,e=r.data.path.shapePath,n=r.data.style,a=r.data.hole;t&&a&&at(a.shapePath,n,!0,i,s),a&&(e.shapePrimitives[e.shapePrimitives.length-1].holes=a.shapePath.shapePrimitives),at(e,n,t,i,s)}}}(t,e);const s=t.batchMode;t.customShader||"no-batch"===s?e.isBatchable=!1:e.isBatchable="auto"!==s||e.geometryData.vertices.length<400,t.dirty=!1}return e}getGpuContext(t){return this._gpuContextHash[t.uid]||this._initContext(t)}_initContextRenderData(t){const e=h.Z.get(ht,{maxTextures:this._renderer.limits.maxBatchableTextures}),{batches:s,geometryData:i}=this._gpuContextHash[t.uid],n=i.vertices.length,a=i.indices.length;for(let t=0;t<s.length;t++)s[t].applyTransform=!1;const o=e.batcher;o.ensureAttributeBuffer(n),o.ensureIndexBuffer(a),o.begin();for(let t=0;t<s.length;t++){const e=s[t];o.add(e)}o.finish(e.instructions);const l=o.geometry;l.indexBuffer.setDataWithSize(o.indexBuffer,o.indexSize,!0),l.buffers[0].setDataWithSize(o.attributeBuffer.float32View,o.attributeSize,!0);const u=o.batches;for(let t=0;t<u.length;t++){const e=u[t];e.bindGroup=(0,r.w)(e.textures.textures,e.textures.count,this._renderer.limits.maxBatchableTextures)}return this._graphicsDataContextHash[t.uid]=e,e}_initContext(t){const e=new ot;return e.context=t,this._gpuContextHash[t.uid]=e,t.on("destroy",this.onGraphicsContextDestroy,this),this._gpuContextHash[t.uid]}onGraphicsContextDestroy(t){this._cleanGraphicsContextData(t),t.off("destroy",this.onGraphicsContextDestroy,this),this._gpuContextHash[t.uid]=null}_cleanGraphicsContextData(t){const e=this._gpuContextHash[t.uid];e.isBatchable||this._graphicsDataContextHash[t.uid]&&(h.Z.return(this.getContextRenderData(t)),this._graphicsDataContextHash[t.uid]=null),e.batches&&e.batches.forEach(t=>{h.Z.return(t)})}destroy(){for(const t in this._gpuContextHash)this._gpuContextHash[t]&&this.onGraphicsContextDestroy(this._gpuContextHash[t].context)}};lt.extension={type:[i.Ag.WebGLSystem,i.Ag.WebGPUSystem,i.Ag.CanvasSystem],name:"graphicsContext"},lt.defaultOptions={bezierSmoothness:.5};let ut=lt},6312:(t,e,s)=>{"use strict";var i=s(8507),r=(t=>(t[t.Low=0]="Low",t[t.Normal=1]="Normal",t[t.High=2]="High",t))(r||{}),n=s(268),a=s(1761);function o(t){if("string"!=typeof t)throw new TypeError(`Path must be a string. Received ${JSON.stringify(t)}`)}function h(t){return t.split("?")[0].split("#")[0]}const l={toPosix:t=>t.replace(new RegExp("\\".replace(/[.*+?^${}()|[\]\\]/g,"\\$&"),"g"),"/"),isUrl(t){return/^https?:/.test(this.toPosix(t))},isDataUrl:t=>/^data:([a-z]+\/[a-z0-9-+.]+(;[a-z0-9-.!#$%*+.{}|~`]+=[a-z0-9-.!#$%*+.{}()_|~`]+)*)?(;base64)?,([a-z0-9!$&',()*+;=\-._~:@\/?%\s<>]*?)$/i.test(t),isBlobUrl:t=>t.startsWith("blob:"),hasProtocol(t){return/^[^/:]+:/.test(this.toPosix(t))},getProtocol(t){o(t),t=this.toPosix(t);const e=/^file:\/\/\//.exec(t);if(e)return e[0];const s=/^[^/:]+:\/{0,2}/.exec(t);return s?s[0]:""},toAbsolute(t,e,s){if(o(t),this.isDataUrl(t)||this.isBlobUrl(t))return t;const i=h(this.toPosix(e??a.e.get().getBaseUrl())),r=h(this.toPosix(s??this.rootname(i)));return(t=this.toPosix(t)).startsWith("/")?l.join(r,t.slice(1)):this.isAbsolute(t)?t:this.join(i,t)},normalize(t){if(o(t),0===t.length)return".";if(this.isDataUrl(t)||this.isBlobUrl(t))return t;let e="";const s=(t=this.toPosix(t)).startsWith("/");this.hasProtocol(t)&&(e=this.rootname(t),t=t.slice(e.length));const i=t.endsWith("/");return(t=function(t){let e="",s=0,i=-1,r=0,n=-1;for(let a=0;a<=t.length;++a){if(a<t.length)n=t.charCodeAt(a);else{if(47===n)break;n=47}if(47===n){if(i===a-1||1===r);else if(i!==a-1&&2===r){if(e.length<2||2!==s||46!==e.charCodeAt(e.length-1)||46!==e.charCodeAt(e.length-2))if(e.length>2){const t=e.lastIndexOf("/");if(t!==e.length-1){-1===t?(e="",s=0):(e=e.slice(0,t),s=e.length-1-e.lastIndexOf("/")),i=a,r=0;continue}}else if(2===e.length||1===e.length){e="",s=0,i=a,r=0;continue}}else e.length>0?e+=`/${t.slice(i+1,a)}`:e=t.slice(i+1,a),s=a-i-1;i=a,r=0}else 46===n&&-1!==r?++r:r=-1}return e}(t)).length>0&&i&&(t+="/"),s?`/${t}`:e+t},isAbsolute(t){return o(t),t=this.toPosix(t),!!this.hasProtocol(t)||t.startsWith("/")},join(...t){if(0===t.length)return".";let e;for(let s=0;s<t.length;++s){const i=t[s];if(o(i),i.length>0)if(void 0===e)e=i;else{const r=t[s-1]??"";this.joinExtensions.includes(this.extname(r).toLowerCase())?e+=`/../${i}`:e+=`/${i}`}}return void 0===e?".":this.normalize(e)},dirname(t){if(o(t),0===t.length)return".";let e=(t=this.toPosix(t)).charCodeAt(0);const s=47===e;let i=-1,r=!0;const n=this.getProtocol(t),a=t;for(let s=(t=t.slice(n.length)).length-1;s>=1;--s)if(e=t.charCodeAt(s),47===e){if(!r){i=s;break}}else r=!1;return-1===i?s?"/":this.isUrl(a)?n+t:n:s&&1===i?"//":n+t.slice(0,i)},rootname(t){o(t);let e="";if(e=(t=this.toPosix(t)).startsWith("/")?"/":this.getProtocol(t),this.isUrl(t)){const s=t.indexOf("/",e.length);e=-1!==s?t.slice(0,s):t,e.endsWith("/")||(e+="/")}return e},basename(t,e){o(t),e&&o(e),t=h(this.toPosix(t));let s,i=0,r=-1,n=!0;if(void 0!==e&&e.length>0&&e.length<=t.length){if(e.length===t.length&&e===t)return"";let a=e.length-1,o=-1;for(s=t.length-1;s>=0;--s){const h=t.charCodeAt(s);if(47===h){if(!n){i=s+1;break}}else-1===o&&(n=!1,o=s+1),a>=0&&(h===e.charCodeAt(a)?-1===--a&&(r=s):(a=-1,r=o))}return i===r?r=o:-1===r&&(r=t.length),t.slice(i,r)}for(s=t.length-1;s>=0;--s)if(47===t.charCodeAt(s)){if(!n){i=s+1;break}}else-1===r&&(n=!1,r=s+1);return-1===r?"":t.slice(i,r)},extname(t){o(t);let e=-1,s=0,i=-1,r=!0,n=0;for(let a=(t=h(this.toPosix(t))).length-1;a>=0;--a){const o=t.charCodeAt(a);if(47!==o)-1===i&&(r=!1,i=a+1),46===o?-1===e?e=a:1!==n&&(n=1):-1!==e&&(n=-1);else if(!r){s=a+1;break}}return-1===e||-1===i||0===n||1===n&&e===i-1&&e===s+1?"":t.slice(e,i)},parse(t){o(t);const e={root:"",dir:"",base:"",ext:"",name:""};if(0===t.length)return e;let s=(t=h(this.toPosix(t))).charCodeAt(0);const i=this.isAbsolute(t);let r;e.root=this.rootname(t),r=i||this.hasProtocol(t)?1:0;let n=-1,a=0,l=-1,u=!0,c=t.length-1,d=0;for(;c>=r;--c)if(s=t.charCodeAt(c),47!==s)-1===l&&(u=!1,l=c+1),46===s?-1===n?n=c:1!==d&&(d=1):-1!==n&&(d=-1);else if(!u){a=c+1;break}return-1===n||-1===l||0===d||1===d&&n===l-1&&n===a+1?-1!==l&&(e.base=e.name=0===a&&i?t.slice(1,l):t.slice(a,l)):(0===a&&i?(e.name=t.slice(1,n),e.base=t.slice(1,l)):(e.name=t.slice(a,n),e.base=t.slice(a,l)),e.ext=t.slice(n,l)),e.dir=this.dirname(t),e},sep:"/",delimiter:":",joinExtensions:[".html"]};var u=s(2406);function c(t,e,s,i,r){const n=e[s];for(let a=0;a<n.length;a++){const o=n[a];s<e.length-1?c(t.replace(i[s],o),e,s+1,i,r):r.push(t.replace(i[s],o))}}function d(t){const e=t.match(/\{(.*?)\}/g),s=[];if(e){const i=[];e.forEach(t=>{const e=t.substring(1,t.length-1).split(",");i.push(e)}),c(t,i,0,e,s)}else s.push(t);return s}const p=t=>!Array.isArray(t);class f{constructor(){this._defaultBundleIdentifierOptions={connector:"-",createBundleAssetId:(t,e)=>`${t}${this._bundleIdConnector}${e}`,extractAssetIdFromBundle:(t,e)=>e.replace(`${t}${this._bundleIdConnector}`,"")},this._bundleIdConnector=this._defaultBundleIdentifierOptions.connector,this._createBundleAssetId=this._defaultBundleIdentifierOptions.createBundleAssetId,this._extractAssetIdFromBundle=this._defaultBundleIdentifierOptions.extractAssetIdFromBundle,this._assetMap={},this._preferredOrder=[],this._parsers=[],this._resolverHash={},this._bundles={}}setBundleIdentifier(t){if(this._bundleIdConnector=t.connector??this._bundleIdConnector,this._createBundleAssetId=t.createBundleAssetId??this._createBundleAssetId,this._extractAssetIdFromBundle=t.extractAssetIdFromBundle??this._extractAssetIdFromBundle,"bar"!==this._extractAssetIdFromBundle("foo",this._createBundleAssetId("foo","bar")))throw new Error("[Resolver] GenerateBundleAssetId are not working correctly")}prefer(...t){t.forEach(t=>{this._preferredOrder.push(t),t.priority||(t.priority=Object.keys(t.params))}),this._resolverHash={}}set basePath(t){this._basePath=t}get basePath(){return this._basePath}set rootPath(t){this._rootPath=t}get rootPath(){return this._rootPath}get parsers(){return this._parsers}reset(){this.setBundleIdentifier(this._defaultBundleIdentifierOptions),this._assetMap={},this._preferredOrder=[],this._resolverHash={},this._rootPath=null,this._basePath=null,this._manifest=null,this._bundles={},this._defaultSearchParams=null}setDefaultSearchParams(t){if("string"==typeof t)this._defaultSearchParams=t;else{const e=t;this._defaultSearchParams=Object.keys(e).map(t=>`${encodeURIComponent(t)}=${encodeURIComponent(e[t])}`).join("&")}}getAlias(t){const{alias:e,src:s}=t;return(0,u.z)(e||s,t=>"string"==typeof t?t:Array.isArray(t)?t.map(t=>t?.src??t):t?.src?t.src:t,!0)}addManifest(t){this._manifest&&(0,n.R)("[Resolver] Manifest already exists, this will be overwritten"),this._manifest=t,t.bundles.forEach(t=>{this.addBundle(t.name,t.assets)})}addBundle(t,e){const s=[];let i=e;Array.isArray(e)||(i=Object.entries(e).map(([t,e])=>"string"==typeof e||Array.isArray(e)?{alias:t,src:e}:{alias:t,...e})),i.forEach(e=>{const i=e.src,r=e.alias;let n;if("string"==typeof r){const e=this._createBundleAssetId(t,r);s.push(e),n=[r,e]}else{const e=r.map(e=>this._createBundleAssetId(t,e));s.push(...e),n=[...r,...e]}this.add({...e,alias:n,src:i})}),this._bundles[t]=s}add(t){const e=[];let s;Array.isArray(t)?e.push(...t):e.push(t),s=t=>{this.hasKey(t)&&(0,n.R)(`[Resolver] already has key: ${t} overwriting`)},(0,u.z)(e).forEach(t=>{const{src:e}=t;let{data:i,format:r,loadParser:n,parser:a}=t;const o=(0,u.z)(e).map(t=>"string"==typeof t?d(t):Array.isArray(t)?t:[t]),h=this.getAlias(t);Array.isArray(h)?h.forEach(s):s(h);const l=[];o.forEach(e=>{e.forEach(e=>{let s={};if("object"!=typeof e){s.src=e;for(let t=0;t<this._parsers.length;t++){const i=this._parsers[t];if(i.test(e)){s=i.parse(e);break}}}else i=e.data??i,r=e.format??r,(e.loadParser||e.parser)&&(n=e.loadParser??n,a=e.parser??a),s={...s,...e};if(!h)throw new Error(`[Resolver] alias is undefined for this asset: ${s.src}`);s=this._buildResolvedAsset(s,{aliases:h,data:i,format:r,loadParser:n,parser:a,progressSize:t.progressSize}),l.push(s)})}),h.forEach(t=>{this._assetMap[t]=l})})}resolveBundle(t){const e=p(t);t=(0,u.z)(t);const s={};return t.forEach(t=>{const e=this._bundles[t];if(e){const i=this.resolve(e),r={};for(const e in i){const s=i[e];r[this._extractAssetIdFromBundle(t,e)]=s}s[t]=r}}),e?s[t[0]]:s}resolveUrl(t){const e=this.resolve(t);if("string"!=typeof t){const t={};for(const s in e)t[s]=e[s].src;return t}return e.src}resolve(t){const e=p(t);t=(0,u.z)(t);const s={};return t.forEach(t=>{if(!this._resolverHash[t])if(this._assetMap[t]){let e=this._assetMap[t];const s=this._getPreferredOrder(e);s?.priority.forEach(t=>{s.params[t].forEach(s=>{const i=e.filter(e=>!!e[t]&&e[t]===s);i.length&&(e=i)})}),this._resolverHash[t]=e[0]}else this._resolverHash[t]=this._buildResolvedAsset({alias:[t],src:t},{});s[t]=this._resolverHash[t]}),e?s[t[0]]:s}hasKey(t){return!!this._assetMap[t]}hasBundle(t){return!!this._bundles[t]}_getPreferredOrder(t){for(let e=0;e<t.length;e++){const s=t[e],i=this._preferredOrder.find(t=>t.params.format.includes(s.format));if(i)return i}return this._preferredOrder[0]}_appendDefaultSearchParams(t){return this._defaultSearchParams?`${t}${/\?/.test(t)?"&":"?"}${this._defaultSearchParams}`:t}_buildResolvedAsset(t,e){const{aliases:s,data:i,loadParser:r,parser:n,format:a,progressSize:o}=e;return(this._basePath||this._rootPath)&&(t.src=l.toAbsolute(t.src,this._basePath,this._rootPath)),t.alias=s??t.alias??[t.src],t.src=this._appendDefaultSearchParams(t.src),t.data={...i||{},...t.data},t.loadParser=r??t.loadParser,t.parser=n??t.parser,t.format=a??t.format??t.src.split(".").pop().split("?").shift().split("#").shift(),void 0!==o&&(t.progressSize=o),t}}f.RETINA_PREFIX=/@([0-9\.]+)x/;const m=(t,e)=>{const s=e.split("?")[1];return s&&(t+=`?${s}`),t};var g=s(4492),x=s(9252),y=s(583);const _=class t{constructor(t,e){this.linkedSheets=[];let s=t;t?.source instanceof y.v&&(s={texture:t,data:e});const{texture:i,data:r,cachePrefix:n=""}=s;this.cachePrefix=n,this._texture=i instanceof g.g?i:null,this.textureSource=i.source,this.textures={},this.animations={},this.data=r;const a=parseFloat(r.meta.scale);a?(this.resolution=a,i.source.resolution=this.resolution):this.resolution=i.source._resolution,this._frames=this.data.frames,this._frameKeys=Object.keys(this._frames),this._batchIndex=0,this._callback=null}parse(){return new Promise(e=>{this._callback=e,this._batchIndex=0,this._frameKeys.length<=t.BATCH_SIZE?(this._processFrames(0),this._processAnimations(),this._parseComplete()):this._nextBatch()})}_processFrames(e){let s=e;const i=t.BATCH_SIZE;for(;s-e<i&&s<this._frameKeys.length;){const t=this._frameKeys[s],e=this._frames[t],i=e.frame;if(i){let s=null,r=null;const n=!1!==e.trimmed&&e.sourceSize?e.sourceSize:e.frame,a=new x.M(0,0,Math.floor(n.w)/this.resolution,Math.floor(n.h)/this.resolution);s=e.rotated?new x.M(Math.floor(i.x)/this.resolution,Math.floor(i.y)/this.resolution,Math.floor(i.h)/this.resolution,Math.floor(i.w)/this.resolution):new x.M(Math.floor(i.x)/this.resolution,Math.floor(i.y)/this.resolution,Math.floor(i.w)/this.resolution,Math.floor(i.h)/this.resolution),!1!==e.trimmed&&e.spriteSourceSize&&(r=new x.M(Math.floor(e.spriteSourceSize.x)/this.resolution,Math.floor(e.spriteSourceSize.y)/this.resolution,Math.floor(i.w)/this.resolution,Math.floor(i.h)/this.resolution)),this.textures[t]=new g.g({source:this.textureSource,frame:s,orig:a,trim:r,rotate:e.rotated?2:0,defaultAnchor:e.anchor,defaultBorders:e.borders,label:t.toString()})}s++}}_processAnimations(){const t=this.data.animations||{};for(const e in t){this.animations[e]=[];for(let s=0;s<t[e].length;s++){const i=t[e][s];this.animations[e].push(this.textures[i])}}}_parseComplete(){const t=this._callback;this._callback=null,this._batchIndex=0,t.call(this,this.textures)}_nextBatch(){this._processFrames(this._batchIndex*t.BATCH_SIZE),this._batchIndex++,setTimeout(()=>{this._batchIndex*t.BATCH_SIZE<this._frameKeys.length?this._nextBatch():(this._processAnimations(),this._parseComplete())},0)}destroy(t=!1){for(const t in this.textures)this.textures[t].destroy();this._frames=null,this._frameKeys=null,this.data=null,this.textures=null,t&&(this._texture?.destroy(),this.textureSource.destroy()),this._texture=null,this.textureSource=null,this.linkedSheets=[]}};_.BATCH_SIZE=1e3;let b=_;const v=["jpg","png","jpeg","avif","webp","basis","etc2","bc7","bc6h","bc5","bc4","bc3","bc2","bc1","eac","astc"];function w(t,e,s){const i={};if(t.forEach(t=>{i[t]=e}),Object.keys(e.textures).forEach(t=>{i[`${e.cachePrefix}${t}`]=e.textures[t]}),!s){const s=l.dirname(t[0]);e.linkedSheets.forEach((t,r)=>{const n=w([`${s}/${e.data.meta.related_multi_packs[r]}`],t,!0);Object.assign(i,n)})}return i}const C={extension:i.Ag.Asset,cache:{test:t=>t instanceof b,getCacheableAssets:(t,e)=>w(t,e,!1)},resolver:{extension:{type:i.Ag.ResolveParser,name:"resolveSpritesheet"},test:t=>{const e=t.split("?")[0].split("."),s=e.pop(),i=e.pop();return"json"===s&&v.includes(i)},parse:t=>{const e=t.split(".");return{resolution:parseFloat(f.RETINA_PREFIX.exec(t)?.[1]??"1"),format:e[e.length-2],src:t}}},loader:{name:"spritesheetLoader",id:"spritesheet",extension:{type:i.Ag.LoadParser,priority:r.Normal,name:"spritesheetLoader"},testParse:async(t,e)=>".json"===l.extname(e.src).toLowerCase()&&!!t.frames,async parse(t,e,s){const{texture:i,imageFilename:r,textureOptions:n,cachePrefix:a}=e?.data??{};let o,h=l.dirname(e.src);if(h&&h.lastIndexOf("/")!==h.length-1&&(h+="/"),i instanceof g.g)o=i;else{const i=m(h+(r??t.meta.image),e.src);o=(await s.load([{src:i,data:n}]))[i]}const u=new b({texture:o.source,data:t,cachePrefix:a});await u.parse();const c=t?.meta?.related_multi_packs;if(Array.isArray(c)){const t=[];for(const i of c){if("string"!=typeof i)continue;let r=h+i;e.data?.ignoreMultiPack||(r=m(r,e.src),t.push(s.load({src:r,data:{textureOptions:n,ignoreMultiPack:!0}})))}const i=await Promise.all(t);u.linkedSheets=i,i.forEach(t=>{t.linkedSheets=[u].concat(u.linkedSheets.filter(e=>e!==t))})}return u},async unload(t,e,s){await s.unload(t.textureSource._sourceOrigin),t.destroy(!1)}}};i.XO.add(C)},6512:(t,e,s)=>{"use strict";s.d(e,{u:()=>n});const i=["precision mediump float;","void main(void){","float test = 0.1;","%forloop%","gl_FragColor = vec4(0.0);","}"].join("\n");function r(t){let e="";for(let s=0;s<t;++s)s>0&&(e+="\nelse "),s<t-1&&(e+=`if(test == ${s}.0){}`);return e}function n(t,e){if(0===t)throw new Error("Invalid value of `0` passed to `checkMaxIfStatementsInShader`");const s=e.createShader(e.FRAGMENT_SHADER);try{for(;;){const n=i.replace(/%forloop%/gi,r(t));if(e.shaderSource(s,n),e.compileShader(s),e.getShaderParameter(s,e.COMPILE_STATUS))break;t=t/2|0}}finally{e.deleteShader(s)}return t}},6557:(t,e,s)=>{"use strict";var i=s(1979),r=s(8507),n=s(583),a=s(4492);const o=[];function h(t={}){const e=t&&t.resource,s=e?t.resource:t,i=e?t:{resource:t};for(let t=0;t<o.length;t++){const e=o[t];if(e.test(s))return new e(i)}throw new Error(`Could not find a source type for resource: ${i.resource}`)}r.XO.handleByList(r.Ag.TextureSource,o),a.g.from=function(t,e=!1){return"string"==typeof t?i.l.get(t):t instanceof n.v?new a.g({source:t}):function(t={},e=!1){const s=t&&t.resource,r=s?t.resource:t,n=s?t:{resource:t};if(!e&&i.l.has(r))return i.l.get(r);const o=new a.g({source:h(n)});return o.on("destroy",()=>{i.l.has(r)&&i.l.remove(r)}),e||i.l.set(r,o),o}(t,e)},n.v.from=h},6665:(t,e,s)=>{"use strict";s.d(e,{b:()=>i,m:()=>r});const i={name:"round-pixels-bit",vertex:{header:"\n            fn roundPixels(position: vec2<f32>, targetSize: vec2<f32>) -> vec2<f32>\n            {\n                return (floor(((position * 0.5 + 0.5) * targetSize) + 0.5) / targetSize) * 2.0 - 1.0;\n            }\n        "}},r={name:"round-pixels-bit",vertex:{header:"\n            vec2 roundPixels(vec2 position, vec2 targetSize)\n            {\n                return (floor(((position * 0.5 + 0.5) * targetSize) + 0.5) / targetSize) * 2.0 - 1.0;\n            }\n        "}}},6736:(t,e,s)=>{"use strict";function i(t,e){const s=t.byteLength/8|0,i=new Float64Array(t,0,s);new Float64Array(e,0,s).set(i);const r=t.byteLength-8*s;if(r>0){const i=new Uint8Array(t,8*s,r);new Uint8Array(e,8*s,r).set(i)}}s.d(e,{W:()=>i})},6844:(t,e,s)=>{"use strict";s.d(e,{k:()=>h});var i=s(2812),r=s(4492),n=s(2048),a=s(4670),o=s(4985);class h extends o.l{constructor(t=r.g.EMPTY){t instanceof r.g&&(t={texture:t});const{texture:e=r.g.EMPTY,anchor:s,roundPixels:n,width:a,height:o,...h}=t;super({label:"Sprite",...h}),this.renderPipeId="sprite",this.batched=!0,this._visualBounds={minX:0,maxX:1,minY:0,maxY:0},this._anchor=new i.o({_onUpdate:()=>{this.onViewUpdate()}}),s?this.anchor=s:e.defaultAnchor&&(this.anchor=e.defaultAnchor),this.texture=e,this.allowChildren=!1,this.roundPixels=n??!1,void 0!==a&&(this.width=a),void 0!==o&&(this.height=o)}static from(t,e=!1){return t instanceof r.g?new h(t):new h(r.g.from(t,e))}set texture(t){t||(t=r.g.EMPTY);const e=this._texture;e!==t&&(e&&e.dynamic&&e.off("update",this.onViewUpdate,this),t.dynamic&&t.on("update",this.onViewUpdate,this),this._texture=t,this._width&&this._setWidth(this._width,this._texture.orig.width),this._height&&this._setHeight(this._height,this._texture.orig.height),this.onViewUpdate())}get texture(){return this._texture}get visualBounds(){return(0,n.y)(this._visualBounds,this._anchor,this._texture),this._visualBounds}get sourceBounds(){return(0,a.t6)("8.6.1","Sprite.sourceBounds is deprecated, use visualBounds instead."),this.visualBounds}updateBounds(){const t=this._anchor,e=this._texture,s=this._bounds,{width:i,height:r}=e.orig;s.minX=-t._x*i,s.maxX=s.minX+i,s.minY=-t._y*r,s.maxY=s.minY+r}destroy(t=!1){if(super.destroy(t),"boolean"==typeof t?t:t?.texture){const e="boolean"==typeof t?t:t?.textureSource;this._texture.destroy(e)}this._texture=null,this._visualBounds=null,this._bounds=null,this._anchor=null,this._gpuData=null}get anchor(){return this._anchor}set anchor(t){"number"==typeof t?this._anchor.set(t):this._anchor.copyFrom(t)}get width(){return Math.abs(this.scale.x)*this._texture.orig.width}set width(t){this._setWidth(t,this._texture.orig.width),this._width=t}get height(){return Math.abs(this.scale.y)*this._texture.orig.height}set height(t){this._setHeight(t,this._texture.orig.height),this._height=t}getSize(t){return t||(t={}),t.width=Math.abs(this.scale.x)*this._texture.orig.width,t.height=Math.abs(this.scale.y)*this._texture.orig.height,t}setSize(t,e){"object"==typeof t?(e=t.height??t.width,t=t.width):e??(e=t),void 0!==t&&this._setWidth(t,this._texture.orig.width),void 0!==e&&this._setHeight(e,this._texture.orig.height)}}},6954:(t,e,s)=>{"use strict";s.d(e,{G:()=>a});var i=s(9313),r=s(4676);const n=new i.u;class a{constructor(){this.packAsQuad=!1,this.batcherName="default",this.topology="triangle-list",this.applyTransform=!0,this.roundPixels=0,this._batcher=null,this._batch=null}get uvs(){return this.geometryData.uvs}get positions(){return this.geometryData.vertices}get indices(){return this.geometryData.indices}get blendMode(){return this.renderable&&this.applyTransform?this.renderable.groupBlendMode:"normal"}get color(){const t=this.baseColor,e=t>>16|65280&t|(255&t)<<16,s=this.renderable;return s?(0,r.u)(e,s.groupColor)+(this.alpha*s.groupAlpha*255<<24):e+(255*this.alpha<<24)}get transform(){return this.renderable?.groupTransform||n}copyTo(t){t.indexOffset=this.indexOffset,t.indexSize=this.indexSize,t.attributeOffset=this.attributeOffset,t.attributeSize=this.attributeSize,t.baseColor=this.baseColor,t.alpha=this.alpha,t.texture=this.texture,t.geometryData=this.geometryData,t.topology=this.topology}reset(){this.applyTransform=!0,this.renderable=null,this.topology="triangle-list"}destroy(){this.renderable=null,this.texture=null,this.geometryData=null,this._batcher=null,this._batch=null}}},7073:(t,e,s)=>{"use strict";s.d(e,{M:()=>n,d:()=>a});var i=s(8507),r=s(2571);class n{static init(){globalThis.__PIXI_APP_INIT__?.(this,r.xv)}static destroy(){}}n.extension=i.Ag.Application;class a{constructor(t){this._renderer=t}init(){globalThis.__PIXI_RENDERER_INIT__?.(this._renderer,r.xv)}destroy(){this._renderer=null}}a.extension={type:[i.Ag.WebGLSystem,i.Ag.WebGPUSystem],name:"initHook",priority:-10}},7269:(t,e,s)=>{"use strict";s.d(e,{n:()=>n});var i=s(9313),r=s(2208);function n(t,e,s){return e.clear(),s||(s=i.u.IDENTITY),a(t,e,s,t,!0),e.isValid||e.set(0,0,0,0),e}function a(t,e,s,n,o){let h;if(o)h=r.u.get(),h=s.copyTo(h);else{if(!t.visible||!t.measurable)return;t.updateLocalTransform();const e=t.localTransform;h=r.u.get(),h.appendFrom(e,s)}const l=e,u=!!t.effects.length;if(u&&(e=r.o.get().clear()),t.boundsArea)e.addRect(t.boundsArea,h);else{t.renderPipeId&&(e.matrix=h,e.addBounds(t.bounds));const s=t.children;for(let t=0;t<s.length;t++)a(s[t],e,h,n,!1)}if(u){for(let s=0;s<t.effects.length;s++)t.effects[s].addLocalBounds?.(e,n);l.addBounds(e,i.u.IDENTITY),r.o.return(e)}r.u.return(h)}},7276:(t,e,s)=>{"use strict";s.d(e,{_:()=>p});var i=s(2577),r=s(1761),n=s(9313),a=s(8293),o=s(4492),h=s(133),l=s(4670),u=s(2698);const c=[{offset:0,color:"white"},{offset:1,color:"black"}],d=class t{constructor(...e){this.uid=(0,h.L)("fillGradient"),this._tick=0,this.type="linear",this.colorStops=[];let s=function(t){let e=t[0]??{};return("number"==typeof e||t[1])&&((0,l.t6)("8.5.2","use options object instead"),e={type:"linear",start:{x:t[0],y:t[1]},end:{x:t[2],y:t[3]},textureSpace:t[4],textureSize:t[5]??p.defaultLinearOptions.textureSize}),e}(e);s={..."radial"===s.type?t.defaultRadialOptions:t.defaultLinearOptions,...(0,u.S)(s)},this._textureSize=s.textureSize,this._wrapMode=s.wrapMode,"radial"===s.type?(this.center=s.center,this.outerCenter=s.outerCenter??this.center,this.innerRadius=s.innerRadius,this.outerRadius=s.outerRadius,this.scale=s.scale,this.rotation=s.rotation):(this.start=s.start,this.end=s.end),this.textureSpace=s.textureSpace,this.type=s.type,s.colorStops.forEach(t=>{this.addColorStop(t.offset,t.color)})}addColorStop(t,e){return this.colorStops.push({offset:t,color:i.Q.shared.setValue(e).toHexa()}),this}buildLinearGradient(){if(this.texture)return;let{x:t,y:e}=this.start,{x:s,y:i}=this.end,r=s-t,h=i-e;const l=r<0||h<0;if("clamp-to-edge"===this._wrapMode){if(r<0){const e=t;t=s,s=e,r*=-1}if(h<0){const t=e;e=i,i=t,h*=-1}}const u=this.colorStops.length?this.colorStops:c,d=this._textureSize,{canvas:p,context:g}=m(d,1),x=l?g.createLinearGradient(this._textureSize,0,0,0):g.createLinearGradient(0,0,this._textureSize,0);f(x,u),g.fillStyle=x,g.fillRect(0,0,d,1),this.texture=new o.g({source:new a.b({resource:p,addressMode:this._wrapMode})});const y=Math.sqrt(r*r+h*h),_=Math.atan2(h,r),b=new n.u;b.scale(y/d,1),b.rotate(_),b.translate(t,e),"local"===this.textureSpace&&b.scale(d,d),this.transform=b}buildGradient(){this.texture||this._tick++,"linear"===this.type?this.buildLinearGradient():this.buildRadialGradient()}buildRadialGradient(){if(this.texture)return;const t=this.colorStops.length?this.colorStops:c,e=this._textureSize,{canvas:s,context:i}=m(e,e),{x:r,y:h}=this.center,{x:l,y:u}=this.outerCenter,d=this.innerRadius,p=this.outerRadius,g=l-p,x=u-p,y=e/(2*p),_=(r-g)*y,b=(h-x)*y,v=i.createRadialGradient(_,b,d*y,(l-g)*y,(u-x)*y,p*y);f(v,t),i.fillStyle=t[t.length-1].color,i.fillRect(0,0,e,e),i.fillStyle=v,i.translate(_,b),i.rotate(this.rotation),i.scale(1,this.scale),i.translate(-_,-b),i.fillRect(0,0,e,e),this.texture=new o.g({source:new a.b({resource:s,addressMode:this._wrapMode})});const w=new n.u;w.scale(1/y,1/y),w.translate(g,x),"local"===this.textureSpace&&w.scale(e,e),this.transform=w}destroy(){this.texture?.destroy(!0),this.texture=null,this.transform=null,this.colorStops=[],this.start=null,this.end=null,this.center=null,this.outerCenter=null}get styleKey(){return`fill-gradient-${this.uid}-${this._tick}`}};d.defaultLinearOptions={start:{x:0,y:0},end:{x:0,y:1},colorStops:[],textureSpace:"local",type:"linear",textureSize:256,wrapMode:"clamp-to-edge"},d.defaultRadialOptions={center:{x:.5,y:.5},innerRadius:0,outerRadius:.5,colorStops:[],scale:1,textureSpace:"local",type:"radial",textureSize:256,wrapMode:"clamp-to-edge"};let p=d;function f(t,e){for(let s=0;s<e.length;s++){const i=e[s];t.addColorStop(i.offset,i.color)}}function m(t,e){const s=r.e.get().createCanvas(t,e),i=s.getContext("2d");return{canvas:s,context:i}}},7309:(t,e,s)=>{"use strict";s.d(e,{R:()=>a});var i=s(4458);class r{constructor(t,e=null,s=0,i=!1){this.next=null,this.previous=null,this._destroyed=!1,this._fn=t,this._context=e,this.priority=s,this._once=i}match(t,e=null){return this._fn===t&&this._context===e}emit(t){this._fn&&(this._context?this._fn.call(this._context,t):this._fn(t));const e=this.next;return this._once&&this.destroy(!0),this._destroyed&&(this.next=null),e}connect(t){this.previous=t,t.next&&(t.next.previous=this),this.next=t.next,t.next=this}destroy(t=!1){this._destroyed=!0,this._fn=null,this._context=null,this.previous&&(this.previous.next=this.next),this.next&&(this.next.previous=this.previous);const e=this.next;return this.next=t?null:e,this.previous=null,e}}const n=class t{constructor(){this.autoStart=!1,this.deltaTime=1,this.lastTime=-1,this.speed=1,this.started=!1,this._requestId=null,this._maxElapsedMS=100,this._minElapsedMS=0,this._protected=!1,this._lastFrame=-1,this._head=new r(null,null,1/0),this.deltaMS=1/t.targetFPMS,this.elapsedMS=1/t.targetFPMS,this._tick=t=>{this._requestId=null,this.started&&(this.update(t),this.started&&null===this._requestId&&this._head.next&&(this._requestId=requestAnimationFrame(this._tick)))}}_requestIfNeeded(){null===this._requestId&&this._head.next&&(this.lastTime=performance.now(),this._lastFrame=this.lastTime,this._requestId=requestAnimationFrame(this._tick))}_cancelIfNeeded(){null!==this._requestId&&(cancelAnimationFrame(this._requestId),this._requestId=null)}_startIfPossible(){this.started?this._requestIfNeeded():this.autoStart&&this.start()}add(t,e,s=i.d.NORMAL){return this._addListener(new r(t,e,s))}addOnce(t,e,s=i.d.NORMAL){return this._addListener(new r(t,e,s,!0))}_addListener(t){let e=this._head.next,s=this._head;if(e){for(;e;){if(t.priority>e.priority){t.connect(s);break}s=e,e=e.next}t.previous||t.connect(s)}else t.connect(s);return this._startIfPossible(),this}remove(t,e){let s=this._head.next;for(;s;)s=s.match(t,e)?s.destroy():s.next;return this._head.next||this._cancelIfNeeded(),this}get count(){if(!this._head)return 0;let t=0,e=this._head;for(;e=e.next;)t++;return t}start(){this.started||(this.started=!0,this._requestIfNeeded())}stop(){this.started&&(this.started=!1,this._cancelIfNeeded())}destroy(){if(!this._protected){this.stop();let t=this._head.next;for(;t;)t=t.destroy(!0);this._head.destroy(),this._head=null}}update(e=performance.now()){let s;if(e>this.lastTime){if(s=this.elapsedMS=e-this.lastTime,s>this._maxElapsedMS&&(s=this._maxElapsedMS),s*=this.speed,this._minElapsedMS){const t=e-this._lastFrame|0;if(t<this._minElapsedMS)return;this._lastFrame=e-t%this._minElapsedMS}this.deltaMS=s,this.deltaTime=this.deltaMS*t.targetFPMS;const i=this._head;let r=i.next;for(;r;)r=r.emit(this);i.next||this._cancelIfNeeded()}else this.deltaTime=this.deltaMS=this.elapsedMS=0;this.lastTime=e}get FPS(){return 1e3/this.elapsedMS}get minFPS(){return 1e3/this._maxElapsedMS}set minFPS(e){const s=Math.min(this.maxFPS,e),i=Math.min(Math.max(0,s)/1e3,t.targetFPMS);this._maxElapsedMS=1/i}get maxFPS(){return this._minElapsedMS?Math.round(1e3/this._minElapsedMS):0}set maxFPS(t){if(0===t)this._minElapsedMS=0;else{const e=Math.max(this.minFPS,t);this._minElapsedMS=1/(e/1e3)}}static get shared(){if(!t._shared){const e=t._shared=new t;e.autoStart=!0,e._protected=!0}return t._shared}static get system(){if(!t._system){const e=t._system=new t;e.autoStart=!0,e._protected=!0}return t._system}};n.targetFPMS=.06;let a=n},7457:(t,e,s)=>{"use strict";s.d(e,{mc:()=>H,u:()=>Y,ig:()=>V,fR:()=>$});var i=s(4486),r=s(2577),n=s(8507),a=s(9313),o=s(1652),h=s(2812),l=s(133),u=s(4670),c=s(268),d=s(8655);const p={get isCachedAsTexture(){return!!this.renderGroup?.isCachedAsTexture},cacheAsTexture(t){"boolean"==typeof t&&!1===t?this.disableRenderGroup():(this.enableRenderGroup(),this.renderGroup.enableCacheAsTexture(!0===t?{}:t))},updateCacheTexture(){this.renderGroup?.updateCacheTexture()},get cacheAsBitmap(){return this.isCachedAsTexture},set cacheAsBitmap(t){(0,u.t6)("v8.6.0","cacheAsBitmap is deprecated, use cacheAsTexture instead."),this.cacheAsTexture(t)}};var f=s(9903);const m={allowChildren:!0,removeChildren(t=0,e){const s=e??this.children.length,i=s-t,r=[];if(i>0&&i<=s){for(let e=s-1;e>=t;e--){const t=this.children[e];t&&(r.push(t),t.parent=null)}(0,f.d)(this.children,t,s);const e=this.renderGroup||this.parentRenderGroup;e&&e.removeChildren(r);for(let t=0;t<r.length;++t){const e=r[t];e.parentRenderLayer?.detach(e),this.emit("childRemoved",e,this,t),r[t].emit("removed",this)}return r.length>0&&this._didViewChangeTick++,r}if(0===i&&0===this.children.length)return r;throw new RangeError("removeChildren: numeric values are outside the acceptable range.")},removeChildAt(t){const e=this.getChildAt(t);return this.removeChild(e)},getChildAt(t){if(t<0||t>=this.children.length)throw new Error(`getChildAt: Index (${t}) does not exist.`);return this.children[t]},setChildIndex(t,e){if(e<0||e>=this.children.length)throw new Error(`The index ${e} supplied is out of bounds ${this.children.length}`);this.getChildIndex(t),this.addChildAt(t,e)},getChildIndex(t){const e=this.children.indexOf(t);if(-1===e)throw new Error("The supplied Container must be a child of the caller");return e},addChildAt(t,e){this.allowChildren||(0,u.t6)(u.lj,"addChildAt: Only Containers will be allowed to add children in v8.0.0");const{children:s}=this;if(e<0||e>s.length)throw new Error(`${t}addChildAt: The index ${e} supplied is out of bounds ${s.length}`);if(t.parent){const s=t.parent.children.indexOf(t);if(t.parent===this&&s===e)return t;-1!==s&&t.parent.children.splice(s,1)}e===s.length?s.push(t):s.splice(e,0,t),t.parent=this,t.didChange=!0,t._updateFlags=15;const i=this.renderGroup||this.parentRenderGroup;return i&&i.addChild(t),this.sortableChildren&&(this.sortDirty=!0),this.emit("childAdded",t,this,e),t.emit("added",this),t},swapChildren(t,e){if(t===e)return;const s=this.getChildIndex(t),i=this.getChildIndex(e);this.children[s]=e,this.children[i]=t;const r=this.renderGroup||this.parentRenderGroup;r&&(r.structureDidChange=!0),this._didContainerChangeTick++},removeFromParent(){this.parent?.removeChild(this)},reparentChild(...t){return 1===t.length?this.reparentChildAt(t[0],this.children.length):(t.forEach(t=>this.reparentChildAt(t,this.children.length)),t[0])},reparentChildAt(t,e){if(t.parent===this)return this.setChildIndex(t,e),t;const s=t.worldTransform.clone();t.removeFromParent(),this.addChildAt(t,e);const i=this.worldTransform.clone();return i.invert(),s.prepend(i),t.setFromMatrix(s),t},replaceChild(t,e){t.updateLocalTransform(),this.addChildAt(e,this.getChildIndex(t)),e.setFromMatrix(t.localTransform),e.updateLocalTransform(),this.removeChild(t)}},g={collectRenderables(t,e,s){this.parentRenderLayer&&this.parentRenderLayer!==s||this.globalDisplayStatus<7||!this.includeInBuild||(this.sortableChildren&&this.sortChildren(),this.isSimple?this.collectRenderablesSimple(t,e,s):this.renderGroup?e.renderPipes.renderGroup.addRenderGroup(this.renderGroup,t):this.collectRenderablesWithEffects(t,e,s))},collectRenderablesSimple(t,e,s){const i=this.children,r=i.length;for(let n=0;n<r;n++)i[n].collectRenderables(t,e,s)},collectRenderablesWithEffects(t,e,s){const{renderPipes:i}=e;for(let e=0;e<this.effects.length;e++){const s=this.effects[e];i[s.pipe].push(s,this,t)}this.collectRenderablesSimple(t,e,s);for(let e=this.effects.length-1;e>=0;e--){const s=this.effects[e];i[s.pipe].pop(s,this,t)}}};var x=s(9049);const y=new class{constructor(){this._effectClasses=[],this._tests=[],this._initialized=!1}init(){this._initialized||(this._initialized=!0,this._effectClasses.forEach(t=>{this.add({test:t.test,maskClass:t})}))}add(t){this._tests.push(t)}getMaskEffect(t){this._initialized||this.init();for(let e=0;e<this._tests.length;e++){const s=this._tests[e];if(s.test(t))return d.Z.get(s.maskClass,t)}return t}returnMaskEffect(t){d.Z.return(t)}};n.XO.handleByList(n.Ag.MaskEffect,y._effectClasses);const _={_maskEffect:null,_maskOptions:{inverse:!1},_filterEffect:null,effects:[],_markStructureAsChanged(){const t=this.renderGroup||this.parentRenderGroup;t&&(t.structureDidChange=!0)},addEffect(t){-1===this.effects.indexOf(t)&&(this.effects.push(t),this.effects.sort((t,e)=>t.priority-e.priority),this._markStructureAsChanged(),this._updateIsSimple())},removeEffect(t){const e=this.effects.indexOf(t);-1!==e&&(this.effects.splice(e,1),this._markStructureAsChanged(),this._updateIsSimple())},set mask(t){const e=this._maskEffect;e?.mask!==t&&(e&&(this.removeEffect(e),y.returnMaskEffect(e),this._maskEffect=null),null!=t&&(this._maskEffect=y.getMaskEffect(t),this.addEffect(this._maskEffect)))},get mask(){return this._maskEffect?.mask},setMask(t){this._maskOptions={...this._maskOptions,...t},t.mask&&(this.mask=t.mask),this._markStructureAsChanged()},set filters(t){!Array.isArray(t)&&t&&(t=[t]);const e=this._filterEffect||(this._filterEffect=new x.a),s=t?.length>0,i=s!==e.filters?.length>0;t=Array.isArray(t)?t.slice(0):t,e.filters=Object.freeze(t),i&&(s?this.addEffect(e):(this.removeEffect(e),e.filters=t??null))},get filters(){return this._filterEffect?.filters},set filterArea(t){this._filterEffect||(this._filterEffect=new x.a),this._filterEffect.filterArea=t},get filterArea(){return this._filterEffect?.filterArea}},b={label:null,get name(){return(0,u.t6)(u.lj,"Container.name property has been removed, use Container.label instead"),this.label},set name(t){(0,u.t6)(u.lj,"Container.name property has been removed, use Container.label instead"),this.label=t},getChildByName(t,e=!1){return this.getChildByLabel(t,e)},getChildByLabel(t,e=!1){const s=this.children;for(let e=0;e<s.length;e++){const i=s[e];if(i.label===t||t instanceof RegExp&&t.test(i.label))return i}if(e)for(let e=0;e<s.length;e++){const i=s[e].getChildByLabel(t,!0);if(i)return i}return null},getChildrenByLabel(t,e=!1,s=[]){const i=this.children;for(let e=0;e<i.length;e++){const r=i[e];(r.label===t||t instanceof RegExp&&t.test(r.label))&&s.push(r)}if(e)for(let e=0;e<i.length;e++)i[e].getChildrenByLabel(t,!0,s);return s}};var v=s(9636),w=s(2208);const C=new a.u,A={getFastGlobalBounds(t,e){e||(e=new v.c),e.clear(),this._getGlobalBoundsRecursive(!!t,e,this.parentRenderLayer),e.isValid||e.set(0,0,0,0);const s=this.renderGroup||this.parentRenderGroup;return e.applyMatrix(s.worldTransform),e},_getGlobalBoundsRecursive(t,e,s){let i=e;if(t&&this.parentRenderLayer&&this.parentRenderLayer!==s)return;if(7!==this.localDisplayStatus||!this.measurable)return;const r=!!this.effects.length;if((this.renderGroup||r)&&(i=w.o.get().clear()),this.boundsArea)e.addRect(this.boundsArea,this.worldTransform);else{if(this.renderPipeId){const t=this.bounds;i.addFrame(t.minX,t.minY,t.maxX,t.maxY,this.groupTransform)}const e=this.children;for(let r=0;r<e.length;r++)e[r]._getGlobalBoundsRecursive(t,i,s)}if(r){let t=!1;const s=this.renderGroup||this.parentRenderGroup;for(let e=0;e<this.effects.length;e++)this.effects[e].addBounds&&(t||(t=!0,i.applyMatrix(s.worldTransform)),this.effects[e].addBounds(i,!0));t&&i.applyMatrix(s.worldTransform.copyTo(C).invert()),e.addBounds(i),w.o.return(i)}else this.renderGroup&&(e.addBounds(i,this.relativeGroupTransform),w.o.return(i))}};var S=s(9443),M=s(753);function T(t){return((255&t)<<16)+(65280&t)+(t>>16&255)}const P={getGlobalAlpha(t){if(t)return this.renderGroup?this.renderGroup.worldAlpha:this.parentRenderGroup?this.parentRenderGroup.worldAlpha*this.alpha:this.alpha;let e=this.alpha,s=this.parent;for(;s;)e*=s.alpha,s=s.parent;return e},getGlobalTransform(t=new a.u,e){if(e)return t.copyFrom(this.worldTransform);this.updateLocalTransform();const s=(0,S.E)(this,w.u.get().identity());return t.appendFrom(this.localTransform,s),w.u.return(s),t},getGlobalTint(t){if(t)return this.renderGroup?T(this.renderGroup.worldColor):this.parentRenderGroup?T((0,M.j)(this.localColor,this.parentRenderGroup.worldColor)):this.tint;let e=this.localColor,s=this.parent;for(;s;)e=(0,M.j)(e,s.localColor),s=s.parent;return T(e)}};var k=s(7269);function E(t,e){const s=t.children;for(let t=0;t<s.length;t++){const i=s[t],r=i.uid,n=(65535&i._didViewChangeTick)<<16|65535&i._didContainerChangeTick,a=e.index;e.data[a]===r&&e.data[a+1]===n||(e.data[e.index]=r,e.data[e.index+1]=n,e.didChange=!0),e.index=a+2,i.children.length&&E(i,e)}return e.didChange}const R=new a.u,I={_localBoundsCacheId:-1,_localBoundsCacheData:null,_setWidth(t,e){const s=Math.sign(this.scale.x)||1;this.scale.x=0!==e?t/e*s:s},_setHeight(t,e){const s=Math.sign(this.scale.y)||1;this.scale.y=0!==e?t/e*s:s},getLocalBounds(){this._localBoundsCacheData||(this._localBoundsCacheData={data:[],index:1,didChange:!1,localBounds:new v.c});const t=this._localBoundsCacheData;return t.index=1,t.didChange=!1,t.data[0]!==this._didViewChangeTick&&(t.didChange=!0,t.data[0]=this._didViewChangeTick),E(this,t),t.didChange&&(0,k.n)(this,t.localBounds,R),t.localBounds},getBounds(t,e){return(0,S.f)(this,t,e||new v.c)}},B={_onRender:null,set onRender(t){const e=this.renderGroup||this.parentRenderGroup;if(!t)return this._onRender&&e?.removeOnRender(this),void(this._onRender=null);this._onRender||e?.addOnRender(this),this._onRender=t},get onRender(){return this._onRender}},G={_zIndex:0,sortDirty:!1,sortableChildren:!1,get zIndex(){return this._zIndex},set zIndex(t){this._zIndex!==t&&(this._zIndex=t,this.depthOfChildModified())},depthOfChildModified(){this.parent&&(this.parent.sortableChildren=!0,this.parent.sortDirty=!0),this.parentRenderGroup&&(this.parentRenderGroup.structureDidChange=!0)},sortChildren(){this.sortDirty&&(this.sortDirty=!1,this.children.sort(F))}};function F(t,e){return t._zIndex-e._zIndex}var O=s(5101);const L={getGlobalPosition(t=new O.b,e=!1){return this.parent?this.parent.toGlobal(this._position,t,e):(t.x=this._position.x,t.y=this._position.y),t},toGlobal(t,e,s=!1){const i=this.getGlobalTransform(w.u.get(),s);return e=i.apply(t,e),w.u.return(i),e},toLocal(t,e,s,i){e&&(t=e.toGlobal(t,s,i));const r=this.getGlobalTransform(w.u.get(),i);return s=r.applyInverse(t,s),w.u.return(r),s}};var D=s(3284);const U=new h.o(null),z=new h.o(null),N=new h.o(null,1,1),X=new h.o(null),V=1,Y=2,$=4;class H extends i.A{constructor(t={}){super(),this.uid=(0,l.L)("renderable"),this._updateFlags=15,this.renderGroup=null,this.parentRenderGroup=null,this.parentRenderGroupIndex=0,this.didChange=!1,this.didViewUpdate=!1,this.relativeRenderGroupDepth=0,this.children=[],this.parent=null,this.includeInBuild=!0,this.measurable=!0,this.isSimple=!0,this.parentRenderLayer=null,this.updateTick=-1,this.localTransform=new a.u,this.relativeGroupTransform=new a.u,this.groupTransform=this.relativeGroupTransform,this.destroyed=!1,this._position=new h.o(this,0,0),this._scale=N,this._pivot=z,this._origin=X,this._skew=U,this._cx=1,this._sx=0,this._cy=0,this._sy=1,this._rotation=0,this.localColor=16777215,this.localAlpha=1,this.groupAlpha=1,this.groupColor=16777215,this.groupColorAlpha=4294967295,this.localBlendMode="inherit",this.groupBlendMode="normal",this.localDisplayStatus=7,this.globalDisplayStatus=7,this._didContainerChangeTick=0,this._didViewChangeTick=0,this._didLocalTransformChangeId=-1,this.effects=[],function(t,e,s={}){for(const i in e)s[i]||void 0===e[i]||(t[i]=e[i])}(this,t,{children:!0,parent:!0,effects:!0}),t.children?.forEach(t=>this.addChild(t)),t.parent?.addChild(this)}static mixin(t){(0,u.t6)("8.8.0","Container.mixin is deprecated, please use extensions.mixin instead."),n.XO.mixin(H,t)}set _didChangeId(t){this._didViewChangeTick=t>>12&4095,this._didContainerChangeTick=4095&t}get _didChangeId(){return 4095&this._didContainerChangeTick|(4095&this._didViewChangeTick)<<12}addChild(...t){if(this.allowChildren||(0,u.t6)(u.lj,"addChild: Only Containers will be allowed to add children in v8.0.0"),t.length>1){for(let e=0;e<t.length;e++)this.addChild(t[e]);return t[0]}const e=t[0],s=this.renderGroup||this.parentRenderGroup;return e.parent===this?(this.children.splice(this.children.indexOf(e),1),this.children.push(e),s&&(s.structureDidChange=!0),e):(e.parent&&e.parent.removeChild(e),this.children.push(e),this.sortableChildren&&(this.sortDirty=!0),e.parent=this,e.didChange=!0,e._updateFlags=15,s&&s.addChild(e),this.emit("childAdded",e,this,this.children.length-1),e.emit("added",this),this._didViewChangeTick++,0!==e._zIndex&&e.depthOfChildModified(),e)}removeChild(...t){if(t.length>1){for(let e=0;e<t.length;e++)this.removeChild(t[e]);return t[0]}const e=t[0],s=this.children.indexOf(e);return s>-1&&(this._didViewChangeTick++,this.children.splice(s,1),this.renderGroup?this.renderGroup.removeChild(e):this.parentRenderGroup&&this.parentRenderGroup.removeChild(e),e.parentRenderLayer&&e.parentRenderLayer.detach(e),e.parent=null,this.emit("childRemoved",e,this,s),e.emit("removed",this)),e}_onUpdate(t){t&&t===this._skew&&this._updateSkew(),this._didContainerChangeTick++,this.didChange||(this.didChange=!0,this.parentRenderGroup&&this.parentRenderGroup.onChildUpdate(this))}set isRenderGroup(t){!!this.renderGroup!==t&&(t?this.enableRenderGroup():this.disableRenderGroup())}get isRenderGroup(){return!!this.renderGroup}enableRenderGroup(){if(this.renderGroup)return;const t=this.parentRenderGroup;t?.removeChild(this),this.renderGroup=d.Z.get(D.m,this),this.groupTransform=a.u.IDENTITY,t?.addChild(this),this._updateIsSimple()}disableRenderGroup(){if(!this.renderGroup)return;const t=this.parentRenderGroup;t?.removeChild(this),d.Z.return(this.renderGroup),this.renderGroup=null,this.groupTransform=this.relativeGroupTransform,t?.addChild(this),this._updateIsSimple()}_updateIsSimple(){this.isSimple=!this.renderGroup&&0===this.effects.length}get worldTransform(){return this._worldTransform||(this._worldTransform=new a.u),this.renderGroup?this._worldTransform.copyFrom(this.renderGroup.worldTransform):this.parentRenderGroup&&this._worldTransform.appendFrom(this.relativeGroupTransform,this.parentRenderGroup.worldTransform),this._worldTransform}get x(){return this._position.x}set x(t){this._position.x=t}get y(){return this._position.y}set y(t){this._position.y=t}get position(){return this._position}set position(t){this._position.copyFrom(t)}get rotation(){return this._rotation}set rotation(t){this._rotation!==t&&(this._rotation=t,this._onUpdate(this._skew))}get angle(){return this.rotation*o.bO}set angle(t){this.rotation=t*o.Td}get pivot(){return this._pivot===z&&(this._pivot=new h.o(this,0,0)),this._pivot}set pivot(t){this._pivot===z&&(this._pivot=new h.o(this,0,0),this._origin!==X&&(0,c.R)("Setting both a pivot and origin on a Container is not recommended. This can lead to unexpected behavior if not handled carefully.")),"number"==typeof t?this._pivot.set(t):this._pivot.copyFrom(t)}get skew(){return this._skew===U&&(this._skew=new h.o(this,0,0)),this._skew}set skew(t){this._skew===U&&(this._skew=new h.o(this,0,0)),this._skew.copyFrom(t)}get scale(){return this._scale===N&&(this._scale=new h.o(this,1,1)),this._scale}set scale(t){this._scale===N&&(this._scale=new h.o(this,0,0)),"string"==typeof t&&(t=parseFloat(t)),"number"==typeof t?this._scale.set(t):this._scale.copyFrom(t)}get origin(){return this._origin===X&&(this._origin=new h.o(this,0,0)),this._origin}set origin(t){this._origin===X&&(this._origin=new h.o(this,0,0),this._pivot!==z&&(0,c.R)("Setting both a pivot and origin on a Container is not recommended. This can lead to unexpected behavior if not handled carefully.")),"number"==typeof t?this._origin.set(t):this._origin.copyFrom(t)}get width(){return Math.abs(this.scale.x*this.getLocalBounds().width)}set width(t){const e=this.getLocalBounds().width;this._setWidth(t,e)}get height(){return Math.abs(this.scale.y*this.getLocalBounds().height)}set height(t){const e=this.getLocalBounds().height;this._setHeight(t,e)}getSize(t){t||(t={});const e=this.getLocalBounds();return t.width=Math.abs(this.scale.x*e.width),t.height=Math.abs(this.scale.y*e.height),t}setSize(t,e){const s=this.getLocalBounds();"object"==typeof t?(e=t.height??t.width,t=t.width):e??(e=t),void 0!==t&&this._setWidth(t,s.width),void 0!==e&&this._setHeight(e,s.height)}_updateSkew(){const t=this._rotation,e=this._skew;this._cx=Math.cos(t+e._y),this._sx=Math.sin(t+e._y),this._cy=-Math.sin(t-e._x),this._sy=Math.cos(t-e._x)}updateTransform(t){return this.position.set("number"==typeof t.x?t.x:this.position.x,"number"==typeof t.y?t.y:this.position.y),this.scale.set("number"==typeof t.scaleX?t.scaleX||1:this.scale.x,"number"==typeof t.scaleY?t.scaleY||1:this.scale.y),this.rotation="number"==typeof t.rotation?t.rotation:this.rotation,this.skew.set("number"==typeof t.skewX?t.skewX:this.skew.x,"number"==typeof t.skewY?t.skewY:this.skew.y),this.pivot.set("number"==typeof t.pivotX?t.pivotX:this.pivot.x,"number"==typeof t.pivotY?t.pivotY:this.pivot.y),this.origin.set("number"==typeof t.originX?t.originX:this.origin.x,"number"==typeof t.originY?t.originY:this.origin.y),this}setFromMatrix(t){t.decompose(this)}updateLocalTransform(){const t=this._didContainerChangeTick;if(this._didLocalTransformChangeId===t)return;this._didLocalTransformChangeId=t;const e=this.localTransform,s=this._scale,i=this._pivot,r=this._origin,n=this._position,a=s._x,o=s._y,h=i._x,l=i._y,u=-r._x,c=-r._y;e.a=this._cx*a,e.b=this._sx*a,e.c=this._cy*o,e.d=this._sy*o,e.tx=n._x-(h*e.a+l*e.c)+(u*e.a+c*e.c)-u,e.ty=n._y-(h*e.b+l*e.d)+(u*e.b+c*e.d)-c}set alpha(t){t!==this.localAlpha&&(this.localAlpha=t,this._updateFlags|=V,this._onUpdate())}get alpha(){return this.localAlpha}set tint(t){const e=r.Q.shared.setValue(t??16777215).toBgrNumber();e!==this.localColor&&(this.localColor=e,this._updateFlags|=V,this._onUpdate())}get tint(){return T(this.localColor)}set blendMode(t){this.localBlendMode!==t&&(this.parentRenderGroup&&(this.parentRenderGroup.structureDidChange=!0),this._updateFlags|=Y,this.localBlendMode=t,this._onUpdate())}get blendMode(){return this.localBlendMode}get visible(){return!!(2&this.localDisplayStatus)}set visible(t){const e=t?2:0;(2&this.localDisplayStatus)!==e&&(this.parentRenderGroup&&(this.parentRenderGroup.structureDidChange=!0),this._updateFlags|=$,this.localDisplayStatus^=2,this._onUpdate())}get culled(){return!(4&this.localDisplayStatus)}set culled(t){const e=t?0:4;(4&this.localDisplayStatus)!==e&&(this.parentRenderGroup&&(this.parentRenderGroup.structureDidChange=!0),this._updateFlags|=$,this.localDisplayStatus^=4,this._onUpdate())}get renderable(){return!!(1&this.localDisplayStatus)}set renderable(t){const e=t?1:0;(1&this.localDisplayStatus)!==e&&(this._updateFlags|=$,this.localDisplayStatus^=1,this.parentRenderGroup&&(this.parentRenderGroup.structureDidChange=!0),this._onUpdate())}get isRenderable(){return 7===this.localDisplayStatus&&this.groupAlpha>0}destroy(t=!1){if(this.destroyed)return;let e;if(this.destroyed=!0,this.children.length&&(e=this.removeChildren(0,this.children.length)),this.removeFromParent(),this.parent=null,this._maskEffect=null,this._filterEffect=null,this.effects=null,this._position=null,this._scale=null,this._pivot=null,this._origin=null,this._skew=null,this.emit("destroyed",this),this.removeAllListeners(),("boolean"==typeof t?t:t?.children)&&e)for(let s=0;s<e.length;++s)e[s].destroy(t);this.renderGroup?.destroy(),this.renderGroup=null}}n.XO.mixin(H,m,A,L,B,I,_,b,G,{cullArea:null,cullable:!1,cullableChildren:!0},p,P,g)},7729:(t,e,s)=>{"use strict";s.d(e,{C:()=>i});class i{constructor(t){this.items=[],this._name=t}emit(t,e,s,i,r,n,a,o){const{name:h,items:l}=this;for(let u=0,c=l.length;u<c;u++)l[u][h](t,e,s,i,r,n,a,o);return this}add(t){return t[this._name]&&(this.remove(t),this.items.push(t)),this}remove(t){const e=this.items.indexOf(t);return-1!==e&&this.items.splice(e,1),this}contains(t){return-1!==this.items.indexOf(t)}removeAll(){return this.items.length=0,this}destroy(){this.removeAll(),this.items=null,this._name=null}get empty(){return 0===this.items.length}get name(){return this._name}}},7952:(t,e,s)=>{"use strict";s.d(e,{X:()=>n});const i=Object.create(null),r=Object.create(null);function n(t,e){let s=r[t];return void 0===s&&(void 0===i[e]&&(i[e]=1),r[t]=s=i[e]++),s}},8133:t=>{t.exports=function(t){var r=[];return t.replace(s,function(t,s,n){var a=s.toLowerCase();for(n=function(t){var e=t.match(i);return e?e.map(Number):[]}(n),"m"==a&&n.length>2&&(r.push([s].concat(n.splice(0,2))),a="l",s="m"==s?"l":"L");;){if(n.length==e[a])return n.unshift(s),r.push(n);if(n.length<e[a])throw new Error("malformed path data");r.push([s].concat(n.splice(0,e[a])))}}),r};var e={a:7,c:6,h:1,l:2,m:2,q:4,s:4,t:2,v:1,z:0},s=/([astvzqmhlc])([^astvzqmhlc]*)/gi,i=/-?[0-9]*\.?[0-9]+(?:e[-+]?\d+)?/gi},8288:(t,e,s)=>{"use strict";s.d(e,{T:()=>Q});var i=s(4486),r=s(2577),n=s(9313),a=s(5101),o=s(4492),h=s(133),l=s(4670),u=s(9636),c=s(268),d=s(8133),p=s(9252);class f{constructor(t=0,e=0,s=0){this.type="circle",this.x=t,this.y=e,this.radius=s}clone(){return new f(this.x,this.y,this.radius)}contains(t,e){if(this.radius<=0)return!1;const s=this.radius*this.radius;let i=this.x-t,r=this.y-e;return i*=i,r*=r,i+r<=s}strokeContains(t,e,s,i=.5){if(0===this.radius)return!1;const r=this.x-t,n=this.y-e,a=this.radius,o=(1-i)*s,h=Math.sqrt(r*r+n*n);return h<=a+o&&h>a-(s-o)}getBounds(t){return t||(t=new p.M),t.x=this.x-this.radius,t.y=this.y-this.radius,t.width=2*this.radius,t.height=2*this.radius,t}copyFrom(t){return this.x=t.x,this.y=t.y,this.radius=t.radius,this}copyTo(t){return t.copyFrom(this),t}toString(){return`[pixi.js/math:Circle x=${this.x} y=${this.y} radius=${this.radius}]`}}class m{constructor(t=0,e=0,s=0,i=0){this.type="ellipse",this.x=t,this.y=e,this.halfWidth=s,this.halfHeight=i}clone(){return new m(this.x,this.y,this.halfWidth,this.halfHeight)}contains(t,e){if(this.halfWidth<=0||this.halfHeight<=0)return!1;let s=(t-this.x)/this.halfWidth,i=(e-this.y)/this.halfHeight;return s*=s,i*=i,s+i<=1}strokeContains(t,e,s,i=.5){const{halfWidth:r,halfHeight:n}=this;if(r<=0||n<=0)return!1;const a=s*(1-i),o=s-a,h=r-o,l=n-o,u=r+a,c=n+a,d=t-this.x,p=e-this.y;return d*d/(h*h)+p*p/(l*l)>1&&d*d/(u*u)+p*p/(c*c)<=1}getBounds(t){return t||(t=new p.M),t.x=this.x-this.halfWidth,t.y=this.y-this.halfHeight,t.width=2*this.halfWidth,t.height=2*this.halfHeight,t}copyFrom(t){return this.x=t.x,this.y=t.y,this.halfWidth=t.halfWidth,this.halfHeight=t.halfHeight,this}copyTo(t){return t.copyFrom(this),t}toString(){return`[pixi.js/math:Ellipse x=${this.x} y=${this.y} halfWidth=${this.halfWidth} halfHeight=${this.halfHeight}]`}}function g(t,e,s,i,r,n){const a=r-s,o=n-i,h=a*a+o*o;let l,u,c=-1;0!==h&&(c=((t-s)*a+(e-i)*o)/h),c<0?(l=s,u=i):c>1?(l=r,u=n):(l=s+c*a,u=i+c*o);const d=t-l,p=e-u;return d*d+p*p}class x{constructor(...t){this.type="polygon";let e=Array.isArray(t[0])?t[0]:t;if("number"!=typeof e[0]){const t=[];for(let s=0,i=e.length;s<i;s++)t.push(e[s].x,e[s].y);e=t}this.points=e,this.closePath=!0}isClockwise(){let t=0;const e=this.points,s=e.length;for(let i=0;i<s;i+=2){const r=e[i],n=e[i+1];t+=(e[(i+2)%s]-r)*(e[(i+3)%s]+n)}return t<0}containsPolygon(t){const e=this.getBounds(void 0),s=t.getBounds(void 0);if(!e.containsRect(s))return!1;const i=t.points;for(let t=0;t<i.length;t+=2){const e=i[t],s=i[t+1];if(!this.contains(e,s))return!1}return!0}clone(){const t=this.points.slice(),e=new x(t);return e.closePath=this.closePath,e}contains(t,e){let s=!1;const i=this.points.length/2;for(let r=0,n=i-1;r<i;n=r++){const i=this.points[2*r],a=this.points[2*r+1],o=this.points[2*n],h=this.points[2*n+1];a>e!=h>e&&t<(e-a)/(h-a)*(o-i)+i&&(s=!s)}return s}strokeContains(t,e,s,i=.5){const r=s*s,n=r*(1-i),a=r-n,{points:o}=this,h=o.length-(this.closePath?0:2);for(let s=0;s<h;s+=2){const i=o[s],r=o[s+1],h=o[(s+2)%o.length],l=o[(s+3)%o.length];if(g(t,e,i,r,h,l)<=(Math.sign((h-i)*(e-r)-(l-r)*(t-i))<0?a:n))return!0}return!1}getBounds(t){t||(t=new p.M);const e=this.points;let s=1/0,i=-1/0,r=1/0,n=-1/0;for(let t=0,a=e.length;t<a;t+=2){const a=e[t],o=e[t+1];s=a<s?a:s,i=a>i?a:i,r=o<r?o:r,n=o>n?o:n}return t.x=s,t.width=i-s,t.y=r,t.height=n-r,t}copyFrom(t){return this.points=t.points.slice(),this.closePath=t.closePath,this}copyTo(t){return t.copyFrom(this),t}toString(){return`[pixi.js/math:PolygoncloseStroke=${this.closePath}points=${this.points.reduce((t,e)=>`${t}, ${e}`,"")}]`}get lastX(){return this.points[this.points.length-2]}get lastY(){return this.points[this.points.length-1]}get x(){return(0,l.t6)("8.11.0","Polygon.lastX is deprecated, please use Polygon.lastX instead."),this.points[this.points.length-2]}get y(){return(0,l.t6)("8.11.0","Polygon.y is deprecated, please use Polygon.lastY instead."),this.points[this.points.length-1]}get startX(){return this.points[0]}get startY(){return this.points[1]}}const y=(t,e,s,i,r,n,a)=>{const o=t-s,h=e-i,l=Math.sqrt(o*o+h*h);return l>=r-n&&l<=r+a};class _{constructor(t=0,e=0,s=0,i=0,r=20){this.type="roundedRectangle",this.x=t,this.y=e,this.width=s,this.height=i,this.radius=r}getBounds(t){return t||(t=new p.M),t.x=this.x,t.y=this.y,t.width=this.width,t.height=this.height,t}clone(){return new _(this.x,this.y,this.width,this.height,this.radius)}copyFrom(t){return this.x=t.x,this.y=t.y,this.width=t.width,this.height=t.height,this}copyTo(t){return t.copyFrom(this),t}contains(t,e){if(this.width<=0||this.height<=0)return!1;if(t>=this.x&&t<=this.x+this.width&&e>=this.y&&e<=this.y+this.height){const s=Math.max(0,Math.min(this.radius,Math.min(this.width,this.height)/2));if(e>=this.y+s&&e<=this.y+this.height-s||t>=this.x+s&&t<=this.x+this.width-s)return!0;let i=t-(this.x+s),r=e-(this.y+s);const n=s*s;if(i*i+r*r<=n)return!0;if(i=t-(this.x+this.width-s),i*i+r*r<=n)return!0;if(r=e-(this.y+this.height-s),i*i+r*r<=n)return!0;if(i=t-(this.x+s),i*i+r*r<=n)return!0}return!1}strokeContains(t,e,s,i=.5){const{x:r,y:n,width:a,height:o,radius:h}=this,l=s*(1-i),u=s-l,c=r+h,d=n+h,p=r+a,f=n+o;return(t>=r-l&&t<=r+u||t>=p-u&&t<=p+l)&&e>=d&&e<=d+(o-2*h)||(e>=n-l&&e<=n+u||e>=f-u&&e<=f+l)&&t>=c&&t<=c+(a-2*h)||t<c&&e<d&&y(t,e,c,d,h,u,l)||t>p-h&&e<d&&y(t,e,p-h,d,h,u,l)||t>p-h&&e>f-h&&y(t,e,p-h,f-h,h,u,l)||t<c&&e>f-h&&y(t,e,c,f-h,h,u,l)}toString(){return`[pixi.js/math:RoundedRectangle x=${this.x} y=${this.y}width=${this.width} height=${this.height} radius=${this.radius}]`}}var b=s(6302);const v=1.1920929e-7;function w(t,e,s,i,r,n,a,o,h,l){let u=(1-Math.min(.99,Math.max(0,l??b.GH.defaultOptions.bezierSmoothness)))/1;return u*=u,function(t,e,s,i,r,n,a,o,h,l){C(t,e,s,i,r,n,a,o,h,l,0),h.push(a,o)}(e,s,i,r,n,a,o,h,t,u),t}function C(t,e,s,i,r,n,a,o,h,l,u){if(u>8)return;Math.PI;const c=(t+s)/2,d=(e+i)/2,p=(s+r)/2,f=(i+n)/2,m=(r+a)/2,g=(n+o)/2,x=(c+p)/2,y=(d+f)/2,_=(p+m)/2,b=(f+g)/2,w=(x+_)/2,A=(y+b)/2;if(u>0){let u=a-t,c=o-e;const d=Math.abs((s-a)*c-(i-o)*u),p=Math.abs((r-a)*c-(n-o)*u);if(d>v&&p>v){if((d+p)*(d+p)<=l*(u*u+c*c))return void h.push(w,A)}else if(d>v){if(d*d<=l*(u*u+c*c))return void h.push(w,A)}else if(p>v){if(p*p<=l*(u*u+c*c))return void h.push(w,A)}else if(u=w-(t+a)/2,c=A-(e+o)/2,u*u+c*c<=l)return void h.push(w,A)}C(t,e,c,d,x,y,w,A,h,l,u+1),C(w,A,_,b,m,g,a,o,h,l,u+1)}function A(t,e,s,i,r,n,a,o){let h=(1-Math.min(.99,Math.max(0,o??b.GH.defaultOptions.bezierSmoothness)))/1;return h*=h,function(t,e,s,i,r,n,a,o){S(a,t,e,s,i,r,n,o,0),a.push(r,n)}(e,s,i,r,n,a,t,h),t}function S(t,e,s,i,r,n,a,o,h){if(h>8)return;Math.PI;const l=(e+i)/2,u=(s+r)/2,c=(i+n)/2,d=(r+a)/2,p=(l+c)/2,f=(u+d)/2;let m=n-e,g=a-s;const x=Math.abs((i-n)*g-(r-a)*m);if(x>1.1920929e-7){if(x*x<=o*(m*m+g*g))return void t.push(p,f)}else if(m=p-(e+n)/2,g=f-(s+a)/2,m*m+g*g<=o)return void t.push(p,f);S(t,e,s,l,u,p,f,o,h+1),S(t,p,f,c,d,n,a,o,h+1)}function M(t,e,s,i,r,n,a,o){let h=Math.abs(r-n);(!a&&r>n||a&&n>r)&&(h=2*Math.PI-h),o||(o=Math.max(6,Math.floor(6*Math.pow(i,1/3)*(h/Math.PI))));let l=h/(o=Math.max(o,3)),u=r;l*=a?-1:1;for(let r=0;r<o+1;r++){const r=e+Math.cos(u)*i,n=s+Math.sin(u)*i;t.push(r,n),u+=l}}const T=2*Math.PI,P={centerX:0,centerY:0,ang1:0,ang2:0},k=({x:t,y:e},s,i,r,n,a,o,h)=>{const l=r*(t*=s)-n*(e*=i),u=n*t+r*e;return h.x=l+a,h.y=u+o,h};function E(t,e){const s=-1.5707963267948966===e?-.551915024494:4/3*Math.tan(e/4),i=1.5707963267948966===e?.551915024494:s,r=Math.cos(t),n=Math.sin(t),a=Math.cos(t+e),o=Math.sin(t+e);return[{x:r-n*i,y:n+r*i},{x:a+o*i,y:o-a*i},{x:a,y:o}]}const R=(t,e,s,i)=>{let r=t*s+e*i;return r>1&&(r=1),r<-1&&(r=-1),(t*i-e*s<0?-1:1)*Math.acos(r)};const I=new p.M;class B{constructor(t){this.shapePrimitives=[],this._currentPoly=null,this._bounds=new u.c,this._graphicsPath2D=t,this.signed=t.checkForHoles}moveTo(t,e){return this.startPoly(t,e),this}lineTo(t,e){this._ensurePoly();const s=this._currentPoly.points,i=s[s.length-2],r=s[s.length-1];return i===t&&r===e||s.push(t,e),this}arc(t,e,s,i,r,n){return this._ensurePoly(!1),M(this._currentPoly.points,t,e,s,i,r,n),this}arcTo(t,e,s,i,r){return this._ensurePoly(),function(t,e,s,i,r,n){const a=t[t.length-2],o=t[t.length-1]-s,h=a-e,l=r-s,u=i-e,c=Math.abs(o*u-h*l);if(c<1e-8||0===n)return void(t[t.length-2]===e&&t[t.length-1]===s||t.push(e,s));const d=o*o+h*h,p=l*l+u*u,f=o*l+h*u,m=n*Math.sqrt(d)/c,g=n*Math.sqrt(p)/c,x=m*f/d,y=g*f/p,_=m*u+g*h,b=m*l+g*o,v=h*(g+x),w=o*(g+x),C=u*(m+y),A=l*(m+y);M(t,_+e,b+s,n,Math.atan2(w-b,v-_),Math.atan2(A-b,C-_),h*l>u*o)}(this._currentPoly.points,t,e,s,i,r),this}arcToSvg(t,e,s,i,r,n,a){return function(t,e,s,i,r,n,a,o=0,h=0,l=0){if(0===n||0===a)return;const u=Math.sin(o*T/360),c=Math.cos(o*T/360),d=c*(e-i)/2+u*(s-r)/2,p=-u*(e-i)/2+c*(s-r)/2;if(0===d&&0===p)return;n=Math.abs(n),a=Math.abs(a);const f=Math.pow(d,2)/Math.pow(n,2)+Math.pow(p,2)/Math.pow(a,2);f>1&&(n*=Math.sqrt(f),a*=Math.sqrt(f)),((t,e,s,i,r,n,a,o,h,l,u,c,d)=>{const p=Math.pow(r,2),f=Math.pow(n,2),m=Math.pow(u,2),g=Math.pow(c,2);let x=p*f-p*g-f*m;x<0&&(x=0),x/=p*g+f*m,x=Math.sqrt(x)*(a===o?-1:1);const y=x*r/n*c,_=x*-n/r*u,b=l*y-h*_+(t+s)/2,v=h*y+l*_+(e+i)/2,w=(u-y)/r,C=(c-_)/n,A=(-u-y)/r,S=(-c-_)/n,M=R(1,0,w,C);let P=R(w,C,A,S);0===o&&P>0&&(P-=T),1===o&&P<0&&(P+=T),d.centerX=b,d.centerY=v,d.ang1=M,d.ang2=P})(e,s,i,r,n,a,h,l,u,c,d,p,P);let{ang1:m,ang2:g}=P;const{centerX:x,centerY:y}=P;let _=Math.abs(g)/(T/4);Math.abs(1-_)<1e-7&&(_=1);const b=Math.max(Math.ceil(_),1);g/=b;let v=t[t.length-2],C=t[t.length-1];const A={x:0,y:0};for(let e=0;e<b;e++){const e=E(m,g),{x:s,y:i}=k(e[0],n,a,c,u,x,y,A),{x:r,y:o}=k(e[1],n,a,c,u,x,y,A),{x:h,y:l}=k(e[2],n,a,c,u,x,y,A);w(t,v,C,s,i,r,o,h,l),v=h,C=l,m+=g}}(this._currentPoly.points,this._currentPoly.lastX,this._currentPoly.lastY,n,a,t,e,s,i,r),this}bezierCurveTo(t,e,s,i,r,n,a){this._ensurePoly();const o=this._currentPoly;return w(this._currentPoly.points,o.lastX,o.lastY,t,e,s,i,r,n,a),this}quadraticCurveTo(t,e,s,i,r){this._ensurePoly();const n=this._currentPoly;return A(this._currentPoly.points,n.lastX,n.lastY,t,e,s,i,r),this}closePath(){return this.endPoly(!0),this}addPath(t,e){this.endPoly(),e&&!e.isIdentity()&&(t=t.clone(!0)).transform(e);const s=this.shapePrimitives,i=s.length;for(let e=0;e<t.instructions.length;e++){const s=t.instructions[e];this[s.action](...s.data)}if(t.checkForHoles&&s.length-i>1){let t=null;for(let e=i;e<s.length;e++){const i=s[e];if("polygon"===i.shape.type){const r=i.shape,n=t?.shape;n&&n.containsPolygon(r)?(t.holes||(t.holes=[]),t.holes.push(i),s.copyWithin(e,e+1),s.length--,e--):t=i}}}return this}finish(t=!1){this.endPoly(t)}rect(t,e,s,i,r){return this.drawShape(new p.M(t,e,s,i),r),this}circle(t,e,s,i){return this.drawShape(new f(t,e,s),i),this}poly(t,e,s){const i=new x(t);return i.closePath=e,this.drawShape(i,s),this}regularPoly(t,e,s,i,r=0,n){i=Math.max(0|i,3);const a=-1*Math.PI/2+r,o=2*Math.PI/i,h=[];for(let r=0;r<i;r++){const i=a-r*o;h.push(t+s*Math.cos(i),e+s*Math.sin(i))}return this.poly(h,!0,n),this}roundPoly(t,e,s,i,r,n=0,a){if(i=Math.max(0|i,3),r<=0)return this.regularPoly(t,e,s,i,n);const o=s*Math.sin(Math.PI/i)-.001;r=Math.min(r,o);const h=-1*Math.PI/2+n,l=2*Math.PI/i,u=(i-2)*Math.PI/i/2;for(let n=0;n<i;n++){const i=n*l+h,o=t+s*Math.cos(i),c=e+s*Math.sin(i),d=i+Math.PI+u,p=i-Math.PI-u,f=o+r*Math.cos(d),m=c+r*Math.sin(d),g=o+r*Math.cos(p),x=c+r*Math.sin(p);0===n?this.moveTo(f,m):this.lineTo(f,m),this.quadraticCurveTo(o,c,g,x,a)}return this.closePath()}roundShape(t,e,s=!1,i){return t.length<3?this:(s?function(t,e,s,i){const r=(t,e)=>Math.sqrt((t.x-e.x)**2+(t.y-e.y)**2),n=(t,e,s)=>({x:t.x+(e.x-t.x)*s,y:t.y+(e.y-t.y)*s}),a=e.length;for(let o=0;o<a;o++){const h=e[(o+1)%a],l=h.radius??s;if(l<=0){0===o?t.moveTo(h.x,h.y):t.lineTo(h.x,h.y);continue}const u=e[o],c=e[(o+2)%a],d=r(u,h);let p;p=d<1e-4?h:n(h,u,Math.min(d/2,l)/d);const f=r(c,h);let m;m=f<1e-4?h:n(h,c,Math.min(f/2,l)/f),0===o?t.moveTo(p.x,p.y):t.lineTo(p.x,p.y),t.quadraticCurveTo(h.x,h.y,m.x,m.y,i)}}(this,t,e,i):function(t,e,s){const i=(t,e)=>{const s=e.x-t.x,i=e.y-t.y,r=Math.sqrt(s*s+i*i);return{len:r,nx:s/r,ny:i/r}},r=(e,s)=>{0===e?t.moveTo(s.x,s.y):t.lineTo(s.x,s.y)};let n=e[e.length-1];for(let a=0;a<e.length;a++){const o=e[a%e.length],h=o.radius??s;if(h<=0){r(a,o),n=o;continue}const l=e[(a+1)%e.length],u=i(o,n),c=i(o,l);if(u.len<1e-4||c.len<1e-4){r(a,o),n=o;continue}let d=Math.asin(u.nx*c.ny-u.ny*c.nx),p=1,f=!1;u.nx*c.nx-u.ny*-c.ny<0?d<0?d=Math.PI+d:(d=Math.PI-d,p=-1,f=!0):d>0&&(p=-1,f=!0);const m=d/2;let g,x=Math.abs(Math.cos(m)*h/Math.sin(m));x>Math.min(u.len/2,c.len/2)?(x=Math.min(u.len/2,c.len/2),g=Math.abs(x*Math.sin(m)/Math.cos(m))):g=h;const y=o.x+c.nx*x+-c.ny*g*p,_=o.y+c.ny*x+c.nx*g*p,b=Math.atan2(u.ny,u.nx)+Math.PI/2*p,v=Math.atan2(c.ny,c.nx)-Math.PI/2*p;0===a&&t.moveTo(y+Math.cos(b)*g,_+Math.sin(b)*g),t.arc(y,_,g,b,v,f),n=o}}(this,t,e),this.closePath())}filletRect(t,e,s,i,r){if(0===r)return this.rect(t,e,s,i);const n=Math.min(s,i)/2,a=Math.min(n,Math.max(-n,r)),o=t+s,h=e+i,l=a<0?-a:0,u=Math.abs(a);return this.moveTo(t,e+u).arcTo(t+l,e+l,t+u,e,u).lineTo(o-u,e).arcTo(o-l,e+l,o,e+u,u).lineTo(o,h-u).arcTo(o-l,h-l,t+s-u,h,u).lineTo(t+u,h).arcTo(t+l,h-l,t,h-u,u).closePath()}chamferRect(t,e,s,i,r,n){if(r<=0)return this.rect(t,e,s,i);const a=Math.min(r,Math.min(s,i)/2),o=t+s,h=e+i,l=[t+a,e,o-a,e,o,e+a,o,h-a,o-a,h,t+a,h,t,h-a,t,e+a];for(let t=l.length-1;t>=2;t-=2)l[t]===l[t-2]&&l[t-1]===l[t-3]&&l.splice(t-1,2);return this.poly(l,!0,n)}ellipse(t,e,s,i,r){return this.drawShape(new m(t,e,s,i),r),this}roundRect(t,e,s,i,r,n){return this.drawShape(new _(t,e,s,i,r),n),this}drawShape(t,e){return this.endPoly(),this.shapePrimitives.push({shape:t,transform:e}),this}startPoly(t,e){let s=this._currentPoly;return s&&this.endPoly(),s=new x,s.points.push(t,e),this._currentPoly=s,this}endPoly(t=!1){const e=this._currentPoly;return e&&e.points.length>2&&(e.closePath=t,this.shapePrimitives.push({shape:e})),this._currentPoly=null,this}_ensurePoly(t=!0){if(!this._currentPoly&&(this._currentPoly=new x,t)){const t=this.shapePrimitives[this.shapePrimitives.length-1];if(t){let e=t.shape.x,s=t.shape.y;if(t.transform&&!t.transform.isIdentity()){const i=t.transform,r=e;e=i.a*e+i.c*s+i.tx,s=i.b*r+i.d*s+i.ty}this._currentPoly.points.push(e,s)}else this._currentPoly.points.push(0,0)}}buildPath(){const t=this._graphicsPath2D;this.shapePrimitives.length=0,this._currentPoly=null;for(let e=0;e<t.instructions.length;e++){const s=t.instructions[e];this[s.action](...s.data)}this.finish()}get bounds(){const t=this._bounds;t.clear();const e=this.shapePrimitives;for(let s=0;s<e.length;s++){const i=e[s],r=i.shape.getBounds(I);i.transform?t.addRect(r,i.transform):t.addRect(r)}return t}}class G{constructor(t,e=!1){this.instructions=[],this.uid=(0,h.L)("graphicsPath"),this._dirty=!0,this.checkForHoles=e,"string"==typeof t?function(t,e){const s=d(t),i=[];let r=null,n=0,a=0;for(let t=0;t<s.length;t++){const o=s[t],h=o[0],l=o;switch(h){case"M":n=l[1],a=l[2],e.moveTo(n,a);break;case"m":n+=l[1],a+=l[2],e.moveTo(n,a);break;case"H":n=l[1],e.lineTo(n,a);break;case"h":n+=l[1],e.lineTo(n,a);break;case"V":a=l[1],e.lineTo(n,a);break;case"v":a+=l[1],e.lineTo(n,a);break;case"L":n=l[1],a=l[2],e.lineTo(n,a);break;case"l":n+=l[1],a+=l[2],e.lineTo(n,a);break;case"C":n=l[5],a=l[6],e.bezierCurveTo(l[1],l[2],l[3],l[4],n,a);break;case"c":e.bezierCurveTo(n+l[1],a+l[2],n+l[3],a+l[4],n+l[5],a+l[6]),n+=l[5],a+=l[6];break;case"S":n=l[3],a=l[4],e.bezierCurveToShort(l[1],l[2],n,a);break;case"s":e.bezierCurveToShort(n+l[1],a+l[2],n+l[3],a+l[4]),n+=l[3],a+=l[4];break;case"Q":n=l[3],a=l[4],e.quadraticCurveTo(l[1],l[2],n,a);break;case"q":e.quadraticCurveTo(n+l[1],a+l[2],n+l[3],a+l[4]),n+=l[3],a+=l[4];break;case"T":n=l[1],a=l[2],e.quadraticCurveToShort(n,a);break;case"t":n+=l[1],a+=l[2],e.quadraticCurveToShort(n,a);break;case"A":n=l[6],a=l[7],e.arcToSvg(l[1],l[2],l[3],l[4],l[5],n,a);break;case"a":n+=l[6],a+=l[7],e.arcToSvg(l[1],l[2],l[3],l[4],l[5],n,a);break;case"Z":case"z":e.closePath(),i.length>0&&(r=i.pop(),r?(n=r.startX,a=r.startY):(n=0,a=0)),r=null;break;default:(0,c.R)(`Unknown SVG path command: ${h}`)}"Z"!==h&&"z"!==h&&null===r&&(r={startX:n,startY:a},i.push(r))}}(t,this):this.instructions=t?.slice()??[]}get shapePath(){return this._shapePath||(this._shapePath=new B(this)),this._dirty&&(this._dirty=!1,this._shapePath.buildPath()),this._shapePath}addPath(t,e){return t=t.clone(),this.instructions.push({action:"addPath",data:[t,e]}),this._dirty=!0,this}arc(...t){return this.instructions.push({action:"arc",data:t}),this._dirty=!0,this}arcTo(...t){return this.instructions.push({action:"arcTo",data:t}),this._dirty=!0,this}arcToSvg(...t){return this.instructions.push({action:"arcToSvg",data:t}),this._dirty=!0,this}bezierCurveTo(...t){return this.instructions.push({action:"bezierCurveTo",data:t}),this._dirty=!0,this}bezierCurveToShort(t,e,s,i,r){const n=this.instructions[this.instructions.length-1],o=this.getLastPoint(a.b.shared);let h=0,l=0;if(n&&"bezierCurveTo"===n.action){h=n.data[2],l=n.data[3];const t=o.x,e=o.y;h=t+(t-h),l=e+(e-l)}else h=o.x,l=o.y;return this.instructions.push({action:"bezierCurveTo",data:[h,l,t,e,s,i,r]}),this._dirty=!0,this}closePath(){return this.instructions.push({action:"closePath",data:[]}),this._dirty=!0,this}ellipse(...t){return this.instructions.push({action:"ellipse",data:t}),this._dirty=!0,this}lineTo(...t){return this.instructions.push({action:"lineTo",data:t}),this._dirty=!0,this}moveTo(...t){return this.instructions.push({action:"moveTo",data:t}),this}quadraticCurveTo(...t){return this.instructions.push({action:"quadraticCurveTo",data:t}),this._dirty=!0,this}quadraticCurveToShort(t,e,s){const i=this.instructions[this.instructions.length-1],r=this.getLastPoint(a.b.shared);let n=0,o=0;if(i&&"quadraticCurveTo"===i.action){n=i.data[0],o=i.data[1];const t=r.x,e=r.y;n=t+(t-n),o=e+(e-o)}else n=r.x,o=r.y;return this.instructions.push({action:"quadraticCurveTo",data:[n,o,t,e,s]}),this._dirty=!0,this}rect(t,e,s,i,r){return this.instructions.push({action:"rect",data:[t,e,s,i,r]}),this._dirty=!0,this}circle(t,e,s,i){return this.instructions.push({action:"circle",data:[t,e,s,i]}),this._dirty=!0,this}roundRect(...t){return this.instructions.push({action:"roundRect",data:t}),this._dirty=!0,this}poly(...t){return this.instructions.push({action:"poly",data:t}),this._dirty=!0,this}regularPoly(...t){return this.instructions.push({action:"regularPoly",data:t}),this._dirty=!0,this}roundPoly(...t){return this.instructions.push({action:"roundPoly",data:t}),this._dirty=!0,this}roundShape(...t){return this.instructions.push({action:"roundShape",data:t}),this._dirty=!0,this}filletRect(...t){return this.instructions.push({action:"filletRect",data:t}),this._dirty=!0,this}chamferRect(...t){return this.instructions.push({action:"chamferRect",data:t}),this._dirty=!0,this}star(t,e,s,i,r,n,a){r||(r=i/2);const o=-1*Math.PI/2+n,h=2*s,l=2*Math.PI/h,u=[];for(let s=0;s<h;s++){const n=s%2?r:i,a=s*l+o;u.push(t+n*Math.cos(a),e+n*Math.sin(a))}return this.poly(u,!0,a),this}clone(t=!1){const e=new G;if(e.checkForHoles=this.checkForHoles,t)for(let t=0;t<this.instructions.length;t++){const s=this.instructions[t];e.instructions.push({action:s.action,data:s.data.slice()})}else e.instructions=this.instructions.slice();return e}clear(){return this.instructions.length=0,this._dirty=!0,this}transform(t){if(t.isIdentity())return this;const e=t.a,s=t.b,i=t.c,r=t.d,n=t.tx,a=t.ty;let o=0,h=0,l=0,u=0,d=0,p=0,f=0,m=0;for(let g=0;g<this.instructions.length;g++){const x=this.instructions[g],y=x.data;switch(x.action){case"moveTo":case"lineTo":o=y[0],h=y[1],y[0]=e*o+i*h+n,y[1]=s*o+r*h+a;break;case"bezierCurveTo":l=y[0],u=y[1],d=y[2],p=y[3],o=y[4],h=y[5],y[0]=e*l+i*u+n,y[1]=s*l+r*u+a,y[2]=e*d+i*p+n,y[3]=s*d+r*p+a,y[4]=e*o+i*h+n,y[5]=s*o+r*h+a;break;case"quadraticCurveTo":l=y[0],u=y[1],o=y[2],h=y[3],y[0]=e*l+i*u+n,y[1]=s*l+r*u+a,y[2]=e*o+i*h+n,y[3]=s*o+r*h+a;break;case"arcToSvg":o=y[5],h=y[6],f=y[0],m=y[1],y[0]=e*f+i*m,y[1]=s*f+r*m,y[5]=e*o+i*h+n,y[6]=s*o+r*h+a;break;case"circle":y[4]=F(y[3],t);break;case"rect":y[4]=F(y[4],t);break;case"ellipse":y[8]=F(y[8],t);break;case"roundRect":y[5]=F(y[5],t);break;case"addPath":y[0].transform(t);break;case"poly":y[2]=F(y[2],t);break;default:(0,c.R)("unknown transform action",x.action)}}return this._dirty=!0,this}get bounds(){return this.shapePath.bounds}getLastPoint(t){let e=this.instructions.length-1,s=this.instructions[e];if(!s)return t.x=0,t.y=0,t;for(;"closePath"===s.action;){if(e--,e<0)return t.x=0,t.y=0,t;s=this.instructions[e]}switch(s.action){case"moveTo":case"lineTo":t.x=s.data[0],t.y=s.data[1];break;case"quadraticCurveTo":t.x=s.data[2],t.y=s.data[3];break;case"bezierCurveTo":t.x=s.data[4],t.y=s.data[5];break;case"arc":case"arcToSvg":t.x=s.data[5],t.y=s.data[6];break;case"addPath":s.data[0].getLastPoint(t)}return t}}function F(t,e){return t?t.prepend(e):e.clone()}var O=s(7276);function L(t,e,s){const i=t.getAttribute(e);return i?Number(i):s}function D(t){const e=L(t,"x1",0),s=L(t,"y1",0),i=L(t,"x2",1),n=L(t,"y2",0),a=t.getAttribute("gradientUnits")||"objectBoundingBox",o=new O._(e,s,i,n,"objectBoundingBox"===a?"local":"global");for(let e=0;e<t.children.length;e++){const s=t.children[e],i=L(s,"offset",0),n=r.Q.shared.setValue(s.getAttribute("stop-color")).toNumber();o.addColorStop(i,n)}return o}function U(t){return(0,c.R)("[SVG Parser] Radial gradients are not yet supported"),new O._(0,0,1,0)}function z(t){const e=t.match(/url\s*\(\s*['"]?\s*#([^'"\s)]+)\s*['"]?\s*\)/i);return e?e[1]:""}const N={fill:{type:"paint",default:0},"fill-opacity":{type:"number",default:1},stroke:{type:"paint",default:0},"stroke-width":{type:"number",default:1},"stroke-opacity":{type:"number",default:1},"stroke-linecap":{type:"string",default:"butt"},"stroke-linejoin":{type:"string",default:"miter"},"stroke-miterlimit":{type:"number",default:10},"stroke-dasharray":{type:"string",default:"none"},"stroke-dashoffset":{type:"number",default:0},opacity:{type:"number",default:1}};function X(t,e){const s=t.getAttribute("style"),i={},r={},n={strokeStyle:i,fillStyle:r,useFill:!1,useStroke:!1};for(const s in N){const i=t.getAttribute(s);i&&V(e,n,s,i.trim())}if(s){const t=s.split(";");for(let s=0;s<t.length;s++){const i=t[s].trim(),[r,a]=i.split(":");N[r]&&V(e,n,r,a.trim())}}return{strokeStyle:n.useStroke?i:null,fillStyle:n.useFill?r:null,useFill:n.useFill,useStroke:n.useStroke}}function V(t,e,s,i){switch(s){case"stroke":if("none"!==i){if(i.startsWith("url(")){const s=z(i);e.strokeStyle.fill=t.defs[s]}else e.strokeStyle.color=r.Q.shared.setValue(i).toNumber();e.useStroke=!0}break;case"stroke-width":e.strokeStyle.width=Number(i);break;case"fill":if("none"!==i){if(i.startsWith("url(")){const s=z(i);e.fillStyle.fill=t.defs[s]}else e.fillStyle.color=r.Q.shared.setValue(i).toNumber();e.useFill=!0}break;case"fill-opacity":e.fillStyle.alpha=Number(i);break;case"stroke-opacity":e.strokeStyle.alpha=Number(i);break;case"opacity":e.fillStyle.alpha=Number(i),e.strokeStyle.alpha=Number(i)}}function Y(t){const e=t.match(/[-+]?[0-9]*\.?[0-9]+/g);if(!e||e.length<4)return 0;const s=e.map(Number),i=[],r=[];for(let t=0;t<s.length;t+=2)t+1<s.length&&(i.push(s[t]),r.push(s[t+1]));if(0===i.length||0===r.length)return 0;const n=Math.min(...i),a=Math.max(...i),o=Math.min(...r);return(a-n)*(Math.max(...r)-o)}function $(t,e){const s=new G(t,!1);for(const t of s.instructions)e.instructions.push(t)}function H(t,e,s,i){const r=t.children,{fillStyle:n,strokeStyle:a}=X(t,e);n&&s?s={...s,...n}:n&&(s=n),a&&i?i={...i,...a}:a&&(i=a);const o=!s&&!i;let h,l,u,d,p,f,m,g,x,y,_,b,v,w,C,A,S;switch(o&&(s={color:0}),t.nodeName.toLowerCase()){case"path":{w=t.getAttribute("d");const r=t.getAttribute("fill-rule"),n=w.split(/(?=[Mm])/).filter(t=>t.trim().length>0),a="evenodd"===r,o=n.length>1;if(a&&o){const t=n.map(t=>({path:t,area:Y(t)}));t.sort((t,e)=>e.area-t.area);const r=n.length>3||!function(t){if(t.length<=2)return!0;const e=t.map(t=>t.area).sort((t,e)=>e-t),[s,i]=e,r=e[e.length-1];return!(s/i>3&&i/r<2)}(t);if(r)for(let r=0;r<t.length;r++){const n=t[r],a=0===r;e.context.beginPath();const o=new G(void 0,!0);$(n.path,o),e.context.path(o),a?(s&&e.context.fill(s),i&&e.context.stroke(i)):e.context.cut()}else for(let r=0;r<t.length;r++){const n=t[r],a=r%2==1;e.context.beginPath();const o=new G(void 0,!0);$(n.path,o),e.context.path(o),a?e.context.cut():(s&&e.context.fill(s),i&&e.context.stroke(i))}}else C=new G(w,!r||"evenodd"===r),e.context.path(C),s&&e.context.fill(s),i&&e.context.stroke(i);break}case"circle":m=L(t,"cx",0),g=L(t,"cy",0),x=L(t,"r",0),e.context.ellipse(m,g,x,x),s&&e.context.fill(s),i&&e.context.stroke(i);break;case"rect":h=L(t,"x",0),l=L(t,"y",0),A=L(t,"width",0),S=L(t,"height",0),y=L(t,"rx",0),_=L(t,"ry",0),y||_?e.context.roundRect(h,l,A,S,y||_):e.context.rect(h,l,A,S),s&&e.context.fill(s),i&&e.context.stroke(i);break;case"ellipse":m=L(t,"cx",0),g=L(t,"cy",0),y=L(t,"rx",0),_=L(t,"ry",0),e.context.beginPath(),e.context.ellipse(m,g,y,_),s&&e.context.fill(s),i&&e.context.stroke(i);break;case"line":u=L(t,"x1",0),d=L(t,"y1",0),p=L(t,"x2",0),f=L(t,"y2",0),e.context.beginPath(),e.context.moveTo(u,d),e.context.lineTo(p,f),i&&e.context.stroke(i);break;case"polygon":v=t.getAttribute("points"),b=v.match(/\d+/g).map(t=>parseInt(t,10)),e.context.poly(b,!0),s&&e.context.fill(s),i&&e.context.stroke(i);break;case"polyline":v=t.getAttribute("points"),b=v.match(/\d+/g).map(t=>parseInt(t,10)),e.context.poly(b,!1),i&&e.context.stroke(i);break;case"g":case"svg":break;default:(0,c.R)(`[SVG parser] <${t.nodeName}> elements unsupported`)}o&&(s=null);for(let t=0;t<r.length;t++)H(r[t],e,s,i)}var j=s(990);const W=new a.b,q=new n.u,Z=class t extends i.A{constructor(){super(...arguments),this.uid=(0,h.L)("graphicsContext"),this.dirty=!0,this.batchMode="auto",this.instructions=[],this._activePath=new G,this._transform=new n.u,this._fillStyle={...t.defaultFillStyle},this._strokeStyle={...t.defaultStrokeStyle},this._stateStack=[],this._tick=0,this._bounds=new u.c,this._boundsDirty=!0}clone(){const e=new t;return e.batchMode=this.batchMode,e.instructions=this.instructions.slice(),e._activePath=this._activePath.clone(),e._transform=this._transform.clone(),e._fillStyle={...this._fillStyle},e._strokeStyle={...this._strokeStyle},e._stateStack=this._stateStack.slice(),e._bounds=this._bounds.clone(),e._boundsDirty=!0,e}get fillStyle(){return this._fillStyle}set fillStyle(e){this._fillStyle=(0,j.w)(e,t.defaultFillStyle)}get strokeStyle(){return this._strokeStyle}set strokeStyle(e){this._strokeStyle=(0,j.T)(e,t.defaultStrokeStyle)}setFillStyle(e){return this._fillStyle=(0,j.w)(e,t.defaultFillStyle),this}setStrokeStyle(e){return this._strokeStyle=(0,j.w)(e,t.defaultStrokeStyle),this}texture(t,e,s,i,n,a){return this.instructions.push({action:"texture",data:{image:t,dx:s||0,dy:i||0,dw:n||t.frame.width,dh:a||t.frame.height,transform:this._transform.clone(),alpha:this._fillStyle.alpha,style:e?r.Q.shared.setValue(e).toNumber():16777215}}),this.onUpdate(),this}beginPath(){return this._activePath=new G,this}fill(e,s){let i;const r=this.instructions[this.instructions.length-1];return i=0===this._tick&&r&&"stroke"===r.action?r.data.path:this._activePath.clone(),i?(null!=e&&(void 0!==s&&"number"==typeof e&&((0,l.t6)(l.lj,"GraphicsContext.fill(color, alpha) is deprecated, use GraphicsContext.fill({ color, alpha }) instead"),e={color:e,alpha:s}),this._fillStyle=(0,j.w)(e,t.defaultFillStyle)),this.instructions.push({action:"fill",data:{style:this.fillStyle,path:i}}),this.onUpdate(),this._initNextPathLocation(),this._tick=0,this):this}_initNextPathLocation(){const{x:t,y:e}=this._activePath.getLastPoint(a.b.shared);this._activePath.clear(),this._activePath.moveTo(t,e)}stroke(e){let s;const i=this.instructions[this.instructions.length-1];return s=0===this._tick&&i&&"fill"===i.action?i.data.path:this._activePath.clone(),s?(null!=e&&(this._strokeStyle=(0,j.T)(e,t.defaultStrokeStyle)),this.instructions.push({action:"stroke",data:{style:this.strokeStyle,path:s}}),this.onUpdate(),this._initNextPathLocation(),this._tick=0,this):this}cut(){for(let t=0;t<2;t++){const e=this.instructions[this.instructions.length-1-t],s=this._activePath.clone();if(e&&("stroke"===e.action||"fill"===e.action)){if(!e.data.hole){e.data.hole=s;break}e.data.hole.addPath(s)}}return this._initNextPathLocation(),this}arc(t,e,s,i,r,n){this._tick++;const a=this._transform;return this._activePath.arc(a.a*t+a.c*e+a.tx,a.b*t+a.d*e+a.ty,s,i,r,n),this}arcTo(t,e,s,i,r){this._tick++;const n=this._transform;return this._activePath.arcTo(n.a*t+n.c*e+n.tx,n.b*t+n.d*e+n.ty,n.a*s+n.c*i+n.tx,n.b*s+n.d*i+n.ty,r),this}arcToSvg(t,e,s,i,r,n,a){this._tick++;const o=this._transform;return this._activePath.arcToSvg(t,e,s,i,r,o.a*n+o.c*a+o.tx,o.b*n+o.d*a+o.ty),this}bezierCurveTo(t,e,s,i,r,n,a){this._tick++;const o=this._transform;return this._activePath.bezierCurveTo(o.a*t+o.c*e+o.tx,o.b*t+o.d*e+o.ty,o.a*s+o.c*i+o.tx,o.b*s+o.d*i+o.ty,o.a*r+o.c*n+o.tx,o.b*r+o.d*n+o.ty,a),this}closePath(){return this._tick++,this._activePath?.closePath(),this}ellipse(t,e,s,i){return this._tick++,this._activePath.ellipse(t,e,s,i,this._transform.clone()),this}circle(t,e,s){return this._tick++,this._activePath.circle(t,e,s,this._transform.clone()),this}path(t){return this._tick++,this._activePath.addPath(t,this._transform.clone()),this}lineTo(t,e){this._tick++;const s=this._transform;return this._activePath.lineTo(s.a*t+s.c*e+s.tx,s.b*t+s.d*e+s.ty),this}moveTo(t,e){this._tick++;const s=this._transform,i=this._activePath.instructions,r=s.a*t+s.c*e+s.tx,n=s.b*t+s.d*e+s.ty;return 1===i.length&&"moveTo"===i[0].action?(i[0].data[0]=r,i[0].data[1]=n,this):(this._activePath.moveTo(r,n),this)}quadraticCurveTo(t,e,s,i,r){this._tick++;const n=this._transform;return this._activePath.quadraticCurveTo(n.a*t+n.c*e+n.tx,n.b*t+n.d*e+n.ty,n.a*s+n.c*i+n.tx,n.b*s+n.d*i+n.ty,r),this}rect(t,e,s,i){return this._tick++,this._activePath.rect(t,e,s,i,this._transform.clone()),this}roundRect(t,e,s,i,r){return this._tick++,this._activePath.roundRect(t,e,s,i,r,this._transform.clone()),this}poly(t,e){return this._tick++,this._activePath.poly(t,e,this._transform.clone()),this}regularPoly(t,e,s,i,r=0,n){return this._tick++,this._activePath.regularPoly(t,e,s,i,r,n),this}roundPoly(t,e,s,i,r,n){return this._tick++,this._activePath.roundPoly(t,e,s,i,r,n),this}roundShape(t,e,s,i){return this._tick++,this._activePath.roundShape(t,e,s,i),this}filletRect(t,e,s,i,r){return this._tick++,this._activePath.filletRect(t,e,s,i,r),this}chamferRect(t,e,s,i,r,n){return this._tick++,this._activePath.chamferRect(t,e,s,i,r,n),this}star(t,e,s,i,r=0,n=0){return this._tick++,this._activePath.star(t,e,s,i,r,n,this._transform.clone()),this}svg(t){return this._tick++,function(t,e){if("string"==typeof t){const e=document.createElement("div");e.innerHTML=t.trim(),t=e.querySelector("svg")}const s={context:e,defs:{},path:new G};!function(t,e){const s=t.querySelectorAll("defs");for(let t=0;t<s.length;t++){const i=s[t];for(let t=0;t<i.children.length;t++){const s=i.children[t];switch(s.nodeName.toLowerCase()){case"lineargradient":e.defs[s.id]=D(s);break;case"radialgradient":e.defs[s.id]=U()}}}}(t,s);const i=t.children,{fillStyle:r,strokeStyle:n}=X(t,s);for(let t=0;t<i.length;t++){const e=i[t];"defs"!==e.nodeName.toLowerCase()&&H(e,s,r,n)}}(t,this),this}restore(){const t=this._stateStack.pop();return t&&(this._transform=t.transform,this._fillStyle=t.fillStyle,this._strokeStyle=t.strokeStyle),this}save(){return this._stateStack.push({transform:this._transform.clone(),fillStyle:{...this._fillStyle},strokeStyle:{...this._strokeStyle}}),this}getTransform(){return this._transform}resetTransform(){return this._transform.identity(),this}rotate(t){return this._transform.rotate(t),this}scale(t,e=t){return this._transform.scale(t,e),this}setTransform(t,e,s,i,r,a){return t instanceof n.u?(this._transform.set(t.a,t.b,t.c,t.d,t.tx,t.ty),this):(this._transform.set(t,e,s,i,r,a),this)}transform(t,e,s,i,r,a){return t instanceof n.u?(this._transform.append(t),this):(q.set(t,e,s,i,r,a),this._transform.append(q),this)}translate(t,e=t){return this._transform.translate(t,e),this}clear(){return this._activePath.clear(),this.instructions.length=0,this.resetTransform(),this.onUpdate(),this}onUpdate(){this._boundsDirty=!0,this.dirty||(this.emit("update",this,16),this.dirty=!0)}get bounds(){if(!this._boundsDirty)return this._bounds;this._boundsDirty=!1;const t=this._bounds;t.clear();for(let e=0;e<this.instructions.length;e++){const s=this.instructions[e],i=s.action;if("fill"===i){const e=s.data;t.addBounds(e.path.bounds)}else if("texture"===i){const e=s.data;t.addFrame(e.dx,e.dy,e.dx+e.dw,e.dy+e.dh,e.transform)}if("stroke"===i){const e=s.data,i=e.style.alignment,r=e.style.width*(1-i),n=e.path.bounds;t.addFrame(n.minX-r,n.minY-r,n.maxX+r,n.maxY+r)}}return t}containsPoint(t){if(!this.bounds.containsPoint(t.x,t.y))return!1;const e=this.instructions;let s=!1;for(let i=0;i<e.length;i++){const r=e[i],n=r.data,a=n.path;if(!r.action||!a)continue;const o=n.style,h=a.shapePath.shapePrimitives;for(let e=0;e<h.length;e++){const i=h[e].shape;if(!o||!i)continue;const a=h[e].transform,l=a?a.applyInverse(t,W):t;if("fill"===r.action)s=i.contains(l.x,l.y);else{const t=o;s=i.strokeContains(l.x,l.y,t.width,t.alignment)}const u=n.hole;if(u){const t=u.shapePath?.shapePrimitives;if(t)for(let e=0;e<t.length;e++)t[e].shape.contains(l.x,l.y)&&(s=!1)}if(s)return!0}}return s}destroy(t=!1){if(this._stateStack.length=0,this._transform=null,this.emit("destroy",this),this.removeAllListeners(),"boolean"==typeof t?t:t?.texture){const e="boolean"==typeof t?t:t?.textureSource;this._fillStyle.texture&&(this._fillStyle.fill&&"uid"in this._fillStyle.fill?this._fillStyle.fill.destroy():this._fillStyle.texture.destroy(e)),this._strokeStyle.texture&&(this._strokeStyle.fill&&"uid"in this._strokeStyle.fill?this._strokeStyle.fill.destroy():this._strokeStyle.texture.destroy(e))}this._fillStyle=null,this._strokeStyle=null,this.instructions=null,this._activePath=null,this._bounds=null,this._stateStack=null,this.customShader=null,this._transform=null}};Z.defaultFillStyle={color:16777215,alpha:1,texture:o.g.WHITE,matrix:null,fill:null,textureSpace:"local"},Z.defaultStrokeStyle={width:1,color:16777215,alpha:1,alignment:.5,miterLimit:10,cap:"butt",join:"miter",texture:o.g.WHITE,matrix:null,fill:null,textureSpace:"local",pixelLine:!1};let Q=Z},8293:(t,e,s)=>{"use strict";s.d(e,{b:()=>n});var i=s(8507),r=s(583);class n extends r.v{constructor(t){super(t),this.uploadMethodId="image",this.autoGarbageCollect=!0}static test(t){return globalThis.HTMLImageElement&&t instanceof HTMLImageElement||"undefined"!=typeof ImageBitmap&&t instanceof ImageBitmap||globalThis.VideoFrame&&t instanceof VideoFrame}}n.extension=i.Ag.TextureSource},8306:(t,e,s)=>{"use strict";s.d(e,{m:()=>r});const i={uint8x2:{size:2,stride:2,normalised:!1},uint8x4:{size:4,stride:4,normalised:!1},sint8x2:{size:2,stride:2,normalised:!1},sint8x4:{size:4,stride:4,normalised:!1},unorm8x2:{size:2,stride:2,normalised:!0},unorm8x4:{size:4,stride:4,normalised:!0},snorm8x2:{size:2,stride:2,normalised:!0},snorm8x4:{size:4,stride:4,normalised:!0},uint16x2:{size:2,stride:4,normalised:!1},uint16x4:{size:4,stride:8,normalised:!1},sint16x2:{size:2,stride:4,normalised:!1},sint16x4:{size:4,stride:8,normalised:!1},unorm16x2:{size:2,stride:4,normalised:!0},unorm16x4:{size:4,stride:8,normalised:!0},snorm16x2:{size:2,stride:4,normalised:!0},snorm16x4:{size:4,stride:8,normalised:!0},float16x2:{size:2,stride:4,normalised:!1},float16x4:{size:4,stride:8,normalised:!1},float32:{size:1,stride:4,normalised:!1},float32x2:{size:2,stride:8,normalised:!1},float32x3:{size:3,stride:12,normalised:!1},float32x4:{size:4,stride:16,normalised:!1},uint32:{size:1,stride:4,normalised:!1},uint32x2:{size:2,stride:8,normalised:!1},uint32x3:{size:3,stride:12,normalised:!1},uint32x4:{size:4,stride:16,normalised:!1},sint32:{size:1,stride:4,normalised:!1},sint32x2:{size:2,stride:8,normalised:!1},sint32x3:{size:3,stride:12,normalised:!1},sint32x4:{size:4,stride:16,normalised:!1}};function r(t){return i[t]??i.float32}},8475:(t,e,s)=>{"use strict";s.d(e,{M:()=>u});var i=s(4486),r=s(133),n=s(9113),a=s(3513),o=s(3012),h=s(5099),l=s(5811);class u extends i.A{constructor(t){super(),this.uid=(0,r.L)("shader"),this._uniformBindMap=Object.create(null),this._ownedBindGroups=[];let{gpuProgram:e,glProgram:s,groups:i,resources:n,compatibleRenderers:o,groupMap:u}=t;this.gpuProgram=e,this.glProgram=s,void 0===o&&(o=0,e&&(o|=h.W.WEBGPU),s&&(o|=h.W.WEBGL)),this.compatibleRenderers=o;const c={};if(n||i||(n={}),n&&i)throw new Error("[Shader] Cannot have both resources and groups");if(!e&&i&&!u)throw new Error("[Shader] No group map or WebGPU shader provided - consider using resources instead.");if(!e&&i&&u)for(const t in u)for(const e in u[t]){const s=u[t][e];c[s]={group:t,binding:e,name:s}}else if(e&&i&&!u){const t=e.structsAndGroups.groups;u={},t.forEach(t=>{u[t.group]=u[t.group]||{},u[t.group][t.binding]=t.name,c[t.name]=t})}else if(n){i={},u={},e&&e.structsAndGroups.groups.forEach(t=>{u[t.group]=u[t.group]||{},u[t.group][t.binding]=t.name,c[t.name]=t});let t=0;for(const e in n)c[e]||(i[99]||(i[99]=new a.T,this._ownedBindGroups.push(i[99])),c[e]={group:99,binding:t,name:e},u[99]=u[99]||{},u[99][t]=e,t++);for(const t in n){const e=t;let s=n[t];s.source||s._resourceType||(s=new l.k(s));const r=c[e];r&&(i[r.group]||(i[r.group]=new a.T,this._ownedBindGroups.push(i[r.group])),i[r.group].setResource(s,r.binding))}}this.groups=i,this._uniformBindMap=u,this.resources=this._buildResourceAccessor(i,c)}addResource(t,e,s){var i,r;(i=this._uniformBindMap)[e]||(i[e]={}),(r=this._uniformBindMap[e])[s]||(r[s]=t),this.groups[e]||(this.groups[e]=new a.T,this._ownedBindGroups.push(this.groups[e]))}_buildResourceAccessor(t,e){const s={};for(const i in e){const r=e[i];Object.defineProperty(s,r.name,{get:()=>t[r.group].getResource(r.binding),set(e){t[r.group].setResource(e,r.binding)}})}return s}destroy(t=!1){this.emit("destroy",this),t&&(this.gpuProgram?.destroy(),this.glProgram?.destroy()),this.gpuProgram=null,this.glProgram=null,this.removeAllListeners(),this._uniformBindMap=null,this._ownedBindGroups.forEach(t=>{t.destroy()}),this._ownedBindGroups=null,this.resources=null,this.groups=null}static from(t){const{gpu:e,gl:s,...i}=t;let r,a;return e&&(r=o.B.from(e)),s&&(a=n.M.from(s)),new u({gpuProgram:r,glProgram:a,...i})}}},8507:(t,e,s)=>{"use strict";s.d(e,{Ag:()=>i,XO:()=>a});var i=(t=>(t.Application="application",t.WebGLPipes="webgl-pipes",t.WebGLPipesAdaptor="webgl-pipes-adaptor",t.WebGLSystem="webgl-system",t.WebGPUPipes="webgpu-pipes",t.WebGPUPipesAdaptor="webgpu-pipes-adaptor",t.WebGPUSystem="webgpu-system",t.CanvasSystem="canvas-system",t.CanvasPipesAdaptor="canvas-pipes-adaptor",t.CanvasPipes="canvas-pipes",t.Asset="asset",t.LoadParser="load-parser",t.ResolveParser="resolve-parser",t.CacheParser="cache-parser",t.DetectionParser="detection-parser",t.MaskEffect="mask-effect",t.BlendMode="blend-mode",t.TextureSource="texture-source",t.Environment="environment",t.ShapeBuilder="shape-builder",t.Batcher="batcher",t))(i||{});const r=t=>{if("function"==typeof t||"object"==typeof t&&t.extension){if(!t.extension)throw new Error("Extension class must have an extension object");t={..."object"!=typeof t.extension?{type:t.extension}:t.extension,ref:t}}if("object"!=typeof t)throw new Error("Invalid extension type");return"string"==typeof(t={...t}).type&&(t.type=[t.type]),t},n=(t,e)=>r(t).priority??e,a={_addHandlers:{},_removeHandlers:{},_queue:{},remove(...t){return t.map(r).forEach(t=>{t.type.forEach(e=>this._removeHandlers[e]?.(t))}),this},add(...t){return t.map(r).forEach(t=>{t.type.forEach(e=>{const s=this._addHandlers,i=this._queue;s[e]?s[e]?.(t):(i[e]=i[e]||[],i[e]?.push(t))})}),this},handle(t,e,s){const i=this._addHandlers,r=this._removeHandlers;if(i[t]||r[t])throw new Error(`Extension type ${t} already has a handler`);i[t]=e,r[t]=s;const n=this._queue;return n[t]&&(n[t]?.forEach(t=>e(t)),delete n[t]),this},handleByMap(t,e){return this.handle(t,t=>{t.name&&(e[t.name]=t.ref)},t=>{t.name&&delete e[t.name]})},handleByNamedList(t,e,s=-1){return this.handle(t,t=>{e.findIndex(e=>e.name===t.name)>=0||(e.push({name:t.name,value:t.ref}),e.sort((t,e)=>n(e.value,s)-n(t.value,s)))},t=>{const s=e.findIndex(e=>e.name===t.name);-1!==s&&e.splice(s,1)})},handleByList(t,e,s=-1){return this.handle(t,t=>{e.includes(t.ref)||(e.push(t.ref),e.sort((t,e)=>n(e,s)-n(t,s)))},t=>{const s=e.indexOf(t.ref);-1!==s&&e.splice(s,1)})},mixin(t,...e){for(const s of e)Object.defineProperties(t.prototype,Object.getOwnPropertyDescriptors(s))}}},8639:(t,e,s)=>{"use strict";s.d(e,{i:()=>r});var i=s(1957);function r(t,e){return"no-premultiply-alpha"===e.alphaMode&&i.Q[t]||t}},8655:(t,e,s)=>{"use strict";s.d(e,{Z:()=>n});var i=s(6083);class r{constructor(t,e){this._pool=[],this._count=0,this._index=0,this._classType=t,e&&this.prepopulate(e)}prepopulate(t){for(let e=0;e<t;e++)this._pool[this._index++]=new this._classType;this._count+=t}get(t){let e;return e=this._index>0?this._pool[--this._index]:new this._classType,e.init?.(t),e}return(t){t.reset?.(),this._pool[this._index++]=t}get totalSize(){return this._count}get totalFree(){return this._index}get totalUsed(){return this._count-this._index}clear(){if(this._pool.length>0&&this._pool[0].destroy)for(let t=0;t<this._index;t++)this._pool[t].destroy();this._pool.length=0,this._count=0,this._index=0}}const n=new class{constructor(){this._poolsByClass=new Map}prepopulate(t,e){this.getPool(t).prepopulate(e)}get(t,e){return this.getPool(t).get(e)}return(t){this.getPool(t.constructor).return(t)}getPool(t){return this._poolsByClass.has(t)||this._poolsByClass.set(t,new r(t)),this._poolsByClass.get(t)}stats(){const t={};return this._poolsByClass.forEach(e=>{const s=t[e._classType.name]?e._classType.name+e._classType.ID:e._classType.name;t[s]={free:e.totalFree,used:e.totalUsed,size:e.totalSize}}),t}clear(){this._poolsByClass.forEach(t=>t.clear()),this._poolsByClass.clear()}};i.L.register(n)},9049:(t,e,s)=>{"use strict";s.d(e,{a:()=>i});class i{constructor(){this.pipe="filter",this.priority=1}destroy(){for(let t=0;t<this.filters.length;t++)this.filters[t].destroy();this.filters=null,this.filterArea=null}}},9113:(t,e,s)=>{"use strict";s.d(e,{M:()=>d});var i=s(7952),r=s(3804);let n;function a(){if(!n){n="mediump";const t=(0,r.W)();if(t&&t.getShaderPrecisionFormat){const e=t.getShaderPrecisionFormat(t.FRAGMENT_SHADER,t.HIGH_FLOAT);n=e.precision?"highp":"mediump"}}return n}const o={},h={},l={stripVersion:function(t,e){return e?t.replace("#version 300 es",""):t},ensurePrecision:function(t,e,s){const i=s?e.maxSupportedFragmentPrecision:e.maxSupportedVertexPrecision;if("precision"!==t.substring(0,9)){let r=s?e.requestedFragmentPrecision:e.requestedVertexPrecision;return"highp"===r&&"highp"!==i&&(r="mediump"),`precision ${r} float;\n${t}`}return"highp"!==i&&"precision highp"===t.substring(0,15)?t.replace("precision highp","precision mediump"):t},addProgramDefines:function(t,e,s){return e?t:s?`\n\n        #ifdef GL_ES // This checks if it is WebGL1\n        #define in varying\n        #define finalColor gl_FragColor\n        #define texture texture2D\n        #endif\n        ${t=t.replace("out vec4 finalColor;","")}\n        `:`\n\n        #ifdef GL_ES // This checks if it is WebGL1\n        #define in attribute\n        #define out varying\n        #endif\n        ${t}\n        `},setProgramName:function(t,{name:e="pixi-program"},s=!0){e=e.replace(/\s+/g,"-");const i=s?o:h;return i[e+=s?"-fragment":"-vertex"]?(i[e]++,e+=`-${i[e]}`):i[e]=1,-1!==t.indexOf("#define SHADER_NAME")?t:`#define SHADER_NAME ${e}\n${t}`},insertVersion:function(t,e){return e?`#version 300 es\n${t}`:t}},u=Object.create(null),c=class t{constructor(e){const s=-1!==(e={...t.defaultOptions,...e}).fragment.indexOf("#version 300 es"),r={stripVersion:s,ensurePrecision:{requestedFragmentPrecision:e.preferredFragmentPrecision,requestedVertexPrecision:e.preferredVertexPrecision,maxSupportedVertexPrecision:"highp",maxSupportedFragmentPrecision:a()},setProgramName:{name:e.name},addProgramDefines:s,insertVersion:s};let n=e.fragment,o=e.vertex;Object.keys(l).forEach(t=>{const e=r[t];n=l[t](n,e,!0),o=l[t](o,e,!1)}),this.fragment=n,this.vertex=o,this.transformFeedbackVaryings=e.transformFeedbackVaryings,this._key=(0,i.X)(`${this.vertex}:${this.fragment}`,"gl-program")}destroy(){this.fragment=null,this.vertex=null,this._attributeData=null,this._uniformData=null,this._uniformBlockData=null,this.transformFeedbackVaryings=null,u[this._cacheKey]=null}static from(e){const s=`${e.vertex}:${e.fragment}`;return u[s]||(u[s]=new t(e),u[s]._cacheKey=s),u[s]}};c.defaultOptions={preferredVertexPrecision:"highp",preferredFragmentPrecision:"mediump"};let d=c},9252:(t,e,s)=>{"use strict";s.d(e,{M:()=>n});var i=s(5101);const r=[new i.b,new i.b,new i.b,new i.b];class n{constructor(t=0,e=0,s=0,i=0){this.type="rectangle",this.x=Number(t),this.y=Number(e),this.width=Number(s),this.height=Number(i)}get left(){return this.x}get right(){return this.x+this.width}get top(){return this.y}get bottom(){return this.y+this.height}isEmpty(){return this.left===this.right||this.top===this.bottom}static get EMPTY(){return new n(0,0,0,0)}clone(){return new n(this.x,this.y,this.width,this.height)}copyFromBounds(t){return this.x=t.minX,this.y=t.minY,this.width=t.maxX-t.minX,this.height=t.maxY-t.minY,this}copyFrom(t){return this.x=t.x,this.y=t.y,this.width=t.width,this.height=t.height,this}copyTo(t){return t.copyFrom(this),t}contains(t,e){return!(this.width<=0||this.height<=0)&&t>=this.x&&t<this.x+this.width&&e>=this.y&&e<this.y+this.height}strokeContains(t,e,s,i=.5){const{width:r,height:n}=this;if(r<=0||n<=0)return!1;const a=this.x,o=this.y,h=s*(1-i),l=s-h;return t>=a-h&&t<=a+r+h&&e>=o-h&&e<=o+n+h&&!(t>a+l&&t<a+r-l&&e>o+l&&e<o+n-l)}intersects(t,e){if(!e){const e=this.x<t.x?t.x:this.x;if((this.right>t.right?t.right:this.right)<=e)return!1;const s=this.y<t.y?t.y:this.y;return(this.bottom>t.bottom?t.bottom:this.bottom)>s}const s=this.left,i=this.right,n=this.top,a=this.bottom;if(i<=s||a<=n)return!1;const o=r[0].set(t.left,t.top),h=r[1].set(t.left,t.bottom),l=r[2].set(t.right,t.top),u=r[3].set(t.right,t.bottom);if(l.x<=o.x||h.y<=o.y)return!1;const c=Math.sign(e.a*e.d-e.b*e.c);if(0===c)return!1;if(e.apply(o,o),e.apply(h,h),e.apply(l,l),e.apply(u,u),Math.max(o.x,h.x,l.x,u.x)<=s||Math.min(o.x,h.x,l.x,u.x)>=i||Math.max(o.y,h.y,l.y,u.y)<=n||Math.min(o.y,h.y,l.y,u.y)>=a)return!1;const d=c*(h.y-o.y),p=c*(o.x-h.x),f=d*s+p*n,m=d*i+p*n,g=d*s+p*a,x=d*i+p*a;if(Math.max(f,m,g,x)<=d*o.x+p*o.y||Math.min(f,m,g,x)>=d*u.x+p*u.y)return!1;const y=c*(o.y-l.y),_=c*(l.x-o.x),b=y*s+_*n,v=y*i+_*n,w=y*s+_*a,C=y*i+_*a;return!(Math.max(b,v,w,C)<=y*o.x+_*o.y||Math.min(b,v,w,C)>=y*u.x+_*u.y)}pad(t=0,e=t){return this.x-=t,this.y-=e,this.width+=2*t,this.height+=2*e,this}fit(t){const e=Math.max(this.x,t.x),s=Math.min(this.x+this.width,t.x+t.width),i=Math.max(this.y,t.y),r=Math.min(this.y+this.height,t.y+t.height);return this.x=e,this.width=Math.max(s-e,0),this.y=i,this.height=Math.max(r-i,0),this}ceil(t=1,e=.001){const s=Math.ceil((this.x+this.width-e)*t)/t,i=Math.ceil((this.y+this.height-e)*t)/t;return this.x=Math.floor((this.x+e)*t)/t,this.y=Math.floor((this.y+e)*t)/t,this.width=s-this.x,this.height=i-this.y,this}scale(t,e=t){return this.x*=t,this.y*=e,this.width*=t,this.height*=e,this}enlarge(t){const e=Math.min(this.x,t.x),s=Math.max(this.x+this.width,t.x+t.width),i=Math.min(this.y,t.y),r=Math.max(this.y+this.height,t.y+t.height);return this.x=e,this.width=s-e,this.y=i,this.height=r-i,this}getBounds(t){return t||(t=new n),t.copyFrom(this),t}containsRect(t){if(this.width<=0||this.height<=0)return!1;const e=t.x,s=t.y,i=t.x+t.width,r=t.y+t.height;return e>=this.x&&e<this.x+this.width&&s>=this.y&&s<this.y+this.height&&i>=this.x&&i<this.x+this.width&&r>=this.y&&r<this.y+this.height}set(t,e,s,i){return this.x=t,this.y=e,this.width=s,this.height=i,this}toString(){return`[pixi.js/math:Rectangle x=${this.x} y=${this.y} width=${this.width} height=${this.height}]`}}},9313:(t,e,s)=>{"use strict";s.d(e,{u:()=>n});var i=s(1652),r=s(5101);class n{constructor(t=1,e=0,s=0,i=1,r=0,n=0){this.array=null,this.a=t,this.b=e,this.c=s,this.d=i,this.tx=r,this.ty=n}fromArray(t){this.a=t[0],this.b=t[1],this.c=t[3],this.d=t[4],this.tx=t[2],this.ty=t[5]}set(t,e,s,i,r,n){return this.a=t,this.b=e,this.c=s,this.d=i,this.tx=r,this.ty=n,this}toArray(t,e){this.array||(this.array=new Float32Array(9));const s=e||this.array;return t?(s[0]=this.a,s[1]=this.b,s[2]=0,s[3]=this.c,s[4]=this.d,s[5]=0,s[6]=this.tx,s[7]=this.ty,s[8]=1):(s[0]=this.a,s[1]=this.c,s[2]=this.tx,s[3]=this.b,s[4]=this.d,s[5]=this.ty,s[6]=0,s[7]=0,s[8]=1),s}apply(t,e){e=e||new r.b;const s=t.x,i=t.y;return e.x=this.a*s+this.c*i+this.tx,e.y=this.b*s+this.d*i+this.ty,e}applyInverse(t,e){e=e||new r.b;const s=this.a,i=this.b,n=this.c,a=this.d,o=this.tx,h=this.ty,l=1/(s*a+n*-i),u=t.x,c=t.y;return e.x=a*l*u+-n*l*c+(h*n-o*a)*l,e.y=s*l*c+-i*l*u+(-h*s+o*i)*l,e}translate(t,e){return this.tx+=t,this.ty+=e,this}scale(t,e){return this.a*=t,this.d*=e,this.c*=t,this.b*=e,this.tx*=t,this.ty*=e,this}rotate(t){const e=Math.cos(t),s=Math.sin(t),i=this.a,r=this.c,n=this.tx;return this.a=i*e-this.b*s,this.b=i*s+this.b*e,this.c=r*e-this.d*s,this.d=r*s+this.d*e,this.tx=n*e-this.ty*s,this.ty=n*s+this.ty*e,this}append(t){const e=this.a,s=this.b,i=this.c,r=this.d;return this.a=t.a*e+t.b*i,this.b=t.a*s+t.b*r,this.c=t.c*e+t.d*i,this.d=t.c*s+t.d*r,this.tx=t.tx*e+t.ty*i+this.tx,this.ty=t.tx*s+t.ty*r+this.ty,this}appendFrom(t,e){const s=t.a,i=t.b,r=t.c,n=t.d,a=t.tx,o=t.ty,h=e.a,l=e.b,u=e.c,c=e.d;return this.a=s*h+i*u,this.b=s*l+i*c,this.c=r*h+n*u,this.d=r*l+n*c,this.tx=a*h+o*u+e.tx,this.ty=a*l+o*c+e.ty,this}setTransform(t,e,s,i,r,n,a,o,h){return this.a=Math.cos(a+h)*r,this.b=Math.sin(a+h)*r,this.c=-Math.sin(a-o)*n,this.d=Math.cos(a-o)*n,this.tx=t-(s*this.a+i*this.c),this.ty=e-(s*this.b+i*this.d),this}prepend(t){const e=this.tx;if(1!==t.a||0!==t.b||0!==t.c||1!==t.d){const e=this.a,s=this.c;this.a=e*t.a+this.b*t.c,this.b=e*t.b+this.b*t.d,this.c=s*t.a+this.d*t.c,this.d=s*t.b+this.d*t.d}return this.tx=e*t.a+this.ty*t.c+t.tx,this.ty=e*t.b+this.ty*t.d+t.ty,this}decompose(t){const e=this.a,s=this.b,r=this.c,n=this.d,a=t.pivot,o=-Math.atan2(-r,n),h=Math.atan2(s,e),l=Math.abs(o+h);return l<1e-5||Math.abs(i.TO-l)<1e-5?(t.rotation=h,t.skew.x=t.skew.y=0):(t.rotation=0,t.skew.x=o,t.skew.y=h),t.scale.x=Math.sqrt(e*e+s*s),t.scale.y=Math.sqrt(r*r+n*n),t.position.x=this.tx+(a.x*e+a.y*r),t.position.y=this.ty+(a.x*s+a.y*n),t}invert(){const t=this.a,e=this.b,s=this.c,i=this.d,r=this.tx,n=t*i-e*s;return this.a=i/n,this.b=-e/n,this.c=-s/n,this.d=t/n,this.tx=(s*this.ty-i*r)/n,this.ty=-(t*this.ty-e*r)/n,this}isIdentity(){return 1===this.a&&0===this.b&&0===this.c&&1===this.d&&0===this.tx&&0===this.ty}identity(){return this.a=1,this.b=0,this.c=0,this.d=1,this.tx=0,this.ty=0,this}clone(){const t=new n;return t.a=this.a,t.b=this.b,t.c=this.c,t.d=this.d,t.tx=this.tx,t.ty=this.ty,t}copyTo(t){return t.a=this.a,t.b=this.b,t.c=this.c,t.d=this.d,t.tx=this.tx,t.ty=this.ty,t}copyFrom(t){return this.a=t.a,this.b=t.b,this.c=t.c,this.d=t.d,this.tx=t.tx,this.ty=t.ty,this}equals(t){return t.a===this.a&&t.b===this.b&&t.c===this.c&&t.d===this.d&&t.tx===this.tx&&t.ty===this.ty}toString(){return`[pixi.js:Matrix a=${this.a} b=${this.b} c=${this.c} d=${this.d} tx=${this.tx} ty=${this.ty}]`}static get IDENTITY(){return o.identity()}static get shared(){return a.identity()}}const a=new n,o=new n},9408:(t,e,s)=>{"use strict";s.d(e,{A:()=>a});var i=s(4670),r=s(4985),n=s(8288);class a extends r.l{constructor(t){t instanceof n.T&&(t={context:t});const{context:e,roundPixels:s,...i}=t||{};super({label:"Graphics",...i}),this.renderPipeId="graphics",this._context=e||(this._ownedContext=new n.T),this._context.on("update",this.onViewUpdate,this),this.didViewUpdate=!0,this.allowChildren=!1,this.roundPixels=s??!1}set context(t){t!==this._context&&(this._context.off("update",this.onViewUpdate,this),this._context=t,this._context.on("update",this.onViewUpdate,this),this.onViewUpdate())}get context(){return this._context}get bounds(){return this._context.bounds}updateBounds(){}containsPoint(t){return this._context.containsPoint(t)}destroy(t){this._ownedContext&&!t?this._ownedContext.destroy(t):!0!==t&&!0!==t?.context||this._context.destroy(t),this._ownedContext=null,this._context=null,super.destroy(t)}_callContextMethod(t,e){return this.context[t](...e),this}setFillStyle(...t){return this._callContextMethod("setFillStyle",t)}setStrokeStyle(...t){return this._callContextMethod("setStrokeStyle",t)}fill(...t){return this._callContextMethod("fill",t)}stroke(...t){return this._callContextMethod("stroke",t)}texture(...t){return this._callContextMethod("texture",t)}beginPath(){return this._callContextMethod("beginPath",[])}cut(){return this._callContextMethod("cut",[])}arc(...t){return this._callContextMethod("arc",t)}arcTo(...t){return this._callContextMethod("arcTo",t)}arcToSvg(...t){return this._callContextMethod("arcToSvg",t)}bezierCurveTo(...t){return this._callContextMethod("bezierCurveTo",t)}closePath(){return this._callContextMethod("closePath",[])}ellipse(...t){return this._callContextMethod("ellipse",t)}circle(...t){return this._callContextMethod("circle",t)}path(...t){return this._callContextMethod("path",t)}lineTo(...t){return this._callContextMethod("lineTo",t)}moveTo(...t){return this._callContextMethod("moveTo",t)}quadraticCurveTo(...t){return this._callContextMethod("quadraticCurveTo",t)}rect(...t){return this._callContextMethod("rect",t)}roundRect(...t){return this._callContextMethod("roundRect",t)}poly(...t){return this._callContextMethod("poly",t)}regularPoly(...t){return this._callContextMethod("regularPoly",t)}roundPoly(...t){return this._callContextMethod("roundPoly",t)}roundShape(...t){return this._callContextMethod("roundShape",t)}filletRect(...t){return this._callContextMethod("filletRect",t)}chamferRect(...t){return this._callContextMethod("chamferRect",t)}star(...t){return this._callContextMethod("star",t)}svg(...t){return this._callContextMethod("svg",t)}restore(...t){return this._callContextMethod("restore",t)}save(){return this._callContextMethod("save",[])}getTransform(){return this.context.getTransform()}resetTransform(){return this._callContextMethod("resetTransform",[])}rotateTransform(...t){return this._callContextMethod("rotate",t)}scaleTransform(...t){return this._callContextMethod("scale",t)}setTransform(...t){return this._callContextMethod("setTransform",t)}transform(...t){return this._callContextMethod("transform",t)}translateTransform(...t){return this._callContextMethod("translate",t)}clear(){return this._callContextMethod("clear",[])}get fillStyle(){return this._context.fillStyle}set fillStyle(t){this._context.fillStyle=t}get strokeStyle(){return this._context.strokeStyle}set strokeStyle(t){this._context.strokeStyle=t}clone(t=!1){return t?new a(this._context.clone()):(this._ownedContext=null,new a(this._context))}lineStyle(t,e,s){(0,i.t6)(i.lj,"Graphics#lineStyle is no longer needed. Use Graphics#setStrokeStyle to set the stroke style.");const r={};return t&&(r.width=t),e&&(r.color=e),s&&(r.alpha=s),this.context.strokeStyle=r,this}beginFill(t,e){(0,i.t6)(i.lj,"Graphics#beginFill is no longer needed. Use Graphics#fill to fill the shape with the desired style.");const s={};return void 0!==t&&(s.color=t),void 0!==e&&(s.alpha=e),this.context.fillStyle=s,this}endFill(){(0,i.t6)(i.lj,"Graphics#endFill is no longer needed. Use Graphics#fill to fill the shape with the desired style."),this.context.fill();const t=this.context.strokeStyle;return t.width===n.T.defaultStrokeStyle.width&&t.color===n.T.defaultStrokeStyle.color&&t.alpha===n.T.defaultStrokeStyle.alpha||this.context.stroke(),this}drawCircle(...t){return(0,i.t6)(i.lj,"Graphics#drawCircle has been renamed to Graphics#circle"),this._callContextMethod("circle",t)}drawEllipse(...t){return(0,i.t6)(i.lj,"Graphics#drawEllipse has been renamed to Graphics#ellipse"),this._callContextMethod("ellipse",t)}drawPolygon(...t){return(0,i.t6)(i.lj,"Graphics#drawPolygon has been renamed to Graphics#poly"),this._callContextMethod("poly",t)}drawRect(...t){return(0,i.t6)(i.lj,"Graphics#drawRect has been renamed to Graphics#rect"),this._callContextMethod("rect",t)}drawRoundedRect(...t){return(0,i.t6)(i.lj,"Graphics#drawRoundedRect has been renamed to Graphics#roundRect"),this._callContextMethod("roundRect",t)}drawStar(...t){return(0,i.t6)(i.lj,"Graphics#drawStar has been renamed to Graphics#star"),this._callContextMethod("star",t)}}},9443:(t,e,s)=>{"use strict";s.d(e,{E:()=>o,f:()=>n});var i=s(9313),r=s(2208);function n(t,e,s){let n,h;return s.clear(),t.parent?e?n=t.parent.worldTransform:(h=r.u.get().identity(),n=o(t,h)):n=i.u.IDENTITY,a(t,s,n,e),h&&r.u.return(h),s.isValid||s.set(0,0,0,0),s}function a(t,e,s,n){if(!t.visible||!t.measurable)return;let o;n?o=t.worldTransform:(t.updateLocalTransform(),o=r.u.get(),o.appendFrom(t.localTransform,s));const h=e,l=!!t.effects.length;if(l&&(e=r.o.get().clear()),t.boundsArea)e.addRect(t.boundsArea,o);else{const s=t.bounds;s&&!s.isEmpty()&&(e.matrix=o,e.addBounds(s));for(let s=0;s<t.children.length;s++)a(t.children[s],e,o,n)}if(l){for(let s=0;s<t.effects.length;s++)t.effects[s].addBounds?.(e);h.addBounds(e,i.u.IDENTITY),r.o.return(e)}n||r.u.return(o)}function o(t,e){const s=t.parent;return s&&(o(s,e),s.updateLocalTransform(),e.append(s.localTransform)),e}},9636:(t,e,s)=>{"use strict";s.d(e,{c:()=>a});var i=s(9313),r=s(9252);const n=new i.u;class a{constructor(t=1/0,e=1/0,s=-1/0,i=-1/0){this.minX=1/0,this.minY=1/0,this.maxX=-1/0,this.maxY=-1/0,this.matrix=n,this.minX=t,this.minY=e,this.maxX=s,this.maxY=i}isEmpty(){return this.minX>this.maxX||this.minY>this.maxY}get rectangle(){this._rectangle||(this._rectangle=new r.M);const t=this._rectangle;return this.minX>this.maxX||this.minY>this.maxY?(t.x=0,t.y=0,t.width=0,t.height=0):t.copyFromBounds(this),t}clear(){return this.minX=1/0,this.minY=1/0,this.maxX=-1/0,this.maxY=-1/0,this.matrix=n,this}set(t,e,s,i){this.minX=t,this.minY=e,this.maxX=s,this.maxY=i}addFrame(t,e,s,i,r){r||(r=this.matrix);const n=r.a,a=r.b,o=r.c,h=r.d,l=r.tx,u=r.ty;let c=this.minX,d=this.minY,p=this.maxX,f=this.maxY,m=n*t+o*e+l,g=a*t+h*e+u;m<c&&(c=m),g<d&&(d=g),m>p&&(p=m),g>f&&(f=g),m=n*s+o*e+l,g=a*s+h*e+u,m<c&&(c=m),g<d&&(d=g),m>p&&(p=m),g>f&&(f=g),m=n*t+o*i+l,g=a*t+h*i+u,m<c&&(c=m),g<d&&(d=g),m>p&&(p=m),g>f&&(f=g),m=n*s+o*i+l,g=a*s+h*i+u,m<c&&(c=m),g<d&&(d=g),m>p&&(p=m),g>f&&(f=g),this.minX=c,this.minY=d,this.maxX=p,this.maxY=f}addRect(t,e){this.addFrame(t.x,t.y,t.x+t.width,t.y+t.height,e)}addBounds(t,e){this.addFrame(t.minX,t.minY,t.maxX,t.maxY,e)}addBoundsMask(t){this.minX=this.minX>t.minX?this.minX:t.minX,this.minY=this.minY>t.minY?this.minY:t.minY,this.maxX=this.maxX<t.maxX?this.maxX:t.maxX,this.maxY=this.maxY<t.maxY?this.maxY:t.maxY}applyMatrix(t){const e=this.minX,s=this.minY,i=this.maxX,r=this.maxY,{a:n,b:a,c:o,d:h,tx:l,ty:u}=t;let c=n*e+o*s+l,d=a*e+h*s+u;this.minX=c,this.minY=d,this.maxX=c,this.maxY=d,c=n*i+o*s+l,d=a*i+h*s+u,this.minX=c<this.minX?c:this.minX,this.minY=d<this.minY?d:this.minY,this.maxX=c>this.maxX?c:this.maxX,this.maxY=d>this.maxY?d:this.maxY,c=n*e+o*r+l,d=a*e+h*r+u,this.minX=c<this.minX?c:this.minX,this.minY=d<this.minY?d:this.minY,this.maxX=c>this.maxX?c:this.maxX,this.maxY=d>this.maxY?d:this.maxY,c=n*i+o*r+l,d=a*i+h*r+u,this.minX=c<this.minX?c:this.minX,this.minY=d<this.minY?d:this.minY,this.maxX=c>this.maxX?c:this.maxX,this.maxY=d>this.maxY?d:this.maxY}fit(t){return this.minX<t.left&&(this.minX=t.left),this.maxX>t.right&&(this.maxX=t.right),this.minY<t.top&&(this.minY=t.top),this.maxY>t.bottom&&(this.maxY=t.bottom),this}fitBounds(t,e,s,i){return this.minX<t&&(this.minX=t),this.maxX>e&&(this.maxX=e),this.minY<s&&(this.minY=s),this.maxY>i&&(this.maxY=i),this}pad(t,e=t){return this.minX-=t,this.maxX+=t,this.minY-=e,this.maxY+=e,this}ceil(){return this.minX=Math.floor(this.minX),this.minY=Math.floor(this.minY),this.maxX=Math.ceil(this.maxX),this.maxY=Math.ceil(this.maxY),this}clone(){return new a(this.minX,this.minY,this.maxX,this.maxY)}scale(t,e=t){return this.minX*=t,this.minY*=e,this.maxX*=t,this.maxY*=e,this}get x(){return this.minX}set x(t){const e=this.maxX-this.minX;this.minX=t,this.maxX=t+e}get y(){return this.minY}set y(t){const e=this.maxY-this.minY;this.minY=t,this.maxY=t+e}get width(){return this.maxX-this.minX}set width(t){this.maxX=this.minX+t}get height(){return this.maxY-this.minY}set height(t){this.maxY=this.minY+t}get left(){return this.minX}get right(){return this.maxX}get top(){return this.minY}get bottom(){return this.maxY}get isPositive(){return this.maxX-this.minX>0&&this.maxY-this.minY>0}get isValid(){return this.minX+this.minY!==1/0}addVertexData(t,e,s,i){let r=this.minX,n=this.minY,a=this.maxX,o=this.maxY;i||(i=this.matrix);const h=i.a,l=i.b,u=i.c,c=i.d,d=i.tx,p=i.ty;for(let i=e;i<s;i+=2){const e=t[i],s=t[i+1],f=h*e+u*s+d,m=l*e+c*s+p;r=f<r?f:r,n=m<n?m:n,a=f>a?f:a,o=m>o?m:o}this.minX=r,this.minY=n,this.maxX=a,this.maxY=o}containsPoint(t,e){return this.minX<=t&&this.minY<=e&&this.maxX>=t&&this.maxY>=e}toString(){return`[pixi.js:Bounds minX=${this.minX} minY=${this.minY} maxX=${this.maxX} maxY=${this.maxY} width=${this.width} height=${this.height}]`}copyFrom(t){return this.minX=t.minX,this.minY=t.minY,this.maxX=t.maxX,this.maxY=t.maxY,this}}},9903:(t,e,s)=>{"use strict";function i(t,e,s){const i=t.length;let r;if(e>=i||0===s)return;const n=i-(s=e+s>i?i-e:s);for(r=e;r<n;++r)t[r]=t[r+s];t.length=n}s.d(e,{d:()=>i})},9939:(t,e,s)=>{"use strict";function i(t){return t+=0===t?1:0,--t,t|=t>>>1,t|=t>>>2,t|=t>>>4,t|=t>>>8,1+(t|=t>>>16)}function r(t){return!(t&t-1||!t)}s.d(e,{U5:()=>i,f3:()=>r})}},i={};function r(t){var e=i[t];if(void 0!==e)return e.exports;var n=i[t]={exports:{}};return s[t](n,n.exports,r),n.exports}r.m=s,r.d=(t,e)=>{for(var s in e)r.o(e,s)&&!r.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:e[s]})},r.f={},r.e=t=>Promise.all(Object.keys(r.f).reduce((e,s)=>(r.f[s](t,e),e),[])),r.u=t=>t+".bundle.js",r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),t={},e="games-client-dev:",r.l=(s,i,n,a)=>{if(t[s])t[s].push(i);else{var o,h;if(void 0!==n)for(var l=document.getElementsByTagName("script"),u=0;u<l.length;u++){var c=l[u];if(c.getAttribute("src")==s||c.getAttribute("data-webpack")==e+n){o=c;break}}o||(h=!0,(o=document.createElement("script")).charset="utf-8",r.nc&&o.setAttribute("nonce",r.nc),o.setAttribute("data-webpack",e+n),o.src=s),t[s]=[i];var d=(e,i)=>{o.onerror=o.onload=null,clearTimeout(p);var r=t[s];if(delete t[s],o.parentNode&&o.parentNode.removeChild(o),r&&r.forEach(t=>t(i)),e)return e(i)},p=setTimeout(d.bind(null,void 0,{type:"timeout",target:o}),12e4);o.onerror=d.bind(null,o.onerror),o.onload=d.bind(null,o.onload),h&&document.head.appendChild(o)}},r.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t;r.g.importScripts&&(t=r.g.location+"");var e=r.g.document;if(!t&&e&&(e.currentScript&&"SCRIPT"===e.currentScript.tagName.toUpperCase()&&(t=e.currentScript.src),!t)){var s=e.getElementsByTagName("script");if(s.length)for(var i=s.length-1;i>-1&&(!t||!/^http(s?):/.test(t));)t=s[i--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=t})(),(()=>{var t={792:0};r.f.j=(e,s)=>{var i=r.o(t,e)?t[e]:void 0;if(0!==i)if(i)s.push(i[2]);else{var n=new Promise((s,r)=>i=t[e]=[s,r]);s.push(i[2]=n);var a=r.p+r.u(e),o=new Error;r.l(a,s=>{if(r.o(t,e)&&(0!==(i=t[e])&&(t[e]=void 0),i)){var n=s&&("load"===s.type?"missing":s.type),a=s&&s.target&&s.target.src;o.message="Loading chunk "+e+" failed.\n("+n+": "+a+")",o.name="ChunkLoadError",o.type=n,o.request=a,i[1](o)}},"chunk-"+e,e)}};var e=(e,s)=>{var i,n,[a,o,h]=s,l=0;if(a.some(e=>0!==t[e])){for(i in o)r.o(o,i)&&(r.m[i]=o[i]);h&&h(r)}for(e&&e(s);l<a.length;l++)n=a[l],r.o(t,n)&&t[n]&&t[n][0](),t[n]=0},s=self.webpackChunkgames_client_dev=self.webpackChunkgames_client_dev||[];s.forEach(e.bind(null,0)),s.push=e.bind(null,s.push.bind(s))})(),(()=>{"use strict";var t=r(8507);const e={extension:{type:t.Ag.Environment,name:"browser",priority:-1},test:()=>!0,load:async()=>{await Promise.all([r.e(509),r.e(397)]).then(r.bind(r,8397))}},s={extension:{type:t.Ag.Environment,name:"webworker",priority:0},test:()=>"undefined"!=typeof self&&void 0!==self.WorkerGlobalScope,load:async()=>{await Promise.all([r.e(509),r.e(162)]).then(r.bind(r,2162))}};r(5753),r(6312);var i=r(1761),n=r(800);let a,o;function h(t){return void 0!==a||(a=(()=>{const e={stencil:!0,failIfMajorPerformanceCaveat:t??n.k.defaultOptions.failIfMajorPerformanceCaveat};try{if(!i.e.get().getWebGLRenderingContext())return!1;let t=i.e.get().createCanvas().getContext("webgl",e);const s=!!t?.getContextAttributes()?.stencil;if(t){const e=t.getExtension("WEBGL_lose_context");e&&e.loseContext()}return t=null,s}catch(t){return!1}})()),a}async function l(t={}){return void 0!==o||(o=await(async()=>{const e=i.e.get().getNavigator().gpu;if(!e)return!1;try{const s=await e.requestAdapter(t);return await s.requestDevice(),!0}catch(t){return!1}})()),o}const u=["webgl","webgpu","canvas"];var c=r(7457),d=r(7073),p=r(4670);const f=class t{constructor(...t){this.stage=new c.mc,void 0!==t[0]&&(0,p.t6)(p.lj,"Application constructor options are deprecated, please use Application.init() instead.")}async init(e){e={...e},this.renderer=await async function(t){let e,s=[];t.preference?(s.push(t.preference),u.forEach(e=>{e!==t.preference&&s.push(e)})):s=u.slice();let i={};for(let a=0;a<s.length;a++){const o=s[a];if("webgpu"===o&&await l()){const{WebGPURenderer:s}=await Promise.all([r.e(580),r.e(98)]).then(r.bind(r,3098));e=s,i={...t,...t.webgpu};break}if("webgl"===o&&h(t.failIfMajorPerformanceCaveat??n.k.defaultOptions.failIfMajorPerformanceCaveat)){const{WebGLRenderer:s}=await Promise.all([r.e(580),r.e(584)]).then(r.bind(r,7584));e=s,i={...t,...t.webgl};break}if("canvas"===o)throw i={...t},new Error("CanvasRenderer is not yet implemented")}if(delete i.webgpu,delete i.webgl,!e)throw new Error("No available renderer for the current environment");const a=new e;return await a.init(i),a}(e),t._plugins.forEach(t=>{t.init.call(this,e)})}render(){this.renderer.render({container:this.stage})}get canvas(){return this.renderer.canvas}get view(){return(0,p.t6)(p.lj,"Application.view is deprecated, please use Application.canvas instead."),this.renderer.canvas}get screen(){return this.renderer.screen}destroy(e=!1,s=!1){const i=t._plugins.slice(0);i.reverse(),i.forEach(t=>{t.destroy.call(this)}),this.stage.destroy(s),this.stage=null,this.renderer.destroy(e),this.renderer=null}};f._plugins=[];let m=f;t.XO.handleByList(t.Ag.Application,m._plugins),t.XO.add(d.M);var g=r(5101),x=r(9252),y=(r(6557),r(9408));r(4486),t.XO.add(e,s);const _={backgroundColor:14540253,gravity:.1,shapesPerSecond:1};class b{constructor(t,e,s){this.activeShapes=[],this.generationInterval=null,this.shapesPerSecond=_.shapesPerSecond,this.shapeContainer=t,this.canvasBounds=e,this.shapeFactory=s,this.startGeneration()}startGeneration(){this.generationInterval&&clearInterval(this.generationInterval),this.shapesPerSecond>0&&(this.generationInterval=setInterval(()=>{this.createRandomShape()},1e3/this.shapesPerSecond))}setShapesPerSecond(t){this.shapesPerSecond=Math.max(0,t),this.startGeneration()}createShapeAtPosition(t,e){const s=this.shapeFactory.createIrregularShape(t,e);s.on("shape:clicked",t=>this.destroyShape(t)),this.activeShapes.push(s),this.shapeContainer.addChild(s)}createRandomShape(){const t=Math.random()*this.canvasBounds.width;this.addNewShape(t,-50)}addNewShape(t,e){const s=this.shapeFactory.createRandomShape(t,e);s.on("shape:clicked",t=>this.destroyShape(t)),this.activeShapes.push(s),this.shapeContainer.addChild(s)}destroyShape(t){const e=this.activeShapes.indexOf(t);e>-1&&(this.activeShapes.splice(e,1),t.destroy())}getShapeCount(){return this.activeShapes.length}getTotalArea(){return this.activeShapes.reduce((t,e)=>t+e.getArea(),0)}update(){for(let t=this.activeShapes.length-1;t>=0;t--){const e=this.activeShapes[t];e.destroyed||(e.update(_.gravity),e.y>this.canvasBounds.height+100&&this.destroyShape(e))}}}class v{constructor(){this.countText=document.getElementById("shapes-count-text"),this.areaText=document.getElementById("shapes-area-text"),this.shapesPerSecondValue=document.getElementById("shapes-per-second-value"),this.gravityValue=document.getElementById("gravity-value")}updateInfo(t,e){this.countText.innerText=`Shapes: ${t}`,this.areaText.innerText=`Area: ${Math.round(e)} px²`}updateControls(t,e){this.shapesPerSecondValue.innerText=t.toString(),this.gravityValue.innerText=e.toFixed(1)}}class w extends c.mc{constructor(){super(),this.velocity=new g.b(0,0),this.interactive=!0,this.cursor="pointer",this.on("pointerdown",t=>{t.stopPropagation(),this.emit("shape:clicked",this)})}update(t){this.velocity.y+=t,this.y+=this.velocity.y}}class C extends w{constructor(t,e,s){super(),this.radius=35,this.sides=3,this.x=t,this.y=e,this.graphics=new y.A,this.draw(s),this.addChild(this.graphics)}draw(t){this.graphics.regularPoly(0,0,this.radius,this.sides,-Math.PI/2).fill(t)}getArea(){return.5*this.sides*this.radius*this.radius*Math.sin(2*Math.PI/this.sides)}}class A extends w{constructor(t,e,s){super(),this.rectWidth=60,this.rectHeight=60,this.x=t,this.y=e,this.graphics=new y.A,this.draw(s),this.addChild(this.graphics)}draw(t){this.graphics.rect(-this.rectWidth/2,-this.rectHeight/2,this.rectWidth,this.rectHeight).fill(t)}getArea(){return this.rectWidth*this.rectHeight}}class S extends w{constructor(t,e,s){super(),this.radius=35,this.sides=5,this.x=t,this.y=e,this.graphics=new y.A,this.draw(s),this.addChild(this.graphics)}draw(t){this.graphics.regularPoly(0,0,this.radius,this.sides,-Math.PI/2).fill(t)}getArea(){return.5*this.sides*this.radius*this.radius*Math.sin(2*Math.PI/this.sides)}}class M extends w{constructor(t,e,s){super(),this.radius=35,this.sides=6,this.x=t,this.y=e,this.graphics=new y.A,this.draw(s),this.addChild(this.graphics)}draw(t){this.graphics.regularPoly(0,0,this.radius,this.sides,0).fill(t)}getArea(){return 3*Math.sqrt(3)/2*this.radius*this.radius}}class T extends w{constructor(t,e,s){super(),this.radius=30,this.x=t,this.y=e,this.graphics=new y.A,this.draw(s),this.addChild(this.graphics)}draw(t){this.graphics.circle(0,0,this.radius).fill(t)}getArea(){return Math.PI*this.radius*this.radius}}class P extends w{constructor(t,e,s){super(),this.halfWidth=40,this.halfHeight=25,this.x=t,this.y=e,this.graphics=new y.A,this.draw(s),this.addChild(this.graphics)}draw(t){this.graphics.ellipse(0,0,this.halfWidth,this.halfHeight).fill(t)}getArea(){return Math.PI*this.halfWidth*this.halfHeight}}class k extends w{constructor(t,e,s){super(),this.x=t,this.y=e,this.graphics=new y.A,this.draw(s),this.addChild(this.graphics)}draw(t){this.graphics.star(0,0,5,30,15).fill(t)}getArea(){return 1008}}class E extends w{constructor(t,e,s,i){super(),this.x=t,this.y=e,this.points=i,this.graphics=new y.A,this.draw(s),this.addChild(this.graphics)}draw(t){this.graphics.poly(this.points).fill(t)}getArea(){let t=0;const e=this.points.length;for(let s=0;s<e;s++){const i=(s+1)%e;t+=this.points[s].x*this.points[i].y,t-=this.points[i].x*this.points[s].y}return Math.abs(t/2)}}class R{constructor(){this.availableShapes=[C,A,S,M,T,P,k]}createRandomShape(t,e){return new(0,this.availableShapes[Math.floor(Math.random()*this.availableShapes.length)])(t,e,16777215*Math.random())}createIrregularShape(t,e){const s=16777215*Math.random(),i=[],r=Math.floor(6*Math.random())+5;for(let t=0;t<r;t++){const e=t/r*2*Math.PI,s=25+20*Math.random(),n=s*Math.cos(e),a=s*Math.sin(e);i.push(new g.b(n,a))}return new E(t,e,s,i)}}new class{constructor(){this.init()}init(){return t=this,e=void 0,i=function*(){this.app=new m,yield this.app.init({backgroundColor:_.backgroundColor,antialias:!0}),this.gameContainer=document.getElementById("game-container"),this.gameContainer.appendChild(this.app.canvas),this.gameAreaContainer=new c.mc,this.gameAreaContainer.interactive=!0,this.app.stage.addChild(this.gameAreaContainer),this.canvasBackground=new y.A,this.canvasMask=new y.A,this.shapeContainer=new c.mc,this.gameAreaContainer.addChild(this.canvasBackground,this.canvasMask,this.shapeContainer),this.shapeContainer.mask=this.canvasMask,this.onResize();const t=new R;this.shapeManager=new b(this.shapeContainer,this.canvasBounds,t),this.uiManager=new v,this.setupControls(),this.gameAreaContainer.on("pointerdown",this.onCanvasClick.bind(this)),this.app.ticker.add(()=>{this.shapeManager.update(),this.uiManager.updateInfo(this.shapeManager.getShapeCount(),this.shapeManager.getTotalArea())}),window.addEventListener("resize",this.onResize.bind(this))},new((s=void 0)||(s=Promise))(function(r,n){function a(t){try{h(i.next(t))}catch(t){n(t)}}function o(t){try{h(i.throw(t))}catch(t){n(t)}}function h(t){var e;t.done?r(t.value):(e=t.value,e instanceof s?e:new s(function(t){t(e)})).then(a,o)}h((i=i.apply(t,e||[])).next())});var t,e,s,i}setupControls(){document.getElementById("shapes-minus-btn").addEventListener("click",()=>{this.shapeManager.setShapesPerSecond(this.shapeManager.shapesPerSecond-1),this.uiManager.updateControls(this.shapeManager.shapesPerSecond,_.gravity)}),document.getElementById("shapes-plus-btn").addEventListener("click",()=>{this.shapeManager.setShapesPerSecond(this.shapeManager.shapesPerSecond+1),this.uiManager.updateControls(this.shapeManager.shapesPerSecond,_.gravity)}),document.getElementById("gravity-minus-btn").addEventListener("click",()=>{_.gravity=Math.max(.1,_.gravity-.1),this.uiManager.updateControls(this.shapeManager.shapesPerSecond,_.gravity)}),document.getElementById("gravity-plus-btn").addEventListener("click",()=>{_.gravity+=.1,this.uiManager.updateControls(this.shapeManager.shapesPerSecond,_.gravity)}),this.uiManager.updateControls(this.shapeManager.shapesPerSecond,_.gravity)}onCanvasClick(t){const e=this.gameAreaContainer.toLocal(t.global);this.shapeManager.createShapeAtPosition(e.x,e.y)}drawCanvasArea(){const t=this.app.screen.width,e=this.app.screen.height;this.gameAreaContainer.position.set(0,0),this.canvasBackground.clear(),this.canvasMask.clear();const s=[0,0,t,e];this.canvasBackground.rect(...s).fill(0),this.canvasMask.rect(...s).fill(16777215)}onResize(){const t=.8*window.innerWidth,e=.6*window.innerHeight;this.app.renderer.resize(t,e),this.canvasBounds?(this.canvasBounds.width=t,this.canvasBounds.height=e):this.canvasBounds=new x.M(0,0,t,e),this.drawCanvasArea()}}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,