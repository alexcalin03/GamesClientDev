/*! For license information please see 509.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunkgames_client_dev=self.webpackChunkgames_client_dev||[]).push([[509],{23:(e,t,r)=>{var i=r(8507),n=r(1979),s=r(9408),a=r(4016),o=r(9313),l=r(5611),u=r(4459),h=r(4e3),d=r(6665),c=r(6040),p=r(8475),f=r(5811);const g={name:"local-uniform-msdf-bit",vertex:{header:"\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32,\n                uRound:f32,\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        ",main:"\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        ",end:"\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        "},fragment:{header:"\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n         ",main:"\n            outColor = vec4<f32>(calculateMSDFAlpha(outColor, localUniforms.uColor, localUniforms.uDistance));\n        "}},m={name:"local-uniform-msdf-bit",vertex:{header:"\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        ",main:"\n            vColor *= uColor;\n            modelMatrix *= uTransformMatrix;\n        ",end:"\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        "},fragment:{header:"\n            uniform float uDistance;\n         ",main:"\n            outColor = vec4(calculateMSDFAlpha(outColor, vColor, uDistance));\n        "}},x={name:"msdf-bit",fragment:{header:"\n            fn calculateMSDFAlpha(msdfColor:vec4<f32>, shapeColor:vec4<f32>, distance:f32) -> f32 {\n\n                // MSDF\n                var median = msdfColor.r + msdfColor.g + msdfColor.b -\n                    min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                    max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n\n                // SDF\n                median = min(median, msdfColor.a);\n\n                var screenPxDistance = distance * (median - 0.5);\n                var alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                var luma: f32 = dot(shapeColor.rgb, vec3<f32>(0.299, 0.587, 0.114));\n                var gamma: f32 = mix(1.0, 1.0 / 2.2, luma);\n                var coverage: f32 = pow(shapeColor.a * alpha, gamma);\n\n                return coverage;\n\n            }\n        "}},_={name:"msdf-bit",fragment:{header:"\n            float calculateMSDFAlpha(vec4 msdfColor, vec4 shapeColor, float distance) {\n\n                // MSDF\n                float median = msdfColor.r + msdfColor.g + msdfColor.b -\n                                min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                                max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n\n                // SDF\n                median = min(median, msdfColor.a);\n\n                float screenPxDistance = distance * (median - 0.5);\n                float alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n\n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                float luma = dot(shapeColor.rgb, vec3(0.299, 0.587, 0.114));\n                float gamma = mix(1.0, 1.0 / 2.2, luma);\n                float coverage = pow(shapeColor.a * alpha, gamma);\n\n                return coverage;\n            }\n        "}};let y,v;class b extends p.M{constructor(e){const t=new f.k({uColor:{value:new Float32Array([1,1,1,1]),type:"vec4<f32>"},uTransformMatrix:{value:new o.u,type:"mat3x3<f32>"},uDistance:{value:4,type:"f32"},uRound:{value:0,type:"f32"}});y??(y=(0,l.v)({name:"sdf-shader",bits:[u.F,(0,h._)(e),g,x,d.b]})),v??(v=(0,l.I)({name:"sdf-shader",bits:[u.a,(0,h.P)(e),m,_,d.m]})),super({glProgram:v,gpuProgram:y,resources:{localUniforms:t,batchSamplers:(0,c.n)(e)}})}}var w=r(5957),T=r(4670),S=r(268),C=r(8291),P=r(2577),F=r(9252),k=r(7608),M=r(8293),R=r(4492),A=r(218),B=r(1242),U=r(3548),z=r(4486);class O extends z.A{constructor(){super(...arguments),this.chars=Object.create(null),this.lineHeight=0,this.fontFamily="",this.fontMetrics={fontSize:0,ascent:0,descent:0},this.baseLineOffset=0,this.distanceField={type:"none",range:0},this.pages=[],this.applyFillAsTint=!0,this.baseMeasurementFontSize=100,this.baseRenderedFontSize=100}get font(){return(0,T.t6)(T.lj,"BitmapFont.font is deprecated, please use BitmapFont.fontFamily instead."),this.fontFamily}get pageTextures(){return(0,T.t6)(T.lj,"BitmapFont.pageTextures is deprecated, please use BitmapFont.pages instead."),this.pages}get size(){return(0,T.t6)(T.lj,"BitmapFont.size is deprecated, please use BitmapFont.fontMetrics.fontSize instead."),this.fontMetrics.fontSize}get distanceFieldRange(){return(0,T.t6)(T.lj,"BitmapFont.distanceFieldRange is deprecated, please use BitmapFont.distanceField.range instead."),this.distanceField.range}get distanceFieldType(){return(0,T.t6)(T.lj,"BitmapFont.distanceFieldType is deprecated, please use BitmapFont.distanceField.type instead."),this.distanceField.type}destroy(e=!1){this.emit("destroy",this),this.removeAllListeners();for(const e in this.chars)this.chars[e].texture?.destroy();this.chars=null,e&&(this.pages.forEach(e=>e.texture.destroy(!0)),this.pages=null)}}const W=class e extends O{constructor(t){super(),this.resolution=1,this.pages=[],this._padding=0,this._measureCache=Object.create(null),this._currentChars=[],this._currentX=0,this._currentY=0,this._currentMaxCharHeight=0,this._currentPageIndex=-1,this._skipKerning=!1;const r={...e.defaultOptions,...t};this._textureSize=r.textureSize,this._mipmap=r.mipmap;const i=r.style.clone();r.overrideFill&&(i._fill.color=16777215,i._fill.alpha=1,i._fill.texture=R.g.WHITE,i._fill.fill=null),this.applyFillAsTint=r.overrideFill;const n=i.fontSize;i.fontSize=this.baseMeasurementFontSize;const s=(0,B.Z)(i);r.overrideSize?i._stroke&&(i._stroke.width*=this.baseRenderedFontSize/n):i.fontSize=this.baseRenderedFontSize=n,this._style=i,this._skipKerning=r.skipKerning??!1,this.resolution=r.resolution??1,this._padding=r.padding??4,r.textureStyle&&(this._textureStyle=r.textureStyle instanceof A.n?r.textureStyle:new A.n(r.textureStyle)),this.fontMetrics=a.P.measureFont(s),this.lineHeight=i.lineHeight||this.fontMetrics.fontSize||i.fontSize}ensureCharacters(e){const t=a.P.graphemeSegmenter(e).filter(e=>!this._currentChars.includes(e)).filter((e,t,r)=>r.indexOf(e)===t);if(!t.length)return;let r;this._currentChars=[...this._currentChars,...t],r=-1===this._currentPageIndex?this._nextPage():this.pages[this._currentPageIndex];let{canvas:i,context:n}=r.canvasAndContext,s=r.texture.source;const o=this._style;let l=this._currentX,u=this._currentY,h=this._currentMaxCharHeight;const d=this.baseRenderedFontSize/this.baseMeasurementFontSize,c=this._padding*d;let p=!1;const f=i.width/this.resolution,g=i.height/this.resolution;for(let e=0;e<t.length;e++){const r=t[e],m=a.P.measureText(r,o,i,!1);m.lineHeight=m.height;const x=m.width*d,_=Math.ceil(("italic"===o.fontStyle?2:1)*x)+2*c,y=m.height*d+2*c;if(p=!1,"\n"!==r&&"\r"!==r&&"\t"!==r&&" "!==r&&(p=!0,h=Math.ceil(Math.max(y,h))),l+_>f&&(u+=h,h=y,l=0,u+h>g)){s.update();const e=this._nextPage();i=e.canvasAndContext.canvas,n=e.canvasAndContext.context,s=e.texture.source,l=0,u=0,h=0}const v=x/d-(o.dropShadow?.distance??0)-(o._stroke?.width??0);if(this.chars[r]={id:r.codePointAt(0),xOffset:-this._padding,yOffset:-this._padding,xAdvance:v,kerning:{}},p){this._drawGlyph(n,m,l+c,u+c,d,o);const e=s.width*d,t=s.height*d,i=new F.M(l/e*s.width,u/t*s.height,_/e*s.width,y/t*s.height);this.chars[r].texture=new R.g({source:s,frame:i}),l+=Math.ceil(_)}}s.update(),this._currentX=l,this._currentY=u,this._currentMaxCharHeight=h,this._skipKerning&&this._applyKerning(t,n)}get pageTextures(){return(0,T.t6)(T.lj,"BitmapFont.pageTextures is deprecated, please use BitmapFont.pages instead."),this.pages}_applyKerning(e,t){const r=this._measureCache;for(let i=0;i<e.length;i++){const n=e[i];for(let e=0;e<this._currentChars.length;e++){const i=this._currentChars[e];let s=r[n];s||(s=r[n]=t.measureText(n).width);let a=r[i];a||(a=r[i]=t.measureText(i).width);let o=t.measureText(n+i).width,l=o-(s+a);l&&(this.chars[n].kerning[i]=l),o=t.measureText(n+i).width,l=o-(s+a),l&&(this.chars[i].kerning[n]=l)}}}_nextPage(){this._currentPageIndex++;const e=this.resolution,t=k.N.getOptimalCanvasAndContext(this._textureSize,this._textureSize,e);this._setupContext(t.context,this._style,e);const r=e*(this.baseRenderedFontSize/this.baseMeasurementFontSize),i=new R.g({source:new M.b({resource:t.canvas,resolution:r,alphaMode:"premultiply-alpha-on-upload",autoGenerateMipmaps:this._mipmap})});this._textureStyle&&(i.source.style=this._textureStyle);const n={canvasAndContext:t,texture:i};return this.pages[this._currentPageIndex]=n,n}_setupContext(e,t,r){t.fontSize=this.baseRenderedFontSize,e.scale(r,r),e.font=(0,B.Z)(t),t.fontSize=this.baseMeasurementFontSize,e.textBaseline=t.textBaseline;const i=t._stroke,n=i?.width??0;if(i&&(e.lineWidth=n,e.lineJoin=i.join,e.miterLimit=i.miterLimit,e.strokeStyle=(0,U.r)(i,e)),t._fill&&(e.fillStyle=(0,U.r)(t._fill,e)),t.dropShadow){const i=t.dropShadow,n=P.Q.shared.setValue(i.color).toArray(),s=i.blur*r,a=i.distance*r;e.shadowColor=`rgba(${255*n[0]},${255*n[1]},${255*n[2]},${i.alpha})`,e.shadowBlur=s,e.shadowOffsetX=Math.cos(i.angle)*a,e.shadowOffsetY=Math.sin(i.angle)*a}else e.shadowColor="black",e.shadowBlur=0,e.shadowOffsetX=0,e.shadowOffsetY=0}_drawGlyph(e,t,r,i,n,s){const a=t.text,o=t.fontProperties,l=s._stroke,u=(l?.width??0)*n,h=r+u/2,d=i-u/2,c=o.descent*n,p=t.lineHeight*n;let f=!1;s.stroke&&u&&(f=!0,e.strokeText(a,h,d+p-c));const{shadowBlur:g,shadowOffsetX:m,shadowOffsetY:x}=e;s._fill&&(f&&(e.shadowBlur=0,e.shadowOffsetX=0,e.shadowOffsetY=0),e.fillText(a,h,d+p-c)),f&&(e.shadowBlur=g,e.shadowOffsetX=m,e.shadowOffsetY=x)}destroy(){super.destroy();for(let e=0;e<this.pages.length;e++){const{canvasAndContext:t,texture:r}=this.pages[e];k.N.returnCanvasAndContext(t),r.destroy(!0)}this.pages=null}};W.defaultOptions={textureSize:512,style:new C.x,mipmap:!0};let G=W;function D(e,t,r,i){const n={width:0,height:0,offsetY:0,scale:t.fontSize/r.baseMeasurementFontSize,lines:[{width:0,charPositions:[],spaceWidth:0,spacesIndex:[],chars:[]}]};n.offsetY=r.baseLineOffset;let s=n.lines[0],a=null,o=!0;const l={spaceWord:!1,width:0,start:0,index:0,positions:[],chars:[]},u=r.baseMeasurementFontSize/t.fontSize,h=t.letterSpacing*u,d=t.wordWrapWidth*u,c=t.lineHeight?t.lineHeight*u:r.lineHeight,p=t.wordWrap&&t.breakWords,f=e=>{const t=s.width;for(let r=0;r<l.index;r++){const i=e.positions[r];s.chars.push(e.chars[r]),s.charPositions.push(i+t)}s.width+=e.width,o=!1,l.width=0,l.index=0,l.chars.length=0},g=()=>{let e=s.chars.length-1;if(i){let t=s.chars[e];for(;" "===t;)s.width-=r.chars[t].xAdvance,t=s.chars[--e]}n.width=Math.max(n.width,s.width),s={width:0,charPositions:[],chars:[],spaceWidth:0,spacesIndex:[]},o=!0,n.lines.push(s),n.height+=c},m=e=>e-h>d;for(let i=0;i<e.length+1;i++){let n;const u=i===e.length;u||(n=e[i]);const d=r.chars[n]||r.chars[" "];if(/(?:\s)/.test(n)||"\r"===n||"\n"===n||u){if(!o&&t.wordWrap&&m(s.width+l.width)?(g(),f(l),u||s.charPositions.push(0)):(l.start=s.width,f(l),u||s.charPositions.push(0)),"\r"===n||"\n"===n)g();else if(!u){const e=d.xAdvance+(d.kerning[a]||0)+h;s.width+=e,s.spaceWidth=e,s.spacesIndex.push(s.charPositions.length),s.chars.push(n)}}else{const e=d.kerning[a]||0,t=d.xAdvance+e+h;p&&m(s.width+l.width+t)&&(f(l),g()),l.positions[l.index++]=l.width+e,l.chars.push(n),l.width+=t}a=n}return g(),"center"===t.align?function(e){for(let t=0;t<e.lines.length;t++){const r=e.lines[t],i=e.width/2-r.width/2;for(let e=0;e<r.charPositions.length;e++)r.charPositions[e]+=i}}(n):"right"===t.align?function(e){for(let t=0;t<e.lines.length;t++){const r=e.lines[t],i=e.width-r.width;for(let e=0;e<r.charPositions.length;e++)r.charPositions[e]+=i}}(n):"justify"===t.align&&function(e){const t=e.width;for(let r=0;r<e.lines.length;r++){const i=e.lines[r];let n=0,s=i.spacesIndex[n++],a=0;const o=i.spacesIndex.length,l=(t-i.width)/o;for(let e=0;e<i.charPositions.length;e++)e===s&&(s=i.spacesIndex[n++],a+=l),i.charPositions[e]+=a}}(n),n}let I=0;const E=new class{constructor(){this.ALPHA=[["a","z"],["A","Z"]," "],this.NUMERIC=[["0","9"]],this.ALPHANUMERIC=[["a","z"],["A","Z"],["0","9"]," "],this.ASCII=[[" ","~"]],this.defaultOptions={chars:this.ALPHANUMERIC,resolution:1,padding:4,skipKerning:!1,textureStyle:null},this.measureCache=(0,w.g)(1e3)}getFont(e,t){let r=`${t.fontFamily}-bitmap`,i=!0;if(t._fill.fill&&!t._stroke?(r+=t._fill.fill.styleKey,i=!1):(t._stroke||t.dropShadow)&&(r=`${t.styleKey}-bitmap`,i=!1),!n.l.has(r)){const e=Object.create(t);e.lineHeight=0;const s=new G({style:e,overrideFill:i,overrideSize:!0,...this.defaultOptions});I++,I>50&&(0,S.R)("BitmapText",`You have dynamically created ${I} bitmap fonts, this can be inefficient. Try pre installing your font styles using \`BitmapFont.install({name:"style1", style})\``),s.once("destroy",()=>{I--,n.l.remove(r)}),n.l.set(r,s)}const s=n.l.get(r);return s.ensureCharacters?.(e),s}getLayout(e,t,r=!0){const i=this.getFont(e,t),n=`${e}-${t.styleKey}-${r}`;if(this.measureCache.has(n))return this.measureCache.get(n);const s=D(a.P.graphemeSegmenter(e),t,i,r);return this.measureCache.set(n,s),s}measureText(e,t,r=!0){return this.getLayout(e,t,r)}install(...e){let t=e[0];"string"==typeof t&&(t={name:t,style:e[1],chars:e[2]?.chars,resolution:e[2]?.resolution,padding:e[2]?.padding,skipKerning:e[2]?.skipKerning},(0,T.t6)(T.lj,"BitmapFontManager.install(name, style, options) is deprecated, use BitmapFontManager.install({name, style, ...options})"));const r=t?.name;if(!r)throw new Error("[BitmapFontManager] Property `name` is required.");t={...this.defaultOptions,...t};const i=t.style,s=i instanceof C.x?i:new C.x(i),a=t.dynamicFill??this._canUseTintForStyle(s),o=new G({style:s,overrideFill:a,skipKerning:t.skipKerning,padding:t.padding,resolution:t.resolution,overrideSize:!1,textureStyle:t.textureStyle}),l=function(e){if(""===e)return[];"string"==typeof e&&(e=[e]);const t=[];for(let r=0,i=e.length;r<i;r++){const i=e[r];if(Array.isArray(i)){if(2!==i.length)throw new Error(`[BitmapFont]: Invalid character range length, expecting 2 got ${i.length}.`);if(0===i[0].length||0===i[1].length)throw new Error("[BitmapFont]: Invalid character delimiter.");const e=i[0].charCodeAt(0),r=i[1].charCodeAt(0);if(r<e)throw new Error("[BitmapFont]: Invalid character range.");for(let i=e,n=r;i<=n;i++)t.push(String.fromCharCode(i))}else t.push(...Array.from(i))}if(0===t.length)throw new Error("[BitmapFont]: Empty set when resolving characters.");return t}(t.chars);return o.ensureCharacters(l.join("")),n.l.set(`${r}-bitmap`,o),o.once("destroy",()=>n.l.remove(`${r}-bitmap`)),o}uninstall(e){const t=`${e}-bitmap`,r=n.l.get(t);r&&r.destroy()}_canUseTintForStyle(e){return!(e._stroke||e.dropShadow&&0!==e.dropShadow.color||e._fill.fill||16777215!==e._fill.color)}};class L extends s.A{destroy(){this.context.customShader&&this.context.customShader.destroy(),super.destroy()}}class V{constructor(e){this._renderer=e}validateRenderable(e){const t=this._getGpuBitmapText(e);return this._renderer.renderPipes.graphics.validateRenderable(t)}addRenderable(e,t){const r=this._getGpuBitmapText(e);H(e,r),e._didTextUpdate&&(e._didTextUpdate=!1,this._updateContext(e,r)),this._renderer.renderPipes.graphics.addRenderable(r,t),r.context.customShader&&this._updateDistanceField(e)}updateRenderable(e){const t=this._getGpuBitmapText(e);H(e,t),this._renderer.renderPipes.graphics.updateRenderable(t),t.context.customShader&&this._updateDistanceField(e)}_updateContext(e,t){const{context:r}=t,i=E.getFont(e.text,e._style);r.clear(),"none"!==i.distanceField.type&&(r.customShader||(r.customShader=new b(this._renderer.limits.maxBatchableTextures)));const n=a.P.graphemeSegmenter(e.text),s=e._style;let o=i.baseLineOffset;const l=D(n,s,i,!0),u=s.padding,h=l.scale;let d=l.width,c=l.height+l.offsetY;s._stroke&&(d+=s._stroke.width/h,c+=s._stroke.width/h),r.translate(-e._anchor._x*d-u,-e._anchor._y*c-u).scale(h,h);const p=i.applyFillAsTint?s._fill.color:16777215;let f=i.fontMetrics.fontSize,g=i.lineHeight;s.lineHeight&&(f=s.fontSize/h,g=s.lineHeight/h);let m=(g-f)/2;m-i.baseLineOffset<0&&(m=0);for(let e=0;e<l.lines.length;e++){const t=l.lines[e];for(let e=0;e<t.charPositions.length;e++){const n=t.chars[e],s=i.chars[n];if(s?.texture){const i=s.texture;r.texture(i,p||"black",Math.round(t.charPositions[e]+s.xOffset),Math.round(o+s.yOffset+m),i.orig.width,i.orig.height)}}o+=g}}_getGpuBitmapText(e){return e._gpuData[this._renderer.uid]||this.initGpuText(e)}initGpuText(e){const t=new L;return e._gpuData[this._renderer.uid]=t,this._updateContext(e,t),t}_updateDistanceField(e){const t=this._getGpuBitmapText(e).context,r=e._style.fontFamily,i=n.l.get(`${r}-bitmap`),{a:s,b:a,c:o,d:l}=e.groupTransform,u=Math.sqrt(s*s+a*a),h=Math.sqrt(o*o+l*l),d=(Math.abs(u)+Math.abs(h))/2,c=i.baseRenderedFontSize/e._style.fontSize,p=d*i.distanceField.range*(1/c);t.customShader.resources.localUniforms.uniforms.uDistance=p}destroy(){this._renderer=null}}function H(e,t){t.groupTransform=e.groupTransform,t.groupColorAlpha=e.groupColorAlpha,t.groupColor=e.groupColor,t.groupBlendMode=e.groupBlendMode,t.globalDisplayStatus=e.globalDisplayStatus,t.groupTransform=e.groupTransform,t.localDisplayStatus=e.localDisplayStatus,t.groupAlpha=e.groupAlpha,t._roundPixels=e._roundPixels}V.extension={type:[i.Ag.WebGLPipes,i.Ag.WebGPUPipes,i.Ag.CanvasPipes],name:"bitmapText"},i.XO.add(V)},1242:(e,t,r)=>{r.d(t,{Z:()=>n});const i=["serif","sans-serif","monospace","cursive","fantasy","system-ui"];function n(e){const t="number"==typeof e.fontSize?`${e.fontSize}px`:e.fontSize;let r=e.fontFamily;Array.isArray(e.fontFamily)||(r=e.fontFamily.split(","));for(let e=r.length-1;e>=0;e--){let t=r[e].trim();/([\"\'])[^\'\"]+\1/.test(t)||i.includes(t)||(t=`"${t}"`),r[e]=t}return`${e.fontStyle} ${e.fontVariant} ${e.fontWeight} ${t} ${r.join(",")}`}},2067:(e,t,r)=>{r.d(t,{Ls:()=>i,_Q:()=>n,mA:()=>s});const i={name:"local-uniform-bit",vertex:{header:"\n\n            struct LocalUniforms {\n                uTransformMatrix:mat3x3<f32>,\n                uColor:vec4<f32>,\n                uRound:f32,\n            }\n\n            @group(1) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        ",main:"\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        ",end:"\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        "}},n={...i,vertex:{...i.vertex,header:i.vertex.header.replace("group(1)","group(2)")}},s={name:"local-uniform-bit",vertex:{header:"\n\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        ",main:"\n            vColor *= uColor;\n            modelMatrix = uTransformMatrix;\n        ",end:"\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        "}}},2289:(e,t,r)=>{r.d(t,{s:()=>n});var i=r(2048);function n(e,t){const{texture:r,bounds:n}=e,s=t._style._getFinalPadding();(0,i.y)(n,t._anchor,r);const a=t._anchor._x*s*2,o=t._anchor._y*s*2;n.minX-=s-a,n.minY-=s-o,n.maxX-=s-a,n.maxY-=s-o}},2558:(e,t,r)=>{r.d(t,{M:()=>s});var i=r(2437);const n=new(r(9636).c);function s(e,t,r,s){const a=n;a.minX=0,a.minY=0,a.maxX=e.width/s|0,a.maxY=e.height/s|0;const o=i.W.getOptimalTexture(a.width,a.height,s,!1);return o.source.uploadMethodId="image",o.source.resource=e,o.source.alphaMode="premultiply-alpha-on-upload",o.frame.width=t/s,o.frame.height=r/s,o.source.emit("update",o.source),o.updateUvs(),o}},2623:(e,t,r)=>{var i=r(8507),n=r(4492),s=r(2289),a=r(8422);class o extends a.K{constructor(e){super(),this.generatingTexture=!1,this.currentKey="--",this._renderer=e,e.runners.resolutionChange.add(this)}resolutionChange(){const e=this.renderable;e._autoResolution&&e.onViewUpdate()}destroy(){const{htmlText:e}=this._renderer;null===e.getReferenceCount(this.currentKey)?e.returnTexturePromise(this.texturePromise):e.decreaseReferenceCount(this.currentKey),this._renderer.runners.resolutionChange.remove(this),this.texturePromise=null,this._renderer=null}}class l{constructor(e){this._renderer=e}validateRenderable(e){const t=this._getGpuText(e),r=e.styleKey;return t.currentKey!==r}addRenderable(e,t){const r=this._getGpuText(e);if(e._didTextUpdate){const t=e._autoResolution?this._renderer.resolution:e.resolution;r.currentKey===e.styleKey&&e.resolution===t||this._updateGpuText(e).catch(e=>{console.error(e)}),e._didTextUpdate=!1,(0,s.s)(r,e)}this._renderer.renderPipes.batch.addToBatch(r,t)}updateRenderable(e){const t=this._getGpuText(e);t._batcher.updateElement(t)}async _updateGpuText(e){e._didTextUpdate=!1;const t=this._getGpuText(e);if(t.generatingTexture)return;const r=t.texturePromise;t.texturePromise=null,t.generatingTexture=!0,e._resolution=e._autoResolution?this._renderer.resolution:e.resolution;let i=this._renderer.htmlText.getTexturePromise(e);r&&(i=i.finally(()=>{this._renderer.htmlText.decreaseReferenceCount(t.currentKey),this._renderer.htmlText.returnTexturePromise(r)})),t.texturePromise=i,t.currentKey=e.styleKey,t.texture=await i;const n=e.renderGroup||e.parentRenderGroup;n&&(n.structureDidChange=!0),t.generatingTexture=!1,(0,s.s)(t,e)}_getGpuText(e){return e._gpuData[this._renderer.uid]||this.initGpuText(e)}initGpuText(e){const t=new o(this._renderer);return t.renderable=e,t.transform=e.groupTransform,t.texture=n.g.EMPTY,t.bounds={minX:0,maxX:1,minY:0,maxY:0},t.roundPixels=this._renderer._roundPixels|e._roundPixels,e._resolution=e._autoResolution?this._renderer.resolution:e.resolution,e._gpuData[this._renderer.uid]=t,t}destroy(){this._renderer=null}}l.extension={type:[i.Ag.WebGLPipes,i.Ag.WebGPUPipes,i.Ag.CanvasPipes],name:"htmlText"};var u=r(7608),h=r(2437),d=r(5099),c=r(1761),p=r(268),f=r(8655),g=r(2558);const m="http://www.w3.org/2000/svg",x="http://www.w3.org/1999/xhtml";class _{constructor(){this.svgRoot=document.createElementNS(m,"svg"),this.foreignObject=document.createElementNS(m,"foreignObject"),this.domElement=document.createElementNS(x,"div"),this.styleElement=document.createElementNS(x,"style");const{foreignObject:e,svgRoot:t,styleElement:r,domElement:i}=this;e.setAttribute("width","10000"),e.setAttribute("height","10000"),e.style.overflow="hidden",t.appendChild(e),e.appendChild(r),e.appendChild(i),this.image=c.e.get().createImage()}destroy(){this.svgRoot.remove(),this.foreignObject.remove(),this.styleElement.remove(),this.domElement.remove(),this.image.src="",this.image.remove(),this.svgRoot=null,this.foreignObject=null,this.styleElement=null,this.domElement=null,this.image=null,this.canvasAndContext=null}}var y=r(1979);const v=new Map;let b;class w{constructor(e){this._activeTextures={},this._renderer=e,this._createCanvas=e.type===d.W.WEBGPU}getTexture(e){return this.getTexturePromise(e)}getManagedTexture(e){const t=e.styleKey;if(this._activeTextures[t])return this._increaseReferenceCount(t),this._activeTextures[t].promise;const r=this._buildTexturePromise(e).then(e=>(this._activeTextures[t].texture=e,e));return this._activeTextures[t]={texture:null,promise:r,usageCount:1},r}getReferenceCount(e){return this._activeTextures[e]?.usageCount??null}_increaseReferenceCount(e){this._activeTextures[e].usageCount++}decreaseReferenceCount(e){const t=this._activeTextures[e];t&&(t.usageCount--,0===t.usageCount&&(t.texture?this._cleanUp(t.texture):t.promise.then(e=>{t.texture=e,this._cleanUp(t.texture)}).catch(()=>{(0,p.R)("HTMLTextSystem: Failed to clean texture")}),this._activeTextures[e]=null))}getTexturePromise(e){return this._buildTexturePromise(e)}async _buildTexturePromise(e){const{text:t,style:r,resolution:i,textureStyle:n}=e,s=f.Z.get(_),a=function(e,t){const r=t.fontFamily,i=[],n={},s=e.match(/font-family:([^;"\s]+)/g);function a(e){n[e]||(i.push(e),n[e]=!0)}if(Array.isArray(r))for(let e=0;e<r.length;e++)a(r[e]);else a(r);s&&s.forEach(e=>{a(e.split(":")[1].trim())});for(const e in t.tagStyles)a(t.tagStyles[e].fontFamily);return i}(t,r),o=await async function(e){const t=e.filter(e=>y.l.has(`${e}-and-url`)).map(e=>{if(!v.has(e)){const{entries:t}=y.l.get(`${e}-and-url`),r=[];t.forEach(t=>{const i=t.url,n=t.faces.map(e=>({weight:e.weight,style:e.style}));r.push(...n.map(t=>async function(e,t){const r=await async function(e){const t=await c.e.get().fetch(e),r=await t.blob(),i=new FileReader;return await new Promise((e,t)=>{i.onloadend=()=>e(i.result),i.onerror=t,i.readAsDataURL(r)})}(t);return`@font-face {\n        font-family: "${e.fontFamily}";\n        font-weight: ${e.fontWeight};\n        font-style: ${e.fontStyle};\n        src: url('${r}');\n    }`}({fontWeight:t.weight,fontStyle:t.style,fontFamily:e},i)))}),v.set(e,Promise.all(r).then(e=>e.join("\n")))}return v.get(e)});return(await Promise.all(t)).join("\n")}(a),l=function(e,t,r,i){i||(i=b||(b=new _));const{domElement:n,styleElement:s,svgRoot:a}=i;n.innerHTML=`<style>${t.cssStyle};</style><div style='padding:0'>${e}</div>`,n.setAttribute("style","transform-origin: top left; display: inline-block"),r&&(s.textContent=r),document.body.appendChild(a);const o=n.getBoundingClientRect();a.remove();const l=2*t.padding;return{width:o.width-l,height:o.height-l}}(t,r,o,s),h=Math.ceil(Math.ceil(Math.max(1,l.width)+2*r.padding)*i),d=Math.ceil(Math.ceil(Math.max(1,l.height)+2*r.padding)*i),p=s.image;p.width=2+(0|h),p.height=2+(0|d);const m=function(e,t,r,i,n){const{domElement:s,styleElement:a,svgRoot:o}=n;s.innerHTML=`<style>${t.cssStyle}</style><div style='padding:0;'>${e}</div>`,s.setAttribute("style",`transform: scale(${r});transform-origin: top left; display: inline-block`),a.textContent=i;const{width:l,height:u}=n.image;return o.setAttribute("width",l.toString()),o.setAttribute("height",u.toString()),(new XMLSerializer).serializeToString(o)}(t,r,i,o,s);await function(e,t,r){return new Promise(async i=>{r&&await new Promise(e=>setTimeout(e,100)),e.onload=()=>{i()},e.src=`data:image/svg+xml;charset=utf8,${encodeURIComponent(t)}`,e.crossOrigin="anonymous"})}(p,m,function(){const{userAgent:e}=c.e.get().getNavigator();return/^((?!chrome|android).)*safari/i.test(e)}()&&a.length>0);const x=p;let w;this._createCanvas&&(w=function(e,t){const r=u.N.getOptimalCanvasAndContext(e.width,e.height,t),{context:i}=r;return i.clearRect(0,0,e.width,e.height),i.drawImage(e,0,0),r}(p,i));const T=(0,g.M)(w?w.canvas:x,p.width-2,p.height-2,i);return n&&(T.source.style=n),this._createCanvas&&(this._renderer.texture.initSource(T.source),u.N.returnCanvasAndContext(w)),f.Z.return(s),T}returnTexturePromise(e){e.then(e=>{this._cleanUp(e)}).catch(()=>{(0,p.R)("HTMLTextSystem: Failed to clean texture")})}_cleanUp(e){h.W.returnTexture(e,!0),e.source.resource=null,e.source.uploadMethodId="unknown"}destroy(){this._renderer=null;for(const e in this._activeTextures)this._activeTextures[e]&&this.returnTexturePromise(this._activeTextures[e].promise);this._activeTextures=null}}w.extension={type:[i.Ag.WebGLSystem,i.Ag.WebGPUSystem,i.Ag.CanvasSystem],name:"htmlText"},i.XO.add(w),i.XO.add(l)},2760:(e,t,r)=>{function i(e,t,r){const i=(e>>24&255)/255;t[r++]=(255&e)/255*i,t[r++]=(e>>8&255)/255*i,t[r++]=(e>>16&255)/255*i,t[r++]=i}r.d(t,{V:()=>i})},3548:(e,t,r)=>{r.d(t,{r:()=>h});var i=r(2577),n=r(9313),s=r(4492),a=r(268),o=r(7276),l=r(2806);const u=1e5;function h(e,t,r,h=0){if(e.texture===s.g.WHITE&&!e.fill)return i.Q.shared.setValue(e.color).setAlpha(e.alpha??1).toHexa();if(!e.fill){const r=t.createPattern(e.texture.source.resource,"repeat"),i=e.matrix.copyTo(n.u.shared);return i.scale(e.texture.frame.width,e.texture.frame.height),r.setTransform(i),r}if(e.fill instanceof l.m){const r=e.fill,i=t.createPattern(r.texture.source.resource,"repeat"),s=r.transform.copyTo(n.u.shared);return s.scale(r.texture.frame.width,r.texture.frame.height),i.setTransform(s),i}if(e.fill instanceof o._){const n=e.fill,s="linear"===n.type,a="local"===n.textureSpace;let o,l=1,d=1;a&&r&&(l=r.width+h,d=r.height+h);let c=!1;if(s){const{start:e,end:r}=n;o=t.createLinearGradient(e.x*l,e.y*d,r.x*l,r.y*d),c=Math.abs(r.x-e.x)<Math.abs(.1*(r.y-e.y))}else{const{center:e,innerRadius:r,outerCenter:i,outerRadius:s}=n;o=t.createRadialGradient(e.x*l,e.y*d,r*l,i.x*l,i.y*d,s*l)}if(c&&a&&r){const e=r.lineHeight/d;for(let t=0;t<r.lines.length;t++){const s=(t*r.lineHeight+h/2)/d;n.colorStops.forEach(t=>{const r=s+t.offset*e;o.addColorStop(Math.floor(r*u)/u,i.Q.shared.setValue(t.color).toHex())})}}else n.colorStops.forEach(e=>{o.addColorStop(e.offset,i.Q.shared.setValue(e.color).toHex())});return o}return(0,a.R)("FillStyle not recognised",e),"red"}},3859:(e,t,r)=>{var i=r(8507);class n{constructor(e){this._renderer=e}push(e,t,r){this._renderer.renderPipes.batch.break(r),r.add({renderPipeId:"filter",canBundle:!1,action:"pushFilter",container:t,filterEffect:e})}pop(e,t,r){this._renderer.renderPipes.batch.break(r),r.add({renderPipeId:"filter",action:"popFilter",canBundle:!1})}execute(e){"pushFilter"===e.action?this._renderer.filter.push(e):"popFilter"===e.action&&this._renderer.filter.pop()}destroy(){this._renderer=null}}n.extension={type:[i.Ag.WebGLPipes,i.Ag.WebGPUPipes,i.Ag.CanvasPipes],name:"filter"};var s=r(9113),a=r(3012),o=r(6554),l="struct GlobalFilterUniforms {\n  uInputSize: vec4<f32>,\n  uInputPixel: vec4<f32>,\n  uInputClamp: vec4<f32>,\n  uOutputFrame: vec4<f32>,\n  uGlobalFrame: vec4<f32>,\n  uOutputTexture: vec4<f32>,\n};\n\n@group(0) @binding(0) var <uniform> gfu: GlobalFilterUniforms;\n@group(0) @binding(1) var uTexture: texture_2d<f32>;\n@group(0) @binding(2) var uSampler: sampler;\n\nstruct VSOutput {\n  @builtin(position) position: vec4<f32>,\n  @location(0) uv: vec2<f32>\n};\n\nfn filterVertexPosition(aPosition: vec2<f32>) -> vec4<f32>\n{\n    var position = aPosition * gfu.uOutputFrame.zw + gfu.uOutputFrame.xy;\n\n    position.x = position.x * (2.0 / gfu.uOutputTexture.x) - 1.0;\n    position.y = position.y * (2.0 * gfu.uOutputTexture.z / gfu.uOutputTexture.y) - gfu.uOutputTexture.z;\n\n    return vec4(position, 0.0, 1.0);\n}\n\nfn filterTextureCoord(aPosition: vec2<f32>) -> vec2<f32>\n{\n    return aPosition * (gfu.uOutputFrame.zw * gfu.uInputSize.zw);\n}\n\n@vertex\nfn mainVertex(\n  @location(0) aPosition: vec2<f32>,\n) -> VSOutput {\n  return VSOutput(\n   filterVertexPosition(aPosition),\n   filterTextureCoord(aPosition)\n  );\n}\n\n@fragment\nfn mainFragment(\n  @location(0) uv: vec2<f32>,\n) -> @location(0) vec4<f32> {\n    return textureSample(uTexture, uSampler, uv);\n}\n";class u extends o.d{constructor(){super({gpuProgram:a.B.from({vertex:{source:l,entryPoint:"mainVertex"},fragment:{source:l,entryPoint:"mainFragment"},name:"passthrough-filter"}),glProgram:s.M.from({vertex:"in vec2 aPosition;\nout vec2 vTextureCoord;\n\nuniform vec4 uInputSize;\nuniform vec4 uOutputFrame;\nuniform vec4 uOutputTexture;\n\nvec4 filterVertexPosition( void )\n{\n    vec2 position = aPosition * uOutputFrame.zw + uOutputFrame.xy;\n    \n    position.x = position.x * (2.0 / uOutputTexture.x) - 1.0;\n    position.y = position.y * (2.0*uOutputTexture.z / uOutputTexture.y) - uOutputTexture.z;\n\n    return vec4(position, 0.0, 1.0);\n}\n\nvec2 filterTextureCoord( void )\n{\n    return aPosition * (uOutputFrame.zw * uInputSize.zw);\n}\n\nvoid main(void)\n{\n    gl_Position = filterVertexPosition();\n    vTextureCoord = filterTextureCoord();\n}\n",fragment:"in vec2 vTextureCoord;\nout vec4 finalColor;\nuniform sampler2D uTexture;\nvoid main() {\n    finalColor = texture(uTexture, vTextureCoord);\n}\n",name:"passthrough-filter"})})}}var h=r(9313),d=r(3513),c=r(6011),p=r(5811),f=r(4492),g=r(2437),m=r(5099),x=r(9636);const _=new h.u;var y=r(268);const v=new c.V({attributes:{aPosition:{buffer:new Float32Array([0,0,1,0,1,1,0,1]),format:"float32x2",stride:8,offset:0}},indexBuffer:new Uint32Array([0,1,2,0,2,3])});class b{constructor(){this.skip=!1,this.inputTexture=null,this.backTexture=null,this.filters=null,this.bounds=new x.c,this.container=null,this.blendRequired=!1,this.outputRenderSurface=null,this.globalFrame={x:0,y:0,width:0,height:0},this.firstEnabledIndex=-1,this.lastEnabledIndex=-1}}class w{constructor(e){this._filterStackIndex=0,this._filterStack=[],this._filterGlobalUniforms=new p.k({uInputSize:{value:new Float32Array(4),type:"vec4<f32>"},uInputPixel:{value:new Float32Array(4),type:"vec4<f32>"},uInputClamp:{value:new Float32Array(4),type:"vec4<f32>"},uOutputFrame:{value:new Float32Array(4),type:"vec4<f32>"},uGlobalFrame:{value:new Float32Array(4),type:"vec4<f32>"},uOutputTexture:{value:new Float32Array(4),type:"vec4<f32>"}}),this._globalFilterBindGroup=new d.T({}),this.renderer=e}get activeBackTexture(){return this._activeFilterData?.backTexture}push(e){const t=this.renderer,r=e.filterEffect.filters,i=this._pushFilterData();i.skip=!1,i.filters=r,i.container=e.container,i.outputRenderSurface=t.renderTarget.renderSurface;const n=t.renderTarget.renderTarget.colorTexture.source,s=n.resolution,a=n.antialias;if(r.every(e=>!e.enabled))return void(i.skip=!0);const o=i.bounds;if(this._calculateFilterArea(e,o),this._calculateFilterBounds(i,t.renderTarget.rootViewPort,a,s,1),i.skip)return;const l=this._getPreviousFilterData(),u=this._findFilterResolution(s);let h=0,d=0;l&&(h=l.bounds.minX,d=l.bounds.minY),this._calculateGlobalFrame(i,h,d,u,n.width,n.height),this._setupFilterTextures(i,o,t,l)}generateFilteredTexture({texture:e,filters:t}){const r=this._pushFilterData();this._activeFilterData=r,r.skip=!1,r.filters=t;const i=e.source,n=i.resolution,s=i.antialias;if(t.every(e=>!e.enabled))return r.skip=!0,e;const a=r.bounds;if(a.addRect(e.frame),this._calculateFilterBounds(r,a.rectangle,s,n,0),r.skip)return e;const o=n;this._calculateGlobalFrame(r,0,0,o,i.width,i.height),r.outputRenderSurface=g.W.getOptimalTexture(a.width,a.height,r.resolution,r.antialias),r.backTexture=f.g.EMPTY,r.inputTexture=e,this.renderer.renderTarget.finishRenderPass(),this._applyFiltersToTexture(r,!0);const l=r.outputRenderSurface;return l.source.alphaMode="premultiplied-alpha",l}pop(){const e=this.renderer,t=this._popFilterData();t.skip||(e.globalUniforms.pop(),e.renderTarget.finishRenderPass(),this._activeFilterData=t,this._applyFiltersToTexture(t,!1),t.blendRequired&&g.W.returnTexture(t.backTexture),g.W.returnTexture(t.inputTexture))}getBackTexture(e,t,r){const i=e.colorTexture.source._resolution,n=g.W.getOptimalTexture(t.width,t.height,i,!1);let s=t.minX,a=t.minY;r&&(s-=r.minX,a-=r.minY),s=Math.floor(s*i),a=Math.floor(a*i);const o=Math.ceil(t.width*i),l=Math.ceil(t.height*i);return this.renderer.renderTarget.copyToTexture(e,n,{x:s,y:a},{width:o,height:l},{x:0,y:0}),n}applyFilter(e,t,r,i){const n=this.renderer,s=this._activeFilterData,a=s.outputRenderSurface===r,o=n.renderTarget.rootRenderTarget.colorTexture.source._resolution,l=this._findFilterResolution(o);let u=0,h=0;if(a){const e=this._findPreviousFilterOffset();u=e.x,h=e.y}this._updateFilterUniforms(t,r,s,u,h,l,a,i);const d=e.enabled?e:this._getPassthroughFilter();this._setupBindGroupsAndRender(d,t,n)}calculateSpriteMatrix(e,t){const r=this._activeFilterData,i=e.set(r.inputTexture._source.width,0,0,r.inputTexture._source.height,r.bounds.minX,r.bounds.minY),n=t.worldTransform.copyTo(h.u.shared),s=t.renderGroup||t.parentRenderGroup;return s&&s.cacheToLocalTransform&&n.prepend(s.cacheToLocalTransform),n.invert(),i.prepend(n),i.scale(1/t.texture.orig.width,1/t.texture.orig.height),i.translate(t.anchor.x,t.anchor.y),i}destroy(){this._passthroughFilter?.destroy(!0),this._passthroughFilter=null}_getPassthroughFilter(){return this._passthroughFilter??(this._passthroughFilter=new u),this._passthroughFilter}_setupBindGroupsAndRender(e,t,r){if(r.renderPipes.uniformBatch){const e=r.renderPipes.uniformBatch.getUboResource(this._filterGlobalUniforms);this._globalFilterBindGroup.setResource(e,0)}else this._globalFilterBindGroup.setResource(this._filterGlobalUniforms,0);this._globalFilterBindGroup.setResource(t.source,1),this._globalFilterBindGroup.setResource(t.source.style,2),e.groups[0]=this._globalFilterBindGroup,r.encoder.draw({geometry:v,shader:e,state:e._state,topology:"triangle-list"}),r.type===m.W.WEBGL&&r.renderTarget.finishRenderPass()}_setupFilterTextures(e,t,r,i){if(e.backTexture=f.g.EMPTY,e.inputTexture=g.W.getOptimalTexture(t.width,t.height,e.resolution,e.antialias),e.blendRequired){r.renderTarget.finishRenderPass();const n=r.renderTarget.getRenderTarget(e.outputRenderSurface);e.backTexture=this.getBackTexture(n,t,i?.bounds)}r.renderTarget.bind(e.inputTexture,!0),r.globalUniforms.push({offset:t})}_calculateGlobalFrame(e,t,r,i,n,s){const a=e.globalFrame;a.x=t*i,a.y=r*i,a.width=n*i,a.height=s*i}_updateFilterUniforms(e,t,r,i,n,s,a,o){const l=this._filterGlobalUniforms.uniforms,u=l.uOutputFrame,h=l.uInputSize,d=l.uInputPixel,c=l.uInputClamp,p=l.uGlobalFrame,g=l.uOutputTexture;a?(u[0]=r.bounds.minX-i,u[1]=r.bounds.minY-n):(u[0]=0,u[1]=0),u[2]=e.frame.width,u[3]=e.frame.height,h[0]=e.source.width,h[1]=e.source.height,h[2]=1/h[0],h[3]=1/h[1],d[0]=e.source.pixelWidth,d[1]=e.source.pixelHeight,d[2]=1/d[0],d[3]=1/d[1],c[0]=.5*d[2],c[1]=.5*d[3],c[2]=e.frame.width*h[2]-.5*d[2],c[3]=e.frame.height*h[3]-.5*d[3];const m=this.renderer.renderTarget.rootRenderTarget.colorTexture;p[0]=i*s,p[1]=n*s,p[2]=m.source.width*s,p[3]=m.source.height*s,t instanceof f.g&&(t.source.resource=null);const x=this.renderer.renderTarget.getRenderTarget(t);this.renderer.renderTarget.bind(t,!!o),t instanceof f.g?(g[0]=t.frame.width,g[1]=t.frame.height):(g[0]=x.width,g[1]=x.height),g[2]=x.isRoot?-1:1,this._filterGlobalUniforms.update()}_findFilterResolution(e){let t=this._filterStackIndex-1;for(;t>0&&this._filterStack[t].skip;)--t;return t>0&&this._filterStack[t].inputTexture?this._filterStack[t].inputTexture.source._resolution:e}_findPreviousFilterOffset(){let e=0,t=0,r=this._filterStackIndex;for(;r>0;){r--;const i=this._filterStack[r];if(!i.skip){e=i.bounds.minX,t=i.bounds.minY;break}}return{x:e,y:t}}_calculateFilterArea(e,t){if(e.renderables?function(e,t){t.clear();const r=t.matrix;for(let r=0;r<e.length;r++){const i=e[r];if(i.globalDisplayStatus<7)continue;const n=i.renderGroup??i.parentRenderGroup;t.matrix=n?.isCachedAsTexture?_.copyFrom(n.textureOffsetInverseTransform).append(i.worldTransform):n?._parentCacheAsTextureRenderGroup?_.copyFrom(n._parentCacheAsTextureRenderGroup.inverseWorldTransform).append(i.groupTransform):i.worldTransform,t.addBounds(i.bounds)}t.matrix=r}(e.renderables,t):e.filterEffect.filterArea?(t.clear(),t.addRect(e.filterEffect.filterArea),t.applyMatrix(e.container.worldTransform)):e.container.getFastGlobalBounds(!0,t),e.container){const r=(e.container.renderGroup||e.container.parentRenderGroup).cacheToLocalTransform;r&&t.applyMatrix(r)}}_applyFiltersToTexture(e,t){const r=e.inputTexture,i=e.bounds,n=e.filters,s=e.firstEnabledIndex,a=e.lastEnabledIndex;if(this._globalFilterBindGroup.setResource(r.source.style,2),this._globalFilterBindGroup.setResource(e.backTexture.source,3),s===a)n[s].apply(this,r,e.outputRenderSurface,t);else{let r=e.inputTexture;const o=g.W.getOptimalTexture(i.width,i.height,r.source._resolution,!1);let l=o;for(let e=s;e<a;e++){const t=n[e];if(!t.enabled)continue;t.apply(this,r,l,!0);const i=r;r=l,l=i}n[a].apply(this,r,e.outputRenderSurface,t),g.W.returnTexture(o)}}_calculateFilterBounds(e,t,r,i,n){const s=this.renderer,a=e.bounds,o=e.filters;let l=1/0,u=0,h=!0,d=!1,c=!1,p=!0,f=-1,g=-1;for(let e=0;e<o.length;e++){const t=o[e];if(t.enabled){if(-1===f&&(f=e),g=e,l=Math.min(l,"inherit"===t.resolution?i:t.resolution),u+=t.padding,"off"===t.antialias?h=!1:"inherit"===t.antialias&&h&&(h=r),t.clipToViewport||(p=!1),!(t.compatibleRenderers&s.type)){c=!1;break}if(t.blendRequired&&!(s.backBuffer?.useBackBuffer??1)){(0,y.R)("Blend filter requires backBuffer on WebGL renderer to be enabled. Set `useBackBuffer: true` in the renderer options."),c=!1;break}c=!0,d||(d=t.blendRequired)}}c?(p&&a.fitBounds(0,t.width/i,0,t.height/i),a.scale(l).ceil().scale(1/l).pad((0|u)*n),a.isPositive?(e.antialias=h,e.resolution=l,e.blendRequired=d,e.firstEnabledIndex=f,e.lastEnabledIndex=g):e.skip=!0):e.skip=!0}_popFilterData(){return this._filterStackIndex--,this._filterStack[this._filterStackIndex]}_getPreviousFilterData(){let e,t=this._filterStackIndex-1;for(;t>0&&(t--,e=this._filterStack[t],e.skip););return e}_pushFilterData(){let e=this._filterStack[this._filterStackIndex];return e||(e=this._filterStack[this._filterStackIndex]=new b),this._filterStackIndex++,e}}w.extension={type:[i.Ag.WebGLSystem,i.Ag.WebGPUSystem],name:"filter"},i.XO.add(w),i.XO.add(n)},4016:(e,t,r)=>{r.d(t,{P:()=>l});var i=r(5957),n=r(1761),s=r(1242);const a={willReadFrequently:!0},o=class e{static get experimentalLetterSpacingSupported(){let t=e._experimentalLetterSpacingSupported;if(void 0===t){const r=n.e.get().getCanvasRenderingContext2D().prototype;t=e._experimentalLetterSpacingSupported="letterSpacing"in r||"textLetterSpacing"in r}return t}constructor(e,t,r,i,n,s,a,o,l){this.text=e,this.style=t,this.width=r,this.height=i,this.lines=n,this.lineWidths=s,this.lineHeight=a,this.maxLineWidth=o,this.fontProperties=l}static measureText(t=" ",r,i=e._canvas,n=r.wordWrap){const a=`${t}-${r.styleKey}-wordWrap-${n}`;if(e._measurementCache.has(a))return e._measurementCache.get(a);const o=(0,s.Z)(r),l=e.measureFont(o);0===l.fontSize&&(l.fontSize=r.fontSize,l.ascent=r.fontSize);const u=e.__context;u.font=o;const h=(n?e._wordWrap(t,r,i):t).split(/(?:\r\n|\r|\n)/),d=new Array(h.length);let c=0;for(let t=0;t<h.length;t++){const i=e._measureText(h[t],r.letterSpacing,u);d[t]=i,c=Math.max(c,i)}const p=r._stroke?.width||0;let f=c+p;r.dropShadow&&(f+=r.dropShadow.distance);const g=r.lineHeight||l.fontSize;let m=Math.max(g,l.fontSize+p)+(h.length-1)*(g+r.leading);r.dropShadow&&(m+=r.dropShadow.distance);const x=new e(t,r,f,m,h,d,g+r.leading,c,l);return e._measurementCache.set(a,x),x}static _measureText(t,r,i){let n=!1;e.experimentalLetterSpacingSupported&&(e.experimentalLetterSpacing?(i.letterSpacing=`${r}px`,i.textLetterSpacing=`${r}px`,n=!0):(i.letterSpacing="0px",i.textLetterSpacing="0px"));const s=i.measureText(t);let a=s.width;const o=-s.actualBoundingBoxLeft;let l=s.actualBoundingBoxRight-o;if(a>0)if(n)a-=r,l-=r;else{const i=(e.graphemeSegmenter(t).length-1)*r;a+=i,l+=i}return Math.max(a,l)}static _wordWrap(t,r,i=e._canvas){const n=i.getContext("2d",a);let s=0,o="",l="";const u=Object.create(null),{letterSpacing:h,whiteSpace:d}=r,c=e._collapseSpaces(d),p=e._collapseNewlines(d);let f=!c;const g=r.wordWrapWidth+h,m=e._tokenize(t);for(let t=0;t<m.length;t++){let i=m[t];if(e._isNewline(i)){if(!p){l+=e._addLine(o),f=!c,o="",s=0;continue}i=" "}if(c){const t=e.isBreakingSpace(i),r=e.isBreakingSpace(o[o.length-1]);if(t&&r)continue}const a=e._getFromCache(i,h,u,n);if(a>g)if(""!==o&&(l+=e._addLine(o),o="",s=0),e.canBreakWords(i,r.breakWords)){const t=e.wordWrapSplit(i);for(let a=0;a<t.length;a++){let d=t[a],c=d,p=1;for(;t[a+p];){const n=t[a+p];if(e.canBreakChars(c,n,i,a,r.breakWords))break;d+=n,c=n,p++}a+=p-1;const m=e._getFromCache(d,h,u,n);m+s>g&&(l+=e._addLine(o),f=!1,o="",s=0),o+=d,s+=m}}else{o.length>0&&(l+=e._addLine(o),o="",s=0);const r=t===m.length-1;l+=e._addLine(i,!r),f=!1,o="",s=0}else a+s>g&&(f=!1,l+=e._addLine(o),o="",s=0),(o.length>0||!e.isBreakingSpace(i)||f)&&(o+=i,s+=a)}return l+=e._addLine(o,!1),l}static _addLine(t,r=!0){return t=e._trimRight(t),r?`${t}\n`:t}static _getFromCache(t,r,i,n){let s=i[t];return"number"!=typeof s&&(s=e._measureText(t,r,n)+r,i[t]=s),s}static _collapseSpaces(e){return"normal"===e||"pre-line"===e}static _collapseNewlines(e){return"normal"===e}static _trimRight(t){if("string"!=typeof t)return"";for(let r=t.length-1;r>=0;r--){const i=t[r];if(!e.isBreakingSpace(i))break;t=t.slice(0,-1)}return t}static _isNewline(t){return"string"==typeof t&&e._newlines.includes(t.charCodeAt(0))}static isBreakingSpace(t,r){return"string"==typeof t&&e._breakingSpaces.includes(t.charCodeAt(0))}static _tokenize(t){const r=[];let i="";if("string"!=typeof t)return r;for(let n=0;n<t.length;n++){const s=t[n],a=t[n+1];e.isBreakingSpace(s,a)||e._isNewline(s)?(""!==i&&(r.push(i),i=""),"\r"===s&&"\n"===a?(r.push("\r\n"),n++):r.push(s)):i+=s}return""!==i&&r.push(i),r}static canBreakWords(e,t){return t}static canBreakChars(e,t,r,i,n){return!0}static wordWrapSplit(t){return e.graphemeSegmenter(t)}static measureFont(t){if(e._fonts[t])return e._fonts[t];const r=e._context;r.font=t;const i=r.measureText(e.METRICS_STRING+e.BASELINE_SYMBOL),n={ascent:i.actualBoundingBoxAscent,descent:i.actualBoundingBoxDescent,fontSize:i.actualBoundingBoxAscent+i.actualBoundingBoxDescent};return e._fonts[t]=n,n}static clearMetrics(t=""){t?delete e._fonts[t]:e._fonts={}}static get _canvas(){if(!e.__canvas){let t;try{const r=new OffscreenCanvas(0,0),i=r.getContext("2d",a);if(i?.measureText)return e.__canvas=r,r;t=n.e.get().createCanvas()}catch(e){t=n.e.get().createCanvas()}t.width=t.height=10,e.__canvas=t}return e.__canvas}static get _context(){return e.__context||(e.__context=e._canvas.getContext("2d",a)),e.__context}};o.METRICS_STRING="|ÉqÅ",o.BASELINE_SYMBOL="M",o.BASELINE_MULTIPLIER=1.4,o.HEIGHT_MULTIPLIER=2,o.graphemeSegmenter=(()=>{if("function"==typeof Intl?.Segmenter){const e=new Intl.Segmenter;return t=>{const r=e.segment(t),i=[];let n=0;for(const e of r)i[n++]=e.segment;return i}}return e=>[...e]})(),o.experimentalLetterSpacing=!1,o._fonts={},o._newlines=[10,13],o._breakingSpaces=[9,32,8192,8193,8194,8195,8196,8197,8198,8200,8201,8202,8287,12288],o._measurementCache=(0,i.g)(1e3);let l=o},4732:(e,t,r)=>{var i=r(8507);class n{static init(e){Object.defineProperty(this,"resizeTo",{set(e){globalThis.removeEventListener("resize",this.queueResize),this._resizeTo=e,e&&(globalThis.addEventListener("resize",this.queueResize),this.resize())},get(){return this._resizeTo}}),this.queueResize=()=>{this._resizeTo&&(this._cancelResize(),this._resizeId=requestAnimationFrame(()=>this.resize()))},this._cancelResize=()=>{this._resizeId&&(cancelAnimationFrame(this._resizeId),this._resizeId=null)},this.resize=()=>{if(!this._resizeTo)return;let e,t;if(this._cancelResize(),this._resizeTo===globalThis.window)e=globalThis.innerWidth,t=globalThis.innerHeight;else{const{clientWidth:r,clientHeight:i}=this._resizeTo;e=r,t=i}this.renderer.resize(e,t),this.render()},this._resizeId=null,this._resizeTo=null,this.resizeTo=e.resizeTo||null}static destroy(){globalThis.removeEventListener("resize",this.queueResize),this._cancelResize(),this._cancelResize=null,this.queueResize=null,this.resizeTo=null,this.resize=null}}n.extension=i.Ag.Application;var s=r(4458),a=r(7309);class o{static init(e){e=Object.assign({autoStart:!0,sharedTicker:!1},e),Object.defineProperty(this,"ticker",{set(e){this._ticker&&this._ticker.remove(this.render,this),this._ticker=e,e&&e.add(this.render,this,s.d.LOW)},get(){return this._ticker}}),this.stop=()=>{this._ticker.stop()},this.start=()=>{this._ticker.start()},this._ticker=null,this.ticker=e.sharedTicker?a.R.shared:new a.R,e.autoStart&&this.start()}static destroy(){if(this._ticker){const e=this._ticker;this.ticker=null,e.destroy()}}}o.extension=i.Ag.Application,i.XO.add(n),i.XO.add(o)},5060:(e,t,r)=>{r.d(t,{u:()=>l});var i=r(949),n=r(1132),s=r(6011),a=r(4670);const o=class e extends s.V{constructor(...t){let r=t[0]??{};r instanceof Float32Array&&((0,a.t6)(a.lj,"use new MeshGeometry({ positions, uvs, indices }) instead"),r={positions:r,uvs:t[1],indices:t[2]}),r={...e.defaultOptions,...r};const s=r.positions||new Float32Array([0,0,1,0,1,1,0,1]);let o=r.uvs;o||(o=r.positions?new Float32Array(s.length):new Float32Array([0,0,1,0,1,1,0,1]));const l=r.indices||new Uint32Array([0,1,2,0,2,3]),u=r.shrinkBuffersToFit;super({attributes:{aPosition:{buffer:new i.h({data:s,label:"attribute-mesh-positions",shrinkToFit:u,usage:n.S.VERTEX|n.S.COPY_DST}),format:"float32x2",stride:8,offset:0},aUV:{buffer:new i.h({data:o,label:"attribute-mesh-uvs",shrinkToFit:u,usage:n.S.VERTEX|n.S.COPY_DST}),format:"float32x2",stride:8,offset:0}},indexBuffer:new i.h({data:l,label:"index-mesh-buffer",shrinkToFit:u,usage:n.S.INDEX|n.S.COPY_DST}),topology:r.topology}),this.batchMode="auto"}get positions(){return this.attributes.aPosition.buffer.data}set positions(e){this.attributes.aPosition.buffer.data=e}get uvs(){return this.attributes.aUV.buffer.data}set uvs(e){this.attributes.aUV.buffer.data=e}get indices(){return this.indexBuffer.data}set indices(e){this.indexBuffer.data=e}};o.defaultOptions={topology:"triangle-list",shrinkBuffersToFit:!1};let l=o},5148:(e,t,r)=>{var i=r(8507),n=r(2289),s=r(8422);class a extends s.K{constructor(e){super(),this._renderer=e,e.runners.resolutionChange.add(this)}resolutionChange(){const e=this.renderable;e._autoResolution&&e.onViewUpdate()}destroy(){const{canvasText:e}=this._renderer;e.getReferenceCount(this.currentKey)>0?e.decreaseReferenceCount(this.currentKey):this.texture&&e.returnTexture(this.texture),this._renderer.runners.resolutionChange.remove(this),this._renderer=null}}class o{constructor(e){this._renderer=e}validateRenderable(e){const t=this._getGpuText(e),r=e.styleKey;return t.currentKey!==r||e._didTextUpdate}addRenderable(e,t){const r=this._getGpuText(e);if(e._didTextUpdate){const t=e._autoResolution?this._renderer.resolution:e.resolution;r.currentKey===e.styleKey&&e.resolution===t||this._updateGpuText(e),e._didTextUpdate=!1,(0,n.s)(r,e)}this._renderer.renderPipes.batch.addToBatch(r,t)}updateRenderable(e){const t=this._getGpuText(e);t._batcher.updateElement(t)}_updateGpuText(e){const t=this._getGpuText(e);t.texture&&this._renderer.canvasText.decreaseReferenceCount(t.currentKey),e._resolution=e._autoResolution?this._renderer.resolution:e.resolution,t.texture=this._renderer.canvasText.getManagedTexture(e),t.currentKey=e.styleKey}_getGpuText(e){return e._gpuData[this._renderer.uid]||this.initGpuText(e)}initGpuText(e){const t=new a(this._renderer);return t.currentKey="--",t.renderable=e,t.transform=e.groupTransform,t.bounds={minX:0,maxX:1,minY:0,maxY:0},t.roundPixels=this._renderer._roundPixels|e._roundPixels,e._gpuData[this._renderer.uid]=t,t}destroy(){this._renderer=null}}o.extension={type:[i.Ag.WebGLPipes,i.Ag.WebGPUPipes,i.Ag.CanvasPipes],name:"text"};var l=r(2437),u=r(218),h=r(4670),d=r(8291),c=r(2558),p=r(2577),f=r(9252),g=r(7608),m=r(1761),x=r(9939);let _=null,y=null;function v(e,t,r){for(let i=0,n=4*r*t;i<t;++i,n+=4)if(0!==e[n+3])return!1;return!0}function b(e,t,r,i,n){const s=4*t;for(let t=i,a=i*s+4*r;t<=n;++t,a+=s)if(0!==e[a+3])return!1;return!0}function w(...e){let t=e[0];t.canvas||(t={canvas:e[0],resolution:e[1]});const{canvas:r}=t,i=Math.min(t.resolution??1,1),n=t.width??r.width,s=t.height??r.height;let a=t.output;if(function(e,t){_||(_=m.e.get().createCanvas(256,128),y=_.getContext("2d",{willReadFrequently:!0}),y.globalCompositeOperation="copy",y.globalAlpha=1),(_.width<e||_.height<t)&&(_.width=(0,x.U5)(e),_.height=(0,x.U5)(t))}(n,s),!y)throw new TypeError("Failed to get canvas 2D context");y.drawImage(r,0,0,n,s,0,0,n*i,s*i);const o=y.getImageData(0,0,n,s).data;let l=0,u=0,h=n-1,d=s-1;for(;u<s&&v(o,n,u);)++u;if(u===s)return f.M.EMPTY;for(;v(o,n,d);)--d;for(;b(o,n,l,u,d);)++l;for(;b(o,n,h,u,d);)--h;return++h,++d,y.globalCompositeOperation="source-over",y.strokeRect(l,u,h-l,d-u),y.globalCompositeOperation="copy",a??(a=new f.M),a.set(l/i,u/i,(h-l)/i,(d-u)/i),a}var T=r(4016),S=r(1242),C=r(3548);const P=new f.M,F=new class{getCanvasAndContext(e){const{text:t,style:r,resolution:i=1}=e,n=r._getFinalPadding(),s=T.P.measureText(t||" ",r),a=Math.ceil(Math.ceil(Math.max(1,s.width)+2*n)*i),o=Math.ceil(Math.ceil(Math.max(1,s.height)+2*n)*i),l=g.N.getOptimalCanvasAndContext(a,o);return this._renderTextToCanvas(t,r,n,i,l),{canvasAndContext:l,frame:r.trim?w({canvas:l.canvas,width:a,height:o,resolution:1,output:P}):P.set(0,0,a,o)}}returnCanvasAndContext(e){g.N.returnCanvasAndContext(e)}_renderTextToCanvas(e,t,r,i,n){const{canvas:s,context:a}=n,o=(0,S.Z)(t),l=T.P.measureText(e||" ",t),u=l.lines,h=l.lineHeight,d=l.lineWidths,c=l.maxLineWidth,f=l.fontProperties,g=s.height;if(a.resetTransform(),a.scale(i,i),a.textBaseline=t.textBaseline,t._stroke?.width){const e=t._stroke;a.lineWidth=e.width,a.miterLimit=e.miterLimit,a.lineJoin=e.join,a.lineCap=e.cap}let m,x;a.font=o;const _=t.dropShadow?2:1;for(let e=0;e<_;++e){const s=t.dropShadow&&0===e,o=s?Math.ceil(Math.max(1,g)+2*r):0,_=o*i;if(s){a.fillStyle="black",a.strokeStyle="black";const e=t.dropShadow,r=e.color,n=e.alpha;a.shadowColor=p.Q.shared.setValue(r).setAlpha(n).toRgbaString();const s=e.blur*i,o=e.distance*i;a.shadowBlur=s,a.shadowOffsetX=Math.cos(e.angle)*o,a.shadowOffsetY=Math.sin(e.angle)*o+_}else{if(a.fillStyle=t._fill?(0,C.r)(t._fill,a,l,2*r):null,t._stroke?.width){const e=.5*t._stroke.width+2*r;a.strokeStyle=(0,C.r)(t._stroke,a,l,e)}a.shadowColor="black"}let y=(h-f.fontSize)/2;h-f.fontSize<0&&(y=0);const v=t._stroke?.width??0;for(let e=0;e<u.length;e++)m=v/2,x=v/2+e*h+f.ascent+y,"right"===t.align?m+=c-d[e]:"center"===t.align&&(m+=(c-d[e])/2),t._stroke?.width&&this._drawLetterSpacing(u[e],t,n,m+r,x+r-o,!0),void 0!==t._fill&&this._drawLetterSpacing(u[e],t,n,m+r,x+r-o)}}_drawLetterSpacing(e,t,r,i,n,s=!1){const{context:a}=r,o=t.letterSpacing;let l=!1;if(T.P.experimentalLetterSpacingSupported&&(T.P.experimentalLetterSpacing?(a.letterSpacing=`${o}px`,a.textLetterSpacing=`${o}px`,l=!0):(a.letterSpacing="0px",a.textLetterSpacing="0px")),0===o||l)return void(s?a.strokeText(e,i,n):a.fillText(e,i,n));let u=i;const h=T.P.graphemeSegmenter(e);let d=a.measureText(e).width,c=0;for(let e=0;e<h.length;++e){const t=h[e];s?a.strokeText(t,u,n):a.fillText(t,u,n);let r="";for(let t=e+1;t<h.length;++t)r+=h[t];c=a.measureText(r).width,u+=d-c+o,d=c}}};class k{constructor(e){this._activeTextures={},this._renderer=e}getTexture(e,t,r,i){"string"==typeof e&&((0,h.t6)("8.0.0","CanvasTextSystem.getTexture: Use object TextOptions instead of separate arguments"),e={text:e,style:r,resolution:t}),e.style instanceof d.x||(e.style=new d.x(e.style)),e.textureStyle instanceof u.n||(e.textureStyle=new u.n(e.textureStyle)),"string"!=typeof e.text&&(e.text=e.text.toString());const{text:n,style:s,textureStyle:a}=e,o=e.resolution??this._renderer.resolution,{frame:l,canvasAndContext:p}=F.getCanvasAndContext({text:n,style:s,resolution:o}),f=(0,c.M)(p.canvas,l.width,l.height,o);if(a&&(f.source.style=a),s.trim&&(l.pad(s.padding),f.frame.copyFrom(l),f.frame.scale(1/o),f.updateUvs()),s.filters){const e=this._applyFilters(f,s.filters);return this.returnTexture(f),F.returnCanvasAndContext(p),e}return this._renderer.texture.initSource(f._source),F.returnCanvasAndContext(p),f}returnTexture(e){const t=e.source;t.resource=null,t.uploadMethodId="unknown",t.alphaMode="no-premultiply-alpha",l.W.returnTexture(e,!0)}renderTextToCanvas(){(0,h.t6)("8.10.0","CanvasTextSystem.renderTextToCanvas: no longer supported, use CanvasTextSystem.getTexture instead")}getManagedTexture(e){e._resolution=e._autoResolution?this._renderer.resolution:e.resolution;const t=e.styleKey;if(this._activeTextures[t])return this._increaseReferenceCount(t),this._activeTextures[t].texture;const r=this.getTexture({text:e.text,style:e.style,resolution:e._resolution,textureStyle:e.textureStyle});return this._activeTextures[t]={texture:r,usageCount:1},r}decreaseReferenceCount(e){const t=this._activeTextures[e];t.usageCount--,0===t.usageCount&&(this.returnTexture(t.texture),this._activeTextures[e]=null)}getReferenceCount(e){return this._activeTextures[e]?.usageCount??0}_increaseReferenceCount(e){this._activeTextures[e].usageCount++}_applyFilters(e,t){const r=this._renderer.renderTarget.renderTarget,i=this._renderer.filter.generateFilteredTexture({texture:e,filters:t});return this._renderer.renderTarget.bind(r,!1),i}destroy(){this._renderer=null;for(const e in this._activeTextures)this._activeTextures[e]&&this.returnTexture(this._activeTextures[e].texture);this._activeTextures=null}}k.extension={type:[i.Ag.WebGLSystem,i.Ag.WebGPUSystem,i.Ag.CanvasSystem],name:"canvasText"},i.XO.add(k),i.XO.add(o)},5285:(e,t,r)=>{var i=r(8507),n=r(9313),s=r(3513),a=r(5811),o=r(8639),l=r(2760),u=r(8734);class h{destroy(){}}class d{constructor(e,t){this.localUniforms=new a.k({uTransformMatrix:{value:new n.u,type:"mat3x3<f32>"},uColor:{value:new Float32Array([1,1,1,1]),type:"vec4<f32>"},uRound:{value:0,type:"f32"}}),this.localUniformsBindGroup=new s.T({0:this.localUniforms}),this.renderer=e,this._adaptor=t,this._adaptor.init()}validateRenderable(e){const t=this._getMeshData(e),r=t.batched,i=e.batched;if(t.batched=i,r!==i)return!0;if(i){const r=e._geometry;if(r.indices.length!==t.indexSize||r.positions.length!==t.vertexSize)return t.indexSize=r.indices.length,t.vertexSize=r.positions.length,!0;const i=this._getBatchableMesh(e);return i.texture.uid!==e._texture.uid&&(i._textureMatrixUpdateId=-1),!i._batcher.checkAndUpdateTexture(i,e._texture)}return!1}addRenderable(e,t){const r=this.renderer.renderPipes.batch,i=this._getMeshData(e);if(e.didViewUpdate&&(i.indexSize=e._geometry.indices?.length,i.vertexSize=e._geometry.positions?.length),i.batched){const i=this._getBatchableMesh(e);i.setTexture(e._texture),i.geometry=e._geometry,r.addToBatch(i,t)}else r.break(t),t.add(e)}updateRenderable(e){if(e.batched){const t=this._getBatchableMesh(e);t.setTexture(e._texture),t.geometry=e._geometry,t._batcher.updateElement(t)}}execute(e){if(!e.isRenderable)return;e.state.blendMode=(0,o.i)(e.groupBlendMode,e.texture._source);const t=this.localUniforms;t.uniforms.uTransformMatrix=e.groupTransform,t.uniforms.uRound=this.renderer._roundPixels|e._roundPixels,t.update(),(0,l.V)(e.groupColorAlpha,t.uniforms.uColor,0),this._adaptor.execute(this,e)}_getMeshData(e){var t,r;return(t=e._gpuData)[r=this.renderer.uid]||(t[r]=new h),e._gpuData[this.renderer.uid].meshData||this._initMeshData(e)}_initMeshData(e){return e._gpuData[this.renderer.uid].meshData={batched:e.batched,indexSize:0,vertexSize:0},e._gpuData[this.renderer.uid].meshData}_getBatchableMesh(e){var t,r;return(t=e._gpuData)[r=this.renderer.uid]||(t[r]=new h),e._gpuData[this.renderer.uid].batchableMesh||this._initBatchableMesh(e)}_initBatchableMesh(e){const t=new u.U;return t.renderable=e,t.setTexture(e._texture),t.transform=e.groupTransform,t.roundPixels=this.renderer._roundPixels|e._roundPixels,e._gpuData[this.renderer.uid].batchableMesh=t,t}destroy(){this.localUniforms=null,this.localUniformsBindGroup=null,this._adaptor.destroy(),this._adaptor=null,this.renderer=null}}d.extension={type:[i.Ag.WebGLPipes,i.Ag.WebGPUPipes,i.Ag.CanvasPipes],name:"mesh"},i.XO.add(d)},5957:(e,t,r)=>{r.d(t,{g:()=>n});class i{constructor(e=0,t=0,r=!1){this.first=null,this.items=Object.create(null),this.last=null,this.max=e,this.resetTtl=r,this.size=0,this.ttl=t}clear(){return this.first=null,this.items=Object.create(null),this.last=null,this.size=0,this}delete(e){if(this.has(e)){const t=this.items[e];delete this.items[e],this.size--,null!==t.prev&&(t.prev.next=t.next),null!==t.next&&(t.next.prev=t.prev),this.first===t&&(this.first=t.next),this.last===t&&(this.last=t.prev)}return this}entries(e=this.keys()){return e.map(e=>[e,this.get(e)])}evict(e=!1){if(e||this.size>0){const e=this.first;delete this.items[e.key],0===--this.size?(this.first=null,this.last=null):(this.first=e.next,this.first.prev=null)}return this}expiresAt(e){let t;return this.has(e)&&(t=this.items[e].expiry),t}get(e){const t=this.items[e];if(void 0!==t)return this.ttl>0&&t.expiry<=Date.now()?void this.delete(e):(this.moveToEnd(t),t.value)}has(e){return e in this.items}moveToEnd(e){this.last!==e&&(null!==e.prev&&(e.prev.next=e.next),null!==e.next&&(e.next.prev=e.prev),this.first===e&&(this.first=e.next),e.prev=this.last,e.next=null,null!==this.last&&(this.last.next=e),this.last=e,null===this.first&&(this.first=e))}keys(){const e=[];let t=this.first;for(;null!==t;)e.push(t.key),t=t.next;return e}setWithEvicted(e,t,r=this.resetTtl){let i=null;if(this.has(e))this.set(e,t,!0,r);else{this.max>0&&this.size===this.max&&(i={...this.first},this.evict(!0));let r=this.items[e]={expiry:this.ttl>0?Date.now()+this.ttl:this.ttl,key:e,prev:this.last,next:null,value:t};1===++this.size?this.first=r:this.last.next=r,this.last=r}return i}set(e,t,r=!1,i=this.resetTtl){let n=this.items[e];return r||void 0!==n?(n.value=t,!1===r&&i&&(n.expiry=this.ttl>0?Date.now()+this.ttl:this.ttl),this.moveToEnd(n)):(this.max>0&&this.size===this.max&&this.evict(!0),n=this.items[e]={expiry:this.ttl>0?Date.now()+this.ttl:this.ttl,key:e,prev:this.last,next:null,value:t},1===++this.size?this.first=n:this.last.next=n,this.last=n),this}values(e=this.keys()){return e.map(e=>this.get(e))}}function n(e=1e3,t=0,r=!1){if(isNaN(e)||e<0)throw new TypeError("Invalid max value");if(isNaN(t)||t<0)throw new TypeError("Invalid ttl value");if("boolean"!=typeof r)throw new TypeError("Invalid resetTtl value");return new i(e,t,r)}},6554:(e,t,r)=>{r.d(t,{d:()=>l});var i=r(9113),n=r(3012),s=r(8475),a=r(7547);const o=class e extends s.M{constructor(t){super(t={...e.defaultOptions,...t}),this.enabled=!0,this._state=a.U.for2d(),this.blendMode=t.blendMode,this.padding=t.padding,"boolean"==typeof t.antialias?this.antialias=t.antialias?"on":"off":this.antialias=t.antialias,this.resolution=t.resolution,this.blendRequired=t.blendRequired,this.clipToViewport=t.clipToViewport,this.addResource("uTexture",0,1)}apply(e,t,r,i){e.applyFilter(this,t,r,i)}get blendMode(){return this._state.blendMode}set blendMode(e){this._state.blendMode=e}static from(t){const{gpu:r,gl:s,...a}=t;let o,l;return r&&(o=n.B.from(r)),s&&(l=i.M.from(s)),new e({gpuProgram:o,glProgram:l,...a})}};o.defaultOptions={blendMode:"normal",resolution:1,padding:0,antialias:"off",blendRequired:!1,clipToViewport:!0};let l=o},7252:(e,t,r)=>{var i=r(8507),n=r(8734),s=r(4670),a=r(5060);const o=class e extends a.u{constructor(...e){super({});let t=e[0]??{};"number"==typeof t&&((0,s.t6)(s.lj,"PlaneGeometry constructor changed please use { width, height, verticesX, verticesY } instead"),t={width:t,height:e[1],verticesX:e[2],verticesY:e[3]}),this.build(t)}build(t){t={...e.defaultOptions,...t},this.verticesX=this.verticesX??t.verticesX,this.verticesY=this.verticesY??t.verticesY,this.width=this.width??t.width,this.height=this.height??t.height;const r=this.verticesX*this.verticesY,i=[],n=[],s=[],a=this.verticesX-1,o=this.verticesY-1,l=this.width/a,u=this.height/o;for(let e=0;e<r;e++){const t=e%this.verticesX,r=e/this.verticesX|0;i.push(t*l,r*u),n.push(t/a,r/o)}const h=a*o;for(let e=0;e<h;e++){const t=e%a,r=e/a|0,i=r*this.verticesX+t,n=r*this.verticesX+t+1,o=(r+1)*this.verticesX+t,l=(r+1)*this.verticesX+t+1;s.push(i,n,o,n,l,o)}this.buffers[0].data=new Float32Array(i),this.buffers[1].data=new Float32Array(n),this.indexBuffer.data=new Uint32Array(s),this.buffers[0].update(),this.buffers[1].update(),this.indexBuffer.update()}};o.defaultOptions={width:100,height:100,verticesX:10,verticesY:10};let l=o;const u=class e extends l{constructor(t={}){super({width:(t={...e.defaultOptions,...t}).width,height:t.height,verticesX:4,verticesY:4}),this.update(t)}update(e){this.width=e.width??this.width,this.height=e.height??this.height,this._originalWidth=e.originalWidth??this._originalWidth,this._originalHeight=e.originalHeight??this._originalHeight,this._leftWidth=e.leftWidth??this._leftWidth,this._rightWidth=e.rightWidth??this._rightWidth,this._topHeight=e.topHeight??this._topHeight,this._bottomHeight=e.bottomHeight??this._bottomHeight,this._anchorX=e.anchor?.x,this._anchorY=e.anchor?.y,this.updateUvs(),this.updatePositions()}updatePositions(){const e=this.positions,{width:t,height:r,_leftWidth:i,_rightWidth:n,_topHeight:s,_bottomHeight:a,_anchorX:o,_anchorY:l}=this,u=i+n,h=t>u?1:t/u,d=s+a,c=r>d?1:r/d,p=Math.min(h,c),f=o*t,g=l*r;e[0]=e[8]=e[16]=e[24]=-f,e[2]=e[10]=e[18]=e[26]=i*p-f,e[4]=e[12]=e[20]=e[28]=t-n*p-f,e[6]=e[14]=e[22]=e[30]=t-f,e[1]=e[3]=e[5]=e[7]=-g,e[9]=e[11]=e[13]=e[15]=s*p-g,e[17]=e[19]=e[21]=e[23]=r-a*p-g,e[25]=e[27]=e[29]=e[31]=r-g,this.getBuffer("aPosition").update()}updateUvs(){const e=this.uvs;e[0]=e[8]=e[16]=e[24]=0,e[1]=e[3]=e[5]=e[7]=0,e[6]=e[14]=e[22]=e[30]=1,e[25]=e[27]=e[29]=e[31]=1;const t=1/this._originalWidth,r=1/this._originalHeight;e[2]=e[10]=e[18]=e[26]=t*this._leftWidth,e[9]=e[11]=e[13]=e[15]=r*this._topHeight,e[4]=e[12]=e[20]=e[28]=1-t*this._rightWidth,e[17]=e[19]=e[21]=e[23]=1-r*this._bottomHeight,this.getBuffer("aUV").update()}};u.defaultOptions={width:100,height:100,leftWidth:10,topHeight:10,rightWidth:10,bottomHeight:10,originalWidth:100,originalHeight:100};let h=u;class d extends n.U{constructor(){super(),this.geometry=new h}destroy(){this.geometry.destroy()}}class c{constructor(e){this._renderer=e}addRenderable(e,t){const r=this._getGpuSprite(e);e.didViewUpdate&&this._updateBatchableSprite(e,r),this._renderer.renderPipes.batch.addToBatch(r,t)}updateRenderable(e){const t=this._getGpuSprite(e);e.didViewUpdate&&this._updateBatchableSprite(e,t),t._batcher.updateElement(t)}validateRenderable(e){const t=this._getGpuSprite(e);return!t._batcher.checkAndUpdateTexture(t,e._texture)}_updateBatchableSprite(e,t){t.geometry.update(e),t.setTexture(e._texture)}_getGpuSprite(e){return e._gpuData[this._renderer.uid]||this._initGPUSprite(e)}_initGPUSprite(e){const t=e._gpuData[this._renderer.uid]=new d,r=t;return r.renderable=e,r.transform=e.groupTransform,r.texture=e._texture,r.roundPixels=this._renderer._roundPixels|e._roundPixels,e.didViewUpdate||this._updateBatchableSprite(e,r),t}destroy(){this._renderer=null}}c.extension={type:[i.Ag.WebGLPipes,i.Ag.WebGPUPipes,i.Ag.CanvasPipes],name:"nineSliceSprite"},i.XO.add(c)},7547:(e,t,r)=>{r.d(t,{U:()=>s});const i={normal:0,add:1,multiply:2,screen:3,overlay:4,erase:5,"normal-npm":6,"add-npm":7,"screen-npm":8,min:9,max:10},n=class e{constructor(){this.data=0,this.blendMode="normal",this.polygonOffset=0,this.blend=!0,this.depthMask=!0}get blend(){return!!(1&this.data)}set blend(e){!!(1&this.data)!==e&&(this.data^=1)}get offsets(){return!!(2&this.data)}set offsets(e){!!(2&this.data)!==e&&(this.data^=2)}set cullMode(e){"none"!==e?(this.culling=!0,this.clockwiseFrontFace="front"===e):this.culling=!1}get cullMode(){return this.culling?this.clockwiseFrontFace?"front":"back":"none"}get culling(){return!!(4&this.data)}set culling(e){!!(4&this.data)!==e&&(this.data^=4)}get depthTest(){return!!(8&this.data)}set depthTest(e){!!(8&this.data)!==e&&(this.data^=8)}get depthMask(){return!!(32&this.data)}set depthMask(e){!!(32&this.data)!==e&&(this.data^=32)}get clockwiseFrontFace(){return!!(16&this.data)}set clockwiseFrontFace(e){!!(16&this.data)!==e&&(this.data^=16)}get blendMode(){return this._blendMode}set blendMode(e){this.blend="none"!==e,this._blendMode=e,this._blendModeId=i[e]||0}get polygonOffset(){return this._polygonOffset}set polygonOffset(e){this.offsets=!!e,this._polygonOffset=e}toString(){return`[pixi.js/core:State blendMode=${this.blendMode} clockwiseFrontFace=${this.clockwiseFrontFace} culling=${this.culling} depthMask=${this.depthMask} polygonOffset=${this.polygonOffset}]`}static for2d(){const t=new e;return t.depthTest=!1,t.blend=!0,t}};n.default2d=n.for2d();let s=n},7608:(e,t,r)=>{r.d(t,{N:()=>a});var i=r(1761),n=r(9939),s=r(6083);const a=new class{constructor(e){this._canvasPool=Object.create(null),this.canvasOptions=e||{},this.enableFullScreen=!1}_createCanvasAndContext(e,t){const r=i.e.get().createCanvas();r.width=e,r.height=t;const n=r.getContext("2d");return{canvas:r,context:n}}getOptimalCanvasAndContext(e,t,r=1){e=Math.ceil(e*r-1e-6),t=Math.ceil(t*r-1e-6);const i=((e=(0,n.U5)(e))<<17)+((t=(0,n.U5)(t))<<1);this._canvasPool[i]||(this._canvasPool[i]=[]);let s=this._canvasPool[i].pop();return s||(s=this._createCanvasAndContext(e,t)),s}returnCanvasAndContext(e){const t=e.canvas,{width:r,height:i}=t,n=(r<<17)+(i<<1);e.context.resetTransform(),e.context.clearRect(0,0,r,i),this._canvasPool[n].push(e)}clear(){this._canvasPool={}}};s.L.register(a)},8291:(e,t,r)=>{r.d(t,{x:()=>p});var i=r(4486),n=r(2577),s=r(133),a=r(4670),o=r(268),l=r(7276),u=r(2806),h=r(8288),d=r(990);const c=class e extends i.A{constructor(t={}){super(),this.uid=(0,s.L)("textStyle"),this._tick=0,function(e){const t=e;if("boolean"==typeof t.dropShadow&&t.dropShadow){const r=p.defaultDropShadow;e.dropShadow={alpha:t.dropShadowAlpha??r.alpha,angle:t.dropShadowAngle??r.angle,blur:t.dropShadowBlur??r.blur,color:t.dropShadowColor??r.color,distance:t.dropShadowDistance??r.distance}}if(void 0!==t.strokeThickness){(0,a.t6)(a.lj,"strokeThickness is now a part of stroke");const r=t.stroke;let i={};if(n.Q.isColorLike(r))i.color=r;else if(r instanceof l._||r instanceof u.m)i.fill=r;else{if(!Object.hasOwnProperty.call(r,"color")&&!Object.hasOwnProperty.call(r,"fill"))throw new Error("Invalid stroke value.");i=r}e.stroke={...i,width:t.strokeThickness}}if(Array.isArray(t.fillGradientStops)){if((0,a.t6)(a.lj,"gradient fill is now a fill pattern: `new FillGradient(...)`"),!Array.isArray(t.fill)||0===t.fill.length)throw new Error("Invalid fill value. Expected an array of colors for gradient fill.");t.fill.length!==t.fillGradientStops.length&&(0,o.R)("The number of fill colors must match the number of fill gradient stops.");const r=new l._({start:{x:0,y:0},end:{x:0,y:1},textureSpace:"local"}),i=t.fillGradientStops.slice(),s=t.fill.map(e=>n.Q.shared.setValue(e).toNumber());i.forEach((e,t)=>{r.addColorStop(e,s[t])}),e.fill={fill:r}}}(t);const r={...e.defaultTextStyle,...t};for(const e in r)this[e]=r[e];this.update(),this._tick=0}get align(){return this._align}set align(e){this._align!==e&&(this._align=e,this.update())}get breakWords(){return this._breakWords}set breakWords(e){this._breakWords!==e&&(this._breakWords=e,this.update())}get dropShadow(){return this._dropShadow}set dropShadow(t){this._dropShadow!==t&&(this._dropShadow=null!==t&&"object"==typeof t?this._createProxy({...e.defaultDropShadow,...t}):t?this._createProxy({...e.defaultDropShadow}):null,this.update())}get fontFamily(){return this._fontFamily}set fontFamily(e){this._fontFamily!==e&&(this._fontFamily=e,this.update())}get fontSize(){return this._fontSize}set fontSize(e){this._fontSize!==e&&(this._fontSize="string"==typeof e?parseInt(e,10):e,this.update())}get fontStyle(){return this._fontStyle}set fontStyle(e){this._fontStyle!==e&&(this._fontStyle=e.toLowerCase(),this.update())}get fontVariant(){return this._fontVariant}set fontVariant(e){this._fontVariant!==e&&(this._fontVariant=e,this.update())}get fontWeight(){return this._fontWeight}set fontWeight(e){this._fontWeight!==e&&(this._fontWeight=e,this.update())}get leading(){return this._leading}set leading(e){this._leading!==e&&(this._leading=e,this.update())}get letterSpacing(){return this._letterSpacing}set letterSpacing(e){this._letterSpacing!==e&&(this._letterSpacing=e,this.update())}get lineHeight(){return this._lineHeight}set lineHeight(e){this._lineHeight!==e&&(this._lineHeight=e,this.update())}get padding(){return this._padding}set padding(e){this._padding!==e&&(this._padding=e,this.update())}get filters(){return this._filters}set filters(e){this._filters!==e&&(this._filters=Object.freeze(e),this.update())}get trim(){return this._trim}set trim(e){this._trim!==e&&(this._trim=e,this.update())}get textBaseline(){return this._textBaseline}set textBaseline(e){this._textBaseline!==e&&(this._textBaseline=e,this.update())}get whiteSpace(){return this._whiteSpace}set whiteSpace(e){this._whiteSpace!==e&&(this._whiteSpace=e,this.update())}get wordWrap(){return this._wordWrap}set wordWrap(e){this._wordWrap!==e&&(this._wordWrap=e,this.update())}get wordWrapWidth(){return this._wordWrapWidth}set wordWrapWidth(e){this._wordWrapWidth!==e&&(this._wordWrapWidth=e,this.update())}get fill(){return this._originalFill}set fill(e){e!==this._originalFill&&(this._originalFill=e,this._isFillStyle(e)&&(this._originalFill=this._createProxy({...h.T.defaultFillStyle,...e},()=>{this._fill=(0,d.w)({...this._originalFill},h.T.defaultFillStyle)})),this._fill=(0,d.w)(0===e?"black":e,h.T.defaultFillStyle),this.update())}get stroke(){return this._originalStroke}set stroke(e){e!==this._originalStroke&&(this._originalStroke=e,this._isFillStyle(e)&&(this._originalStroke=this._createProxy({...h.T.defaultStrokeStyle,...e},()=>{this._stroke=(0,d.T)({...this._originalStroke},h.T.defaultStrokeStyle)})),this._stroke=(0,d.T)(e,h.T.defaultStrokeStyle),this.update())}update(){this._tick++,this.emit("update",this)}reset(){const t=e.defaultTextStyle;for(const e in t)this[e]=t[e]}get styleKey(){return`${this.uid}-${this._tick}`}clone(){return new e({align:this.align,breakWords:this.breakWords,dropShadow:this._dropShadow?{...this._dropShadow}:null,fill:this._fill,fontFamily:this.fontFamily,fontSize:this.fontSize,fontStyle:this.fontStyle,fontVariant:this.fontVariant,fontWeight:this.fontWeight,leading:this.leading,letterSpacing:this.letterSpacing,lineHeight:this.lineHeight,padding:this.padding,stroke:this._stroke,textBaseline:this.textBaseline,whiteSpace:this.whiteSpace,wordWrap:this.wordWrap,wordWrapWidth:this.wordWrapWidth,filters:this._filters?[...this._filters]:void 0})}_getFinalPadding(){let e=0;if(this._filters)for(let t=0;t<this._filters.length;t++)e+=this._filters[t].padding;return Math.max(this._padding,e)}destroy(e=!1){if(this.removeAllListeners(),"boolean"==typeof e?e:e?.texture){const t="boolean"==typeof e?e:e?.textureSource;this._fill?.texture&&this._fill.texture.destroy(t),this._originalFill?.texture&&this._originalFill.texture.destroy(t),this._stroke?.texture&&this._stroke.texture.destroy(t),this._originalStroke?.texture&&this._originalStroke.texture.destroy(t)}this._fill=null,this._stroke=null,this.dropShadow=null,this._originalStroke=null,this._originalFill=null}_createProxy(e,t){return new Proxy(e,{set:(e,r,i)=>(e[r]===i||(e[r]=i,t?.(r,i),this.update()),!0)})}_isFillStyle(e){return null!==(e??null)&&!(n.Q.isColorLike(e)||e instanceof l._||e instanceof u.m)}};c.defaultDropShadow={alpha:1,angle:Math.PI/6,blur:0,color:"black",distance:5},c.defaultTextStyle={align:"left",breakWords:!1,dropShadow:null,fill:"black",fontFamily:"Arial",fontSize:26,fontStyle:"normal",fontVariant:"normal",fontWeight:"normal",leading:0,letterSpacing:0,lineHeight:0,padding:0,stroke:null,textBaseline:"alphabetic",trim:!1,whiteSpace:"pre",wordWrap:!1,wordWrapWidth:100};let p=c},8422:(e,t,r)=>{r.d(t,{K:()=>i});class i{constructor(){this.batcherName="default",this.topology="triangle-list",this.attributeSize=4,this.indexSize=6,this.packAsQuad=!0,this.roundPixels=0,this._attributeStart=0,this._batcher=null,this._batch=null}get blendMode(){return this.renderable.groupBlendMode}get color(){return this.renderable.groupColorAlpha}reset(){this.renderable=null,this.texture=null,this._batcher=null,this._batch=null,this.bounds=null}destroy(){}}},8723:(e,t,r)=>{var i=r(8507),n=r(8639),s=r(7547),a=r(5099),o=r(2760),l=r(8734),u=r(5060),h=r(9313),d=r(5611),c=r(2067),p=r(6665),f=r(8475),g=r(5811),m=r(4492);const x={name:"tiling-bit",vertex:{header:"\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        ",main:"\n            uv = (tilingUniforms.uTextureTransform * vec3(uv, 1.0)).xy;\n\n            position = (position - tilingUniforms.uSizeAnchor.zw) * tilingUniforms.uSizeAnchor.xy;\n        "},fragment:{header:"\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        ",main:"\n\n            var coord = vUV + ceil(tilingUniforms.uClampOffset - vUV);\n            coord = (tilingUniforms.uMapCoord * vec3(coord, 1.0)).xy;\n            var unclamped = coord;\n            coord = clamp(coord, tilingUniforms.uClampFrame.xy, tilingUniforms.uClampFrame.zw);\n\n            var bias = 0.;\n\n            if(unclamped.x == coord.x && unclamped.y == coord.y)\n            {\n                bias = -32.;\n            }\n\n            outColor = textureSampleBias(uTexture, uSampler, coord, bias);\n        "}},_={name:"tiling-bit",vertex:{header:"\n            uniform mat3 uTextureTransform;\n            uniform vec4 uSizeAnchor;\n\n        ",main:"\n            uv = (uTextureTransform * vec3(aUV, 1.0)).xy;\n\n            position = (position - uSizeAnchor.zw) * uSizeAnchor.xy;\n        "},fragment:{header:"\n            uniform sampler2D uTexture;\n            uniform mat3 uMapCoord;\n            uniform vec4 uClampFrame;\n            uniform vec2 uClampOffset;\n        ",main:"\n\n        vec2 coord = vUV + ceil(uClampOffset - vUV);\n        coord = (uMapCoord * vec3(coord, 1.0)).xy;\n        vec2 unclamped = coord;\n        coord = clamp(coord, uClampFrame.xy, uClampFrame.zw);\n\n        outColor = texture(uTexture, coord, unclamped == coord ? 0.0 : -32.0);// lod-bias very negative to force lod 0\n\n        "}};let y,v;class b extends f.M{constructor(){y??(y=(0,d.v)({name:"tiling-sprite-shader",bits:[c.Ls,x,p.b]})),v??(v=(0,d.I)({name:"tiling-sprite-shader",bits:[c.mA,_,p.m]}));const e=new g.k({uMapCoord:{value:new h.u,type:"mat3x3<f32>"},uClampFrame:{value:new Float32Array([0,0,1,1]),type:"vec4<f32>"},uClampOffset:{value:new Float32Array([0,0]),type:"vec2<f32>"},uTextureTransform:{value:new h.u,type:"mat3x3<f32>"},uSizeAnchor:{value:new Float32Array([100,100,.5,.5]),type:"vec4<f32>"}});super({glProgram:v,gpuProgram:y,resources:{localUniforms:new g.k({uTransformMatrix:{value:new h.u,type:"mat3x3<f32>"},uColor:{value:new Float32Array([1,1,1,1]),type:"vec4<f32>"},uRound:{value:0,type:"f32"}}),tilingUniforms:e,uTexture:m.g.EMPTY.source,uSampler:m.g.EMPTY.source.style}})}updateUniforms(e,t,r,i,n,s){const a=this.resources.tilingUniforms,o=s.width,l=s.height,u=s.textureMatrix,h=a.uniforms.uTextureTransform;h.set(r.a*o/e,r.b*o/t,r.c*l/e,r.d*l/t,r.tx/e,r.ty/t),h.invert(),a.uniforms.uMapCoord=u.mapCoord,a.uniforms.uClampFrame=u.uClampFrame,a.uniforms.uClampOffset=u.uClampOffset,a.uniforms.uTextureTransform=h,a.uniforms.uSizeAnchor[0]=e,a.uniforms.uSizeAnchor[1]=t,a.uniforms.uSizeAnchor[2]=i,a.uniforms.uSizeAnchor[3]=n,s&&(this.resources.uTexture=s.source,this.resources.uSampler=s.source.style)}}class w extends u.u{constructor(){super({positions:new Float32Array([0,0,1,0,1,1,0,1]),uvs:new Float32Array([0,0,1,0,1,1,0,1]),indices:new Uint32Array([0,1,2,0,2,3])})}}const T=new w;class S{constructor(){this.canBatch=!0,this.geometry=new u.u({indices:T.indices.slice(),positions:T.positions.slice(),uvs:T.uvs.slice()})}destroy(){this.geometry.destroy(),this.shader?.destroy()}}class C{constructor(e){this._state=s.U.default2d,this._renderer=e}validateRenderable(e){const t=this._getTilingSpriteData(e),r=t.canBatch;this._updateCanBatch(e);const i=t.canBatch;if(i&&i===r){const{batchableMesh:r}=t;return!r._batcher.checkAndUpdateTexture(r,e.texture)}return r!==i}addRenderable(e,t){const r=this._renderer.renderPipes.batch;this._updateCanBatch(e);const i=this._getTilingSpriteData(e),{geometry:n,canBatch:s}=i;if(s){i.batchableMesh||(i.batchableMesh=new l.U);const s=i.batchableMesh;e.didViewUpdate&&(this._updateBatchableMesh(e),s.geometry=n,s.renderable=e,s.transform=e.groupTransform,s.setTexture(e._texture)),s.roundPixels=this._renderer._roundPixels|e._roundPixels,r.addToBatch(s,t)}else r.break(t),i.shader||(i.shader=new b),this.updateRenderable(e),t.add(e)}execute(e){const{shader:t}=this._getTilingSpriteData(e);t.groups[0]=this._renderer.globalUniforms.bindGroup;const r=t.resources.localUniforms.uniforms;r.uTransformMatrix=e.groupTransform,r.uRound=this._renderer._roundPixels|e._roundPixels,(0,o.V)(e.groupColorAlpha,r.uColor,0),this._state.blendMode=(0,n.i)(e.groupBlendMode,e.texture._source),this._renderer.encoder.draw({geometry:T,shader:t,state:this._state})}updateRenderable(e){const t=this._getTilingSpriteData(e),{canBatch:r}=t;if(r){const{batchableMesh:r}=t;e.didViewUpdate&&this._updateBatchableMesh(e),r._batcher.updateElement(r)}else if(e.didViewUpdate){const{shader:r}=t;r.updateUniforms(e.width,e.height,e._tileTransform.matrix,e.anchor.x,e.anchor.y,e.texture)}}_getTilingSpriteData(e){return e._gpuData[this._renderer.uid]||this._initTilingSpriteData(e)}_initTilingSpriteData(e){const t=new S;return t.renderable=e,e._gpuData[this._renderer.uid]=t,t}_updateBatchableMesh(e){const t=this._getTilingSpriteData(e),{geometry:r}=t,i=e.texture.source.style;"repeat"!==i.addressMode&&(i.addressMode="repeat",i.update()),function(e,t){const r=e.texture,i=r.frame.width,n=r.frame.height;let s=0,a=0;e.applyAnchorToTexture&&(s=e.anchor.x,a=e.anchor.y),t[0]=t[6]=-s,t[2]=t[4]=1-s,t[1]=t[3]=-a,t[5]=t[7]=1-a;const o=h.u.shared;o.copyFrom(e._tileTransform.matrix),o.tx/=e.width,o.ty/=e.height,o.invert(),o.scale(e.width/i,e.height/n),function(e,t,r,i){let n=0;const s=e.length/2,a=i.a,o=i.b,l=i.c,u=i.d,h=i.tx,d=i.ty;for(r*=2;n<s;){const t=e[r],i=e[r+1];e[r]=a*t+l*i+h,e[r+1]=o*t+u*i+d,r+=2,n++}}(t,0,0,o)}(e,r.uvs),function(e,t){const r=e.anchor.x,i=e.anchor.y;t[0]=-r*e.width,t[1]=-i*e.height,t[2]=(1-r)*e.width,t[3]=-i*e.height,t[4]=(1-r)*e.width,t[5]=(1-i)*e.height,t[6]=-r*e.width,t[7]=(1-i)*e.height}(e,r.positions)}destroy(){this._renderer=null}_updateCanBatch(e){const t=this._getTilingSpriteData(e),r=e.texture;let i=!0;return this._renderer.type===a.W.WEBGL&&(i=this._renderer.context.supports.nonPowOf2wrapping),t.canBatch=r.textureMatrix.isSimple&&(i||r.source.isPowerOfTwo),t.canBatch}}C.extension={type:[i.Ag.WebGLPipes,i.Ag.WebGPUPipes,i.Ag.CanvasPipes],name:"tilingSprite"},i.XO.add(C)},8734:(e,t,r)=>{r.d(t,{U:()=>i});class i{constructor(){this.batcherName="default",this.packAsQuad=!1,this.indexOffset=0,this.attributeOffset=0,this.roundPixels=0,this._batcher=null,this._batch=null,this._textureMatrixUpdateId=-1,this._uvUpdateId=-1}get blendMode(){return this.renderable.groupBlendMode}get topology(){return this._topology||this.geometry.topology}set topology(e){this._topology=e}reset(){this.renderable=null,this.texture=null,this._batcher=null,this._batch=null,this.geometry=null,this._uvUpdateId=-1,this._textureMatrixUpdateId=-1}setTexture(e){this.texture!==e&&(this.texture=e,this._textureMatrixUpdateId=-1)}get uvs(){const e=this.geometry.getBuffer("aUV"),t=e.data;let r=t;const i=this.texture.textureMatrix;return i.isSimple||(r=this._transformedUvs,this._textureMatrixUpdateId===i._updateID&&this._uvUpdateId===e._updateID||((!r||r.length<t.length)&&(r=this._transformedUvs=new Float32Array(t.length)),this._textureMatrixUpdateId=i._updateID,this._uvUpdateId=e._updateID,i.multiplyUvs(t,r))),r}get positions(){return this.geometry.positions}get indices(){return this.geometry.indices}get color(){return this.renderable.groupColorAlpha}get groupTransform(){return this.renderable.groupTransform}get attributeSize(){return this.geometry.positions.length/2}get indexSize(){return this.geometry.indices.length}}},8928:(e,t,r)=>{var i=r(8507),n=r(6302),s=r(7547),a=r(8655),o=r(2760),l=r(6954);class u{constructor(){this.batches=[],this.batched=!1}destroy(){this.batches.forEach(e=>{a.Z.return(e)}),this.batches.length=0}}class h{constructor(e,t){this.state=s.U.for2d(),this.renderer=e,this._adaptor=t,this.renderer.runners.contextChange.add(this)}contextChange(){this._adaptor.contextChange(this.renderer)}validateRenderable(e){const t=e.context,r=!!e._gpuData,i=this.renderer.graphicsContext.updateGpuContext(t);return!(!i.isBatchable&&r===i.isBatchable)}addRenderable(e,t){const r=this.renderer.graphicsContext.updateGpuContext(e.context);e.didViewUpdate&&this._rebuild(e),r.isBatchable?this._addToBatcher(e,t):(this.renderer.renderPipes.batch.break(t),t.add(e))}updateRenderable(e){const t=this._getGpuDataForRenderable(e).batches;for(let e=0;e<t.length;e++){const r=t[e];r._batcher.updateElement(r)}}execute(e){if(!e.isRenderable)return;const t=this.renderer,r=e.context;if(!t.graphicsContext.getGpuContext(r).batches.length)return;const i=r.customShader||this._adaptor.shader;this.state.blendMode=e.groupBlendMode;const n=i.resources.localUniforms.uniforms;n.uTransformMatrix=e.groupTransform,n.uRound=t._roundPixels|e._roundPixels,(0,o.V)(e.groupColorAlpha,n.uColor,0),this._adaptor.execute(this,e)}_rebuild(e){const t=this._getGpuDataForRenderable(e),r=this.renderer.graphicsContext.updateGpuContext(e.context);t.destroy(),r.isBatchable&&this._updateBatchesForRenderable(e,t)}_addToBatcher(e,t){const r=this.renderer.renderPipes.batch,i=this._getGpuDataForRenderable(e).batches;for(let e=0;e<i.length;e++){const n=i[e];r.addToBatch(n,t)}}_getGpuDataForRenderable(e){return e._gpuData[this.renderer.uid]||this._initGpuDataForRenderable(e)}_initGpuDataForRenderable(e){const t=new u;return e._gpuData[this.renderer.uid]=t,t}_updateBatchesForRenderable(e,t){const r=e.context,i=this.renderer.graphicsContext.getGpuContext(r),n=this.renderer._roundPixels|e._roundPixels;t.batches=i.batches.map(t=>{const r=a.Z.get(l.G);return t.copyTo(r),r.renderable=e,r.roundPixels=n,r})}destroy(){this.renderer=null,this._adaptor.destroy(),this._adaptor=null,this.state=null}}h.extension={type:[i.Ag.WebGLPipes,i.Ag.WebGPUPipes,i.Ag.CanvasPipes],name:"graphics"},i.XO.add(h),i.XO.add(n.GH)},9305:(e,t,r)=>{var i=r(8507);class n{execute(e,t){const r=e.state,i=e.renderer,n=t.shader||e.defaultShader;n.resources.uTexture=t.texture._source,n.resources.uniforms=e.localUniforms;const s=i.gl,a=e.getBuffers(t);i.shader.bind(n),i.state.set(r),i.geometry.bind(a.geometry,n.glProgram);const o=2===a.geometry.indexBuffer.data.BYTES_PER_ELEMENT?s.UNSIGNED_SHORT:s.UNSIGNED_INT;s.drawElements(s.TRIANGLES,6*t.particleChildren.length,o,0)}}var s=r(9313),a=r(5811),o=r(8639),l=r(7547),u=r(2760),h=r(949),d=r(1132),c=r(6011),p=r(8306),f=r(1460);function g(e,t=null){const r=6*e;if(r>65535?t||(t=new Uint32Array(r)):t||(t=new Uint16Array(r)),t.length!==r)throw new Error(`Out buffer length is incorrect, got ${t.length} and expected ${r}`);for(let e=0,i=0;e<r;e+=6,i+=4)t[e+0]=i+0,t[e+1]=i+1,t[e+2]=i+2,t[e+3]=i+0,t[e+4]=i+2,t[e+5]=i+3;return t}function m(e,t){const r=[];r.push("\n\n        var index = 0;\n\n        for (let i = 0; i < ps.length; ++i)\n        {\n            const p = ps[i];\n\n            ");let i=0;for(const n in e){const s=e[n];t===s.dynamic&&(r.push(`offset = index + ${i}`),r.push(s.code),i+=(0,p.m)(s.format).stride/4)}r.push("\n            index += stride * 4;\n        }\n    "),r.unshift(`\n        var stride = ${i};\n    `);const n=r.join("\n");return new Function("ps","f32v","u32v",n)}class x{constructor(e){this._size=0,this._generateParticleUpdateCache={};const t=this._size=e.size??1e3,r=e.properties;let i=0,n=0;for(const e in r){const t=r[e],s=(0,p.m)(t.format);t.dynamic?n+=s.stride:i+=s.stride}this._dynamicStride=n/4,this._staticStride=i/4,this.staticAttributeBuffer=new f.u(4*t*i),this.dynamicAttributeBuffer=new f.u(4*t*n),this.indexBuffer=g(t);const s=new c.V;let a=0,o=0;this._staticBuffer=new h.h({data:new Float32Array(1),label:"static-particle-buffer",shrinkToFit:!1,usage:d.S.VERTEX|d.S.COPY_DST}),this._dynamicBuffer=new h.h({data:new Float32Array(1),label:"dynamic-particle-buffer",shrinkToFit:!1,usage:d.S.VERTEX|d.S.COPY_DST});for(const e in r){const t=r[e],i=(0,p.m)(t.format);t.dynamic?(s.addAttribute(t.attributeName,{buffer:this._dynamicBuffer,stride:4*this._dynamicStride,offset:4*a,format:t.format}),a+=i.size):(s.addAttribute(t.attributeName,{buffer:this._staticBuffer,stride:4*this._staticStride,offset:4*o,format:t.format}),o+=i.size)}s.addIndex(this.indexBuffer);const l=this.getParticleUpdate(r);this._dynamicUpload=l.dynamicUpdate,this._staticUpload=l.staticUpdate,this.geometry=s}getParticleUpdate(e){const t=function(e){const t=[];for(const r in e){const i=e[r];t.push(r,i.code,i.dynamic?"d":"s")}return t.join("_")}(e);return this._generateParticleUpdateCache[t]||(this._generateParticleUpdateCache[t]=this.generateParticleUpdate(e)),this._generateParticleUpdateCache[t]}generateParticleUpdate(e){return function(e){return{dynamicUpdate:m(e,!0),staticUpdate:m(e,!1)}}(e)}update(e,t){e.length>this._size&&(t=!0,this._size=Math.max(e.length,1.5*this._size|0),this.staticAttributeBuffer=new f.u(this._size*this._staticStride*4*4),this.dynamicAttributeBuffer=new f.u(this._size*this._dynamicStride*4*4),this.indexBuffer=g(this._size),this.geometry.indexBuffer.setDataWithSize(this.indexBuffer,this.indexBuffer.byteLength,!0));const r=this.dynamicAttributeBuffer;if(this._dynamicUpload(e,r.float32View,r.uint32View),this._dynamicBuffer.setDataWithSize(this.dynamicAttributeBuffer.float32View,e.length*this._dynamicStride*4,!0),t){const t=this.staticAttributeBuffer;this._staticUpload(e,t.float32View,t.uint32View),this._staticBuffer.setDataWithSize(t.float32View,e.length*this._staticStride*4,!0)}}destroy(){this._staticBuffer.destroy(),this._dynamicBuffer.destroy(),this.geometry.destroy()}}var _=r(2577),y=r(9113),v=r(3012),b=r(8475),w=r(4492),T=r(218),S="\nstruct ParticleUniforms {\n  uTranslationMatrix:mat3x3<f32>,\n  uColor:vec4<f32>,\n  uRound:f32,\n  uResolution:vec2<f32>,\n};\n\nfn roundPixels(position: vec2<f32>, targetSize: vec2<f32>) -> vec2<f32>\n{\n  return (floor(((position * 0.5 + 0.5) * targetSize) + 0.5) / targetSize) * 2.0 - 1.0;\n}\n\n@group(0) @binding(0) var<uniform> uniforms: ParticleUniforms;\n\n@group(1) @binding(0) var uTexture: texture_2d<f32>;\n@group(1) @binding(1) var uSampler : sampler;\n\nstruct VSOutput {\n    @builtin(position) position: vec4<f32>,\n    @location(0) uv : vec2<f32>,\n    @location(1) color : vec4<f32>,\n  };\n@vertex\nfn mainVertex(\n  @location(0) aVertex: vec2<f32>,\n  @location(1) aPosition: vec2<f32>,\n  @location(2) aUV: vec2<f32>,\n  @location(3) aColor: vec4<f32>,\n  @location(4) aRotation: f32,\n) -> VSOutput {\n  \n   let v = vec2(\n       aVertex.x * cos(aRotation) - aVertex.y * sin(aRotation),\n       aVertex.x * sin(aRotation) + aVertex.y * cos(aRotation)\n   ) + aPosition;\n\n   var position = vec4((uniforms.uTranslationMatrix * vec3(v, 1.0)).xy, 0.0, 1.0);\n\n   if(uniforms.uRound == 1.0) {\n       position = vec4(roundPixels(position.xy, uniforms.uResolution), position.zw);\n   }\n\n    let vColor = vec4(aColor.rgb * aColor.a, aColor.a) * uniforms.uColor;\n\n  return VSOutput(\n   position,\n   aUV,\n   vColor,\n  );\n}\n\n@fragment\nfn mainFragment(\n  @location(0) uv: vec2<f32>,\n  @location(1) color: vec4<f32>,\n  @builtin(position) position: vec4<f32>,\n) -> @location(0) vec4<f32> {\n\n    var sample = textureSample(uTexture, uSampler, uv) * color;\n   \n    return sample;\n}";class C extends b.M{constructor(){super({glProgram:y.M.from({vertex:"attribute vec2 aVertex;\nattribute vec2 aUV;\nattribute vec4 aColor;\n\nattribute vec2 aPosition;\nattribute float aRotation;\n\nuniform mat3 uTranslationMatrix;\nuniform float uRound;\nuniform vec2 uResolution;\nuniform vec4 uColor;\n\nvarying vec2 vUV;\nvarying vec4 vColor;\n\nvec2 roundPixels(vec2 position, vec2 targetSize)\n{       \n    return (floor(((position * 0.5 + 0.5) * targetSize) + 0.5) / targetSize) * 2.0 - 1.0;\n}\n\nvoid main(void){\n    float cosRotation = cos(aRotation);\n    float sinRotation = sin(aRotation);\n    float x = aVertex.x * cosRotation - aVertex.y * sinRotation;\n    float y = aVertex.x * sinRotation + aVertex.y * cosRotation;\n\n    vec2 v = vec2(x, y);\n    v = v + aPosition;\n\n    gl_Position = vec4((uTranslationMatrix * vec3(v, 1.0)).xy, 0.0, 1.0);\n\n    if(uRound == 1.0)\n    {\n        gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n    }\n\n    vUV = aUV;\n    vColor = vec4(aColor.rgb * aColor.a, aColor.a) * uColor;\n}\n",fragment:"varying vec2 vUV;\nvarying vec4 vColor;\n\nuniform sampler2D uTexture;\n\nvoid main(void){\n    vec4 color = texture2D(uTexture, vUV) * vColor;\n    gl_FragColor = color;\n}"}),gpuProgram:v.B.from({fragment:{source:S,entryPoint:"mainFragment"},vertex:{source:S,entryPoint:"mainVertex"}}),resources:{uTexture:w.g.WHITE.source,uSampler:new T.n({}),uniforms:{uTranslationMatrix:{value:new s.u,type:"mat3x3<f32>"},uColor:{value:new _.Q(16777215),type:"vec4<f32>"},uRound:{value:1,type:"f32"},uResolution:{value:[0,0],type:"vec2<f32>"}}}})}}class P{constructor(e,t){this.state=l.U.for2d(),this.localUniforms=new a.k({uTranslationMatrix:{value:new s.u,type:"mat3x3<f32>"},uColor:{value:new Float32Array(4),type:"vec4<f32>"},uRound:{value:1,type:"f32"},uResolution:{value:[0,0],type:"vec2<f32>"}}),this.renderer=e,this.adaptor=t,this.defaultShader=new C,this.state=l.U.for2d()}validateRenderable(e){return!1}addRenderable(e,t){this.renderer.renderPipes.batch.break(t),t.add(e)}getBuffers(e){return e._gpuData[this.renderer.uid]||this._initBuffer(e)}_initBuffer(e){return e._gpuData[this.renderer.uid]=new x({size:e.particleChildren.length,properties:e._properties}),e._gpuData[this.renderer.uid]}updateRenderable(e){}execute(e){const t=e.particleChildren;if(0===t.length)return;const r=this.renderer,i=this.getBuffers(e);e.texture||(e.texture=t[0].texture);const n=this.state;i.update(t,e._childrenDirty),e._childrenDirty=!1,n.blendMode=(0,o.i)(e.blendMode,e.texture._source);const s=this.localUniforms.uniforms,a=s.uTranslationMatrix;e.worldTransform.copyTo(a),a.prepend(r.globalUniforms.globalUniformData.projectionMatrix),s.uResolution=r.globalUniforms.globalUniformData.resolution,s.uRound=r._roundPixels|e._roundPixels,(0,u.V)(e.groupColorAlpha,s.uColor,0),this.adaptor.execute(this,e)}destroy(){this.renderer=null,this.defaultShader&&(this.defaultShader.destroy(),this.defaultShader=null)}}class F extends P{constructor(e){super(e,new n)}}F.extension={type:[i.Ag.WebGLPipes],name:"particle"};class k{execute(e,t){const r=e.renderer,i=t.shader||e.defaultShader;i.groups[0]=r.renderPipes.uniformBatch.getUniformBindGroup(e.localUniforms,!0),i.groups[1]=r.texture.getTextureBindGroup(t.texture);const n=e.state,s=e.getBuffers(t);r.encoder.draw({geometry:s.geometry,shader:t.shader||e.defaultShader,state:n,size:6*t.particleChildren.length})}}class M extends P{constructor(e){super(e,new k)}}M.extension={type:[i.Ag.WebGPUPipes],name:"particle"},i.XO.add(F),i.XO.add(M)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,